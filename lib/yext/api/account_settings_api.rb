=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Yext
  class AccountSettingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # LinkedAccounts: Assign
    # Copy an eligible Linked Account from the top-level parent account to a subaccount. Optionally assign the Linked Account to an entity in the subaccount.  This functionality is only available for certain Yext accounts. Please reach out to your Yext representative for more information. 
    # @param account_id [String] 
    # @param linked_account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param assign_linked_account_request [AssignLinkedAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AssignLinkedAccountResponse]
    def assign_linked_account(account_id, linked_account_id, v, assign_linked_account_request, opts = {})
      data, _status_code, _headers = assign_linked_account_with_http_info(account_id, linked_account_id, v, assign_linked_account_request, opts)
      data
    end

    # LinkedAccounts: Assign
    # Copy an eligible Linked Account from the top-level parent account to a subaccount. Optionally assign the Linked Account to an entity in the subaccount.  This functionality is only available for certain Yext accounts. Please reach out to your Yext representative for more information. 
    # @param account_id [String] 
    # @param linked_account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param assign_linked_account_request [AssignLinkedAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AssignLinkedAccountResponse, Integer, Hash)>] AssignLinkedAccountResponse data, response status code and response headers
    def assign_linked_account_with_http_info(account_id, linked_account_id, v, assign_linked_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.assign_linked_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.assign_linked_account"
      end
      # verify the required parameter 'linked_account_id' is set
      if @api_client.config.client_side_validation && linked_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_account_id' when calling AccountSettingsApi.assign_linked_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.assign_linked_account"
      end
      # verify the required parameter 'assign_linked_account_request' is set
      if @api_client.config.client_side_validation && assign_linked_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'assign_linked_account_request' when calling AccountSettingsApi.assign_linked_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/linkedaccounts/{linkedAccountId}/assign'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'linkedAccountId' + '}', CGI.escape(linked_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(assign_linked_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AssignLinkedAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.assign_linked_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#assign_linked_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Approval Groups: Create
    # Creates an Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_approval_group_request [CreateApprovalGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_approval_group(account_id, v, create_approval_group_request, opts = {})
      data, _status_code, _headers = create_approval_group_with_http_info(account_id, v, create_approval_group_request, opts)
      data
    end

    # Approval Groups: Create
    # Creates an Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_approval_group_request [CreateApprovalGroupRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def create_approval_group_with_http_info(account_id, v, create_approval_group_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.create_approval_group ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.create_approval_group"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.create_approval_group"
      end
      # verify the required parameter 'create_approval_group_request' is set
      if @api_client.config.client_side_validation && create_approval_group_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_approval_group_request' when calling AccountSettingsApi.create_approval_group"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/approvalgroups'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_approval_group_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.create_approval_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#create_approval_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: Create
    # Create a new User  **NOTE**:  If the **`v`** parameter is before `20190225`: **`displayLanguagePreference`** and **`emailLanguagePreference`** will not be accepted in the request body.  If the **`v`** parameter is `20190225` or later: **`displayLanguagePreference`** and **`emailLanguagePreference`** will be accepted in the request body. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_user_request [CreateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_user(account_id, v, create_user_request, opts = {})
      data, _status_code, _headers = create_user_with_http_info(account_id, v, create_user_request, opts)
      data
    end

    # Users: Create
    # Create a new User  **NOTE**:  If the **&#x60;v&#x60;** parameter is before &#x60;20190225&#x60;: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will not be accepted in the request body.  If the **&#x60;v&#x60;** parameter is &#x60;20190225&#x60; or later: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will be accepted in the request body. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_user_request [CreateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def create_user_with_http_info(account_id, v, create_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.create_user ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.create_user"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.create_user"
      end
      # verify the required parameter 'create_user_request' is set
      if @api_client.config.client_side_validation && create_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_user_request' when calling AccountSettingsApi.create_user"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/users'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ApprovalGroups: Delete
    # Deletes an Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_approval_group(account_id, v, approval_group_id, opts = {})
      data, _status_code, _headers = delete_approval_group_with_http_info(account_id, v, approval_group_id, opts)
      data
    end

    # ApprovalGroups: Delete
    # Deletes an Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_approval_group_with_http_info(account_id, v, approval_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.delete_approval_group ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.delete_approval_group"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.delete_approval_group"
      end
      # verify the required parameter 'approval_group_id' is set
      if @api_client.config.client_side_validation && approval_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'approval_group_id' when calling AccountSettingsApi.delete_approval_group"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/approvalgroups/{approvalGroupId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'approvalGroupId' + '}', CGI.escape(approval_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.delete_approval_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#delete_approval_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: Delete
    # Deletes an existing User.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_user(account_id, v, user_id, opts = {})
      data, _status_code, _headers = delete_user_with_http_info(account_id, v, user_id, opts)
      data
    end

    # Users: Delete
    # Deletes an existing User.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_user_with_http_info(account_id, v, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.delete_user ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.delete_user"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.delete_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AccountSettingsApi.delete_user"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/users/{userId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: Get
    # Get details for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponse]
    def get_account(account_id, v, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, v, opts)
      data
    end

    # Accounts: Get
    # Get details for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponse, Integer, Hash)>] AccountResponse data, response status code and response headers
    def get_account_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ApprovalGroups: Get
    # Gets a single Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [ApprovalGroupResponse]
    def get_approval_group(account_id, v, approval_group_id, opts = {})
      data, _status_code, _headers = get_approval_group_with_http_info(account_id, v, approval_group_id, opts)
      data
    end

    # ApprovalGroups: Get
    # Gets a single Approval Group.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApprovalGroupResponse, Integer, Hash)>] ApprovalGroupResponse data, response status code and response headers
    def get_approval_group_with_http_info(account_id, v, approval_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_approval_group ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_approval_group"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_approval_group"
      end
      # verify the required parameter 'approval_group_id' is set
      if @api_client.config.client_side_validation && approval_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'approval_group_id' when calling AccountSettingsApi.get_approval_group"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/approvalgroups/{approvalGroupId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'approvalGroupId' + '}', CGI.escape(approval_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApprovalGroupResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_approval_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_approval_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ApprovalGroups: List
    # Lists all Approval Groups in the account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ApprovalGroupsResponse]
    def get_approval_groups(account_id, v, opts = {})
      data, _status_code, _headers = get_approval_groups_with_http_info(account_id, v, opts)
      data
    end

    # ApprovalGroups: List
    # Lists all Approval Groups in the account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ApprovalGroupsResponse, Integer, Hash)>] ApprovalGroupsResponse data, response status code and response headers
    def get_approval_groups_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_approval_groups ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_approval_groups"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_approval_groups"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/approvalgroups'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ApprovalGroupsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_approval_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_approval_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LinkedAccounts: Get
    # Get details for an linked account.
    # @param account_id [String] 
    # @param linked_account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [LinkedAccountResponse]
    def get_linked_account(account_id, linked_account_id, v, opts = {})
      data, _status_code, _headers = get_linked_account_with_http_info(account_id, linked_account_id, v, opts)
      data
    end

    # LinkedAccounts: Get
    # Get details for an linked account.
    # @param account_id [String] 
    # @param linked_account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(LinkedAccountResponse, Integer, Hash)>] LinkedAccountResponse data, response status code and response headers
    def get_linked_account_with_http_info(account_id, linked_account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_linked_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_linked_account"
      end
      # verify the required parameter 'linked_account_id' is set
      if @api_client.config.client_side_validation && linked_account_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_account_id' when calling AccountSettingsApi.get_linked_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_linked_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/linkedaccounts/{linkedAccountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'linkedAccountId' + '}', CGI.escape(linked_account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkedAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_linked_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_linked_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Roles: Get
    # Retrieves a list of the roles that users can have within a customer’s account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [RolesResponse]
    def get_roles(account_id, v, opts = {})
      data, _status_code, _headers = get_roles_with_http_info(account_id, v, opts)
      data
    end

    # Roles: Get
    # Retrieves a list of the roles that users can have within a customer’s account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RolesResponse, Integer, Hash)>] RolesResponse data, response status code and response headers
    def get_roles_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_roles ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_roles"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_roles"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/roles'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RolesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: Get
    # Retrieves details of a specific User.  **NOTE**:  If the **`v`** parameter is before `20190225`: **`displayLanguagePreference`** and **`emailLanguagePreference`** will not be included in the response.  If the **`v`** parameter is `20190225` or later: **`displayLanguagePreference`** and **`emailLanguagePreference`** will be included in the response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [UserResponse]
    def get_user(account_id, v, user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(account_id, v, user_id, opts)
      data
    end

    # Users: Get
    # Retrieves details of a specific User.  **NOTE**:  If the **&#x60;v&#x60;** parameter is before &#x60;20190225&#x60;: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will not be included in the response.  If the **&#x60;v&#x60;** parameter is &#x60;20190225&#x60; or later: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will be included in the response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UserResponse, Integer, Hash)>] UserResponse data, response status code and response headers
    def get_user_with_http_info(account_id, v, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_user ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_user"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AccountSettingsApi.get_user"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/users/{userId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UserResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: List
    # Lists all Users in an account.  **NOTE**:  If the **`v`** parameter is before `20190225`: **`displayLanguagePreference`** and **`emailLanguagePreference`** will not be included in the response.  If the **`v`** parameter is `20190225` or later: **`displayLanguagePreference`** and **`emailLanguagePreference`** will be included in the response.  This endpoint does not support the **`all`** macro. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [UsersResponse]
    def get_users(account_id, v, opts = {})
      data, _status_code, _headers = get_users_with_http_info(account_id, v, opts)
      data
    end

    # Users: List
    # Lists all Users in an account.  **NOTE**:  If the **&#x60;v&#x60;** parameter is before &#x60;20190225&#x60;: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will not be included in the response.  If the **&#x60;v&#x60;** parameter is &#x60;20190225&#x60; or later: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will be included in the response.  This endpoint does not support the **&#x60;all&#x60;** macro. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(UsersResponse, Integer, Hash)>] UsersResponse data, response status code and response headers
    def get_users_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.get_users ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.get_users"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.get_users"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountSettingsApi.get_users, must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/users'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UsersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.get_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#get_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: List
    # List all accounts that you have access to. Unless you are in Partner Portal mode, this will only be your own account.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Returns only accounts whose name contains the provided string
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [AccountsResponse]
    def list_accounts(v, opts = {})
      data, _status_code, _headers = list_accounts_with_http_info(v, opts)
      data
    end

    # Accounts: List
    # List all accounts that you have access to. Unless you are in Partner Portal mode, this will only be your own account.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Returns only accounts whose name contains the provided string
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(AccountsResponse, Integer, Hash)>] AccountsResponse data, response status code and response headers
    def list_accounts_with_http_info(v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.list_accounts ...'
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.list_accounts"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountSettingsApi.list_accounts, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.list_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#list_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # LinkedAccounts: List
    # Lists all linked accounts in an account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids When provided, only linked accounts assigned to the specified entities will be returned.
    # @option opts [Array<String>] :publisher_ids When provided, only linked accounts for the specified sites will be returned.
    # @option opts [Array<String>] :statuses Defaults to all statuses. When specified, only linked accounts with the provided statuses will be returned.
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [LinkedAccountsResponse]
    def list_linked_accounts(account_id, v, opts = {})
      data, _status_code, _headers = list_linked_accounts_with_http_info(account_id, v, opts)
      data
    end

    # LinkedAccounts: List
    # Lists all linked accounts in an account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids When provided, only linked accounts assigned to the specified entities will be returned.
    # @option opts [Array<String>] :publisher_ids When provided, only linked accounts for the specified sites will be returned.
    # @option opts [Array<String>] :statuses Defaults to all statuses. When specified, only linked accounts with the provided statuses will be returned.
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(LinkedAccountsResponse, Integer, Hash)>] LinkedAccountsResponse data, response status code and response headers
    def list_linked_accounts_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.list_linked_accounts ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.list_linked_accounts"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.list_linked_accounts"
      end
      allowable_values = ["VALID", "INVALID"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AccountSettingsApi.list_linked_accounts, must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/linkedaccounts'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = @api_client.build_collection_param(opts[:'entity_ids'], :multi) if !opts[:'entity_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :multi) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'LinkedAccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.list_linked_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#list_linked_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # ApprovalGroups: Update
    # Updates a single Approval Group.  **NOTE:** Despite using the PUT method, Approval Groups: Update only updates supplied fields. Omitted fields are not modified. However, the users list will be overwritten with what the user provides. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param approval_group [ApprovalGroup] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def update_approval_group(account_id, v, approval_group_id, approval_group, opts = {})
      data, _status_code, _headers = update_approval_group_with_http_info(account_id, v, approval_group_id, approval_group, opts)
      data
    end

    # ApprovalGroups: Update
    # Updates a single Approval Group.  **NOTE:** Despite using the PUT method, Approval Groups: Update only updates supplied fields. Omitted fields are not modified. However, the users list will be overwritten with what the user provides. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param approval_group_id [String] 
    # @param approval_group [ApprovalGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def update_approval_group_with_http_info(account_id, v, approval_group_id, approval_group, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.update_approval_group ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.update_approval_group"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.update_approval_group"
      end
      # verify the required parameter 'approval_group_id' is set
      if @api_client.config.client_side_validation && approval_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'approval_group_id' when calling AccountSettingsApi.update_approval_group"
      end
      # verify the required parameter 'approval_group' is set
      if @api_client.config.client_side_validation && approval_group.nil?
        fail ArgumentError, "Missing the required parameter 'approval_group' when calling AccountSettingsApi.update_approval_group"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/approvalgroups/{approvalGroupId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'approvalGroupId' + '}', CGI.escape(approval_group_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(approval_group)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.update_approval_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#update_approval_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: Update
    # Updates an existing User.  **NOTE**:  If the **`v`** parameter is before `20190225`: **`displayLanguagePreference`** and **`emailLanguagePreference`** will not be accepted in the request body.  If the **`v`** parameter is `20190225` or later: **`displayLanguagePreference`** and **`emailLanguagePreference`** will be accepted in the request body. If not provided, existing values will be cleared. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param update_user_request [UpdateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def update_user(account_id, v, user_id, update_user_request, opts = {})
      data, _status_code, _headers = update_user_with_http_info(account_id, v, user_id, update_user_request, opts)
      data
    end

    # Users: Update
    # Updates an existing User.  **NOTE**:  If the **&#x60;v&#x60;** parameter is before &#x60;20190225&#x60;: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will not be accepted in the request body.  If the **&#x60;v&#x60;** parameter is &#x60;20190225&#x60; or later: **&#x60;displayLanguagePreference&#x60;** and **&#x60;emailLanguagePreference&#x60;** will be accepted in the request body. If not provided, existing values will be cleared. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param update_user_request [UpdateUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def update_user_with_http_info(account_id, v, user_id, update_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.update_user ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.update_user"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.update_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AccountSettingsApi.update_user"
      end
      # verify the required parameter 'update_user_request' is set
      if @api_client.config.client_side_validation && update_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_user_request' when calling AccountSettingsApi.update_user"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/users/{userId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Users: Update Password
    # Updates a User's password.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePasswordRequest] :update_password_request 
    # @return [EmptyResponse]
    def update_user_password(account_id, v, user_id, opts = {})
      data, _status_code, _headers = update_user_password_with_http_info(account_id, v, user_id, opts)
      data
    end

    # Users: Update Password
    # Updates a User&#39;s password.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param user_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [UpdatePasswordRequest] :update_password_request 
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def update_user_password_with_http_info(account_id, v, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AccountSettingsApi.update_user_password ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AccountSettingsApi.update_user_password"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AccountSettingsApi.update_user_password"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling AccountSettingsApi.update_user_password"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/users/{userId}/password'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'userId' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_password_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AccountSettingsApi.update_user_password",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AccountSettingsApi#update_user_password\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
