=begin
#Yext Admin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Yext
  class AdministrativeAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Services: Cancel All (Sub-Account)
    # Cancel all active services (all quantities) provisioned on the sub-account.  **NOTE:** If you have added services to a sub-account, use this endpoint on your *main account* to cancel all of them. 
    # @param account_id [String] The ID of the account.  **NOTE:** Enter the ID of the *main account* rather than the sub-account to cancel all of the services provisioned on the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_all_sub_account_services_request [CancelAllSubAccountServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CancelAllSubAccountServicesResponse]
    def cancel_all_sub_account_services(account_id, v, cancel_all_sub_account_services_request, opts = {})
      data, _status_code, _headers = cancel_all_sub_account_services_with_http_info(account_id, v, cancel_all_sub_account_services_request, opts)
      data
    end

    # Services: Cancel All (Sub-Account)
    # Cancel all active services (all quantities) provisioned on the sub-account.  **NOTE:** If you have added services to a sub-account, use this endpoint on your *main account* to cancel all of them. 
    # @param account_id [String] The ID of the account.  **NOTE:** Enter the ID of the *main account* rather than the sub-account to cancel all of the services provisioned on the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_all_sub_account_services_request [CancelAllSubAccountServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelAllSubAccountServicesResponse, Integer, Hash)>] CancelAllSubAccountServicesResponse data, response status code and response headers
    def cancel_all_sub_account_services_with_http_info(account_id, v, cancel_all_sub_account_services_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.cancel_all_sub_account_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.cancel_all_sub_account_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.cancel_all_sub_account_services"
      end
      # verify the required parameter 'cancel_all_sub_account_services_request' is set
      if @api_client.config.client_side_validation && cancel_all_sub_account_services_request.nil?
        fail ArgumentError, "Missing the required parameter 'cancel_all_sub_account_services_request' when calling AdministrativeAPIApi.cancel_all_sub_account_services"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/cancelallsubaccountservices'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cancel_all_sub_account_services_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CancelAllSubAccountServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.cancel_all_sub_account_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#cancel_all_sub_account_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Services: Cancel (Location)
    # Cancel one or more active services provisioned on the location.  **NOTE:** If you have added location services under a sub-account, use this endpoint on your *main account* to cancel them. 
    # @param account_id [String] The ID of the account.  **NOTE:** If you would like to cancel location services under a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_services_request [CancelServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CancelServicesResponse]
    def cancel_services(account_id, v, cancel_services_request, opts = {})
      data, _status_code, _headers = cancel_services_with_http_info(account_id, v, cancel_services_request, opts)
      data
    end

    # Services: Cancel (Location)
    # Cancel one or more active services provisioned on the location.  **NOTE:** If you have added location services under a sub-account, use this endpoint on your *main account* to cancel them. 
    # @param account_id [String] The ID of the account.  **NOTE:** If you would like to cancel location services under a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_services_request [CancelServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelServicesResponse, Integer, Hash)>] CancelServicesResponse data, response status code and response headers
    def cancel_services_with_http_info(account_id, v, cancel_services_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.cancel_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.cancel_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.cancel_services"
      end
      # verify the required parameter 'cancel_services_request' is set
      if @api_client.config.client_side_validation && cancel_services_request.nil?
        fail ArgumentError, "Missing the required parameter 'cancel_services_request' when calling AdministrativeAPIApi.cancel_services"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/cancelservices'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cancel_services_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CancelServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.cancel_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#cancel_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Services: Cancel (Sub-Account)
    # Cancel (or decrease the quantity of) one or more active services provisioned on the sub-account.  **NOTE:** If you have added services to a sub-account, use this endpoint on your *main account* to cancel them. 
    # @param account_id [String] The ID of the account.  **NOTE:** Enter the ID of the *main account* rather than the sub-account to cancel services provisioned on the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_sub_account_services_request [CancelSubAccountServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CancelSubAccountServicesResponse]
    def cancel_sub_account_services(account_id, v, cancel_sub_account_services_request, opts = {})
      data, _status_code, _headers = cancel_sub_account_services_with_http_info(account_id, v, cancel_sub_account_services_request, opts)
      data
    end

    # Services: Cancel (Sub-Account)
    # Cancel (or decrease the quantity of) one or more active services provisioned on the sub-account.  **NOTE:** If you have added services to a sub-account, use this endpoint on your *main account* to cancel them. 
    # @param account_id [String] The ID of the account.  **NOTE:** Enter the ID of the *main account* rather than the sub-account to cancel services provisioned on the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param cancel_sub_account_services_request [CancelSubAccountServicesRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CancelSubAccountServicesResponse, Integer, Hash)>] CancelSubAccountServicesResponse data, response status code and response headers
    def cancel_sub_account_services_with_http_info(account_id, v, cancel_sub_account_services_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.cancel_sub_account_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.cancel_sub_account_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.cancel_sub_account_services"
      end
      # verify the required parameter 'cancel_sub_account_services_request' is set
      if @api_client.config.client_side_validation && cancel_sub_account_services_request.nil?
        fail ArgumentError, "Missing the required parameter 'cancel_sub_account_services_request' when calling AdministrativeAPIApi.cancel_sub_account_services"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/cancelsubaccountservices'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(cancel_sub_account_services_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CancelSubAccountServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.cancel_sub_account_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#cancel_sub_account_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Create (Existing Location)
    # Request that one or more available services be added to an existing location.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param existing_location_add_request [ExistingLocationAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AddRequestResponse]
    def create_existing_location_add_request(account_id, v, existing_location_add_request, opts = {})
      data, _status_code, _headers = create_existing_location_add_request_with_http_info(account_id, v, existing_location_add_request, opts)
      data
    end

    # Add Requests: Create (Existing Location)
    # Request that one or more available services be added to an existing location.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param existing_location_add_request [ExistingLocationAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddRequestResponse, Integer, Hash)>] AddRequestResponse data, response status code and response headers
    def create_existing_location_add_request_with_http_info(account_id, v, existing_location_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.create_existing_location_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.create_existing_location_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.create_existing_location_add_request"
      end
      # verify the required parameter 'existing_location_add_request' is set
      if @api_client.config.client_side_validation && existing_location_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'existing_location_add_request' when calling AdministrativeAPIApi.create_existing_location_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/existinglocationaddrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(existing_location_add_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.create_existing_location_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#create_existing_location_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Create (Existing Sub-Account)
    # Request that one or more available services be added (or increased in quantity) to an existing sub-account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param existing_sub_account_add_request [ExistingSubAccountAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [SubAccountAddRequestResponse]
    def create_existing_sub_account_add_request(account_id, v, existing_sub_account_add_request, opts = {})
      data, _status_code, _headers = create_existing_sub_account_add_request_with_http_info(account_id, v, existing_sub_account_add_request, opts)
      data
    end

    # Add Requests: Create (Existing Sub-Account)
    # Request that one or more available services be added (or increased in quantity) to an existing sub-account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param existing_sub_account_add_request [ExistingSubAccountAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubAccountAddRequestResponse, Integer, Hash)>] SubAccountAddRequestResponse data, response status code and response headers
    def create_existing_sub_account_add_request_with_http_info(account_id, v, existing_sub_account_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.create_existing_sub_account_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.create_existing_sub_account_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.create_existing_sub_account_add_request"
      end
      # verify the required parameter 'existing_sub_account_add_request' is set
      if @api_client.config.client_side_validation && existing_sub_account_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'existing_sub_account_add_request' when calling AdministrativeAPIApi.create_existing_sub_account_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/existingsubaccountaddrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(existing_sub_account_add_request)

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountAddRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.create_existing_sub_account_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#create_existing_sub_account_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Create (New Location)
    # Request that a new location be added and services added to it. The location is created only if the \"status\" field returned is \"COMPLETE\". In most cases, the \"status\" returned in the Add Request: Create response will be \"SUBMITTED\". For a list and explanation of each possible \"status\", please see the [**Add Requests: Get (Location)**](#operation/getAddRequest) section.  To receive real-time updates on the status of your Add Request, we recommend that you configure the [**Add Request Update: Webhook**](../webhooks/index.html#operation/addRequestWebhook) in the Developer Console (see the [**Configure Webhooks**](http://developer.yext.com/docs/guides/configure-webhooks/) guide for more information). Alternatively, use the [**Add Requests: Get (Location)**](#operation/getAddRequest) call to determine the current Add Request \"status\". 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param new_location_add_request [NewLocationAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [AddRequestResponse]
    def create_new_location_add_request(account_id, v, new_location_add_request, opts = {})
      data, _status_code, _headers = create_new_location_add_request_with_http_info(account_id, v, new_location_add_request, opts)
      data
    end

    # Add Requests: Create (New Location)
    # Request that a new location be added and services added to it. The location is created only if the \&quot;status\&quot; field returned is \&quot;COMPLETE\&quot;. In most cases, the \&quot;status\&quot; returned in the Add Request: Create response will be \&quot;SUBMITTED\&quot;. For a list and explanation of each possible \&quot;status\&quot;, please see the [**Add Requests: Get (Location)**](#operation/getAddRequest) section.  To receive real-time updates on the status of your Add Request, we recommend that you configure the [**Add Request Update: Webhook**](../webhooks/index.html#operation/addRequestWebhook) in the Developer Console (see the [**Configure Webhooks**](http://developer.yext.com/docs/guides/configure-webhooks/) guide for more information). Alternatively, use the [**Add Requests: Get (Location)**](#operation/getAddRequest) call to determine the current Add Request \&quot;status\&quot;. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param new_location_add_request [NewLocationAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddRequestResponse, Integer, Hash)>] AddRequestResponse data, response status code and response headers
    def create_new_location_add_request_with_http_info(account_id, v, new_location_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.create_new_location_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.create_new_location_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.create_new_location_add_request"
      end
      # verify the required parameter 'new_location_add_request' is set
      if @api_client.config.client_side_validation && new_location_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'new_location_add_request' when calling AdministrativeAPIApi.create_new_location_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/newlocationaddrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(new_location_add_request)

      # return_type
      return_type = opts[:debug_return_type] || 'AddRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.create_new_location_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#create_new_location_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Process (Sandbox API Only)
    # Request that an add request in REVIEW be processed to COMPLETE, CANCELED, or FAILED. Only applicable for location add requests.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param process_review_add_request [ProcessReviewAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def create_process_review_add_request(account_id, v, process_review_add_request, opts = {})
      data, _status_code, _headers = create_process_review_add_request_with_http_info(account_id, v, process_review_add_request, opts)
      data
    end

    # Add Requests: Process (Sandbox API Only)
    # Request that an add request in REVIEW be processed to COMPLETE, CANCELED, or FAILED. Only applicable for location add requests.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param process_review_add_request [ProcessReviewAddRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def create_process_review_add_request_with_http_info(account_id, v, process_review_add_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.create_process_review_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.create_process_review_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.create_process_review_add_request"
      end
      # verify the required parameter 'process_review_add_request' is set
      if @api_client.config.client_side_validation && process_review_add_request.nil?
        fail ArgumentError, "Missing the required parameter 'process_review_add_request' when calling AdministrativeAPIApi.create_process_review_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/processaddrequest'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(process_review_add_request)

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.create_process_review_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#create_process_review_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: Create Sub-Account
    # Request to create a new empty sub-account under this account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_sub_account_request [CreateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSubAccountResponse]
    def create_sub_account(account_id, v, create_sub_account_request, opts = {})
      data, _status_code, _headers = create_sub_account_with_http_info(account_id, v, create_sub_account_request, opts)
      data
    end

    # Accounts: Create Sub-Account
    # Request to create a new empty sub-account under this account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_sub_account_request [CreateSubAccountRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSubAccountResponse, Integer, Hash)>] CreateSubAccountResponse data, response status code and response headers
    def create_sub_account_with_http_info(account_id, v, create_sub_account_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.create_sub_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.create_sub_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.create_sub_account"
      end
      # verify the required parameter 'create_sub_account_request' is set
      if @api_client.config.client_side_validation && create_sub_account_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_sub_account_request' when calling AdministrativeAPIApi.create_sub_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/createsubaccount'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_sub_account_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSubAccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.create_sub_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#create_sub_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: Get
    # Get details for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [AccountResponse]
    def get_account(account_id, v, opts = {})
      data, _status_code, _headers = get_account_with_http_info(account_id, v, opts)
      data
    end

    # Accounts: Get
    # Get details for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AccountResponse, Integer, Hash)>] AccountResponse data, response status code and response headers
    def get_account_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.get_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.get_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.get_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.get_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#get_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Get (Location)
    # Get status information about an add request that was previously created for a location.  Possible statuses:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the location.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * REVIEW - The request is being reviewed by Yext, most likely because this location may be a duplicate of another location already     receiving this service through Yext. Once the review is complete, *status* will be updated to either CANCELED or COMPLETE.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param add_request_id [Integer] addRequestId returned from a previous call to **Add Requests: Create (New Location)**, **Add Requests: Create (Existing Location)**, or retrieved from **Add Requests: List (Location)** 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [AddRequestResponse]
    def get_add_request(account_id, add_request_id, v, opts = {})
      data, _status_code, _headers = get_add_request_with_http_info(account_id, add_request_id, v, opts)
      data
    end

    # Add Requests: Get (Location)
    # Get status information about an add request that was previously created for a location.  Possible statuses:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the location.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * REVIEW - The request is being reviewed by Yext, most likely because this location may be a duplicate of another location already     receiving this service through Yext. Once the review is complete, *status* will be updated to either CANCELED or COMPLETE.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param add_request_id [Integer] addRequestId returned from a previous call to **Add Requests: Create (New Location)**, **Add Requests: Create (Existing Location)**, or retrieved from **Add Requests: List (Location)** 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddRequestResponse, Integer, Hash)>] AddRequestResponse data, response status code and response headers
    def get_add_request_with_http_info(account_id, add_request_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.get_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.get_add_request"
      end
      # verify the required parameter 'add_request_id' is set
      if @api_client.config.client_side_validation && add_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'add_request_id' when calling AdministrativeAPIApi.get_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.get_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/addrequests/{addRequestId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'addRequestId' + '}', CGI.escape(add_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.get_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#get_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resources Apply Request Status: Get (Account)
    # Make a request to get the status of the Resources Apply Request. 
    # @param request_id [Integer] requestId returned from a previous call to **Resources Apply Requests: Create (Account)** 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ResourcesApplyRequestResponse1]
    def get_resources_apply_request_status(request_id, account_id, v, opts = {})
      data, _status_code, _headers = get_resources_apply_request_status_with_http_info(request_id, account_id, v, opts)
      data
    end

    # Resources Apply Request Status: Get (Account)
    # Make a request to get the status of the Resources Apply Request. 
    # @param request_id [Integer] requestId returned from a previous call to **Resources Apply Requests: Create (Account)** 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesApplyRequestResponse1, Integer, Hash)>] ResourcesApplyRequestResponse1 data, response status code and response headers
    def get_resources_apply_request_status_with_http_info(request_id, account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.get_resources_apply_request_status ...'
      end
      # verify the required parameter 'request_id' is set
      if @api_client.config.client_side_validation && request_id.nil?
        fail ArgumentError, "Missing the required parameter 'request_id' when calling AdministrativeAPIApi.get_resources_apply_request_status"
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.get_resources_apply_request_status"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.get_resources_apply_request_status"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/resourcesapplyrequests/{requestId}'.sub('{' + 'requestId' + '}', CGI.escape(request_id.to_s)).sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ResourcesApplyRequestResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.get_resources_apply_request_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#get_resources_apply_request_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: Get (Sub-Account)
    # Get status information about an add request that was previously created for a sub-account.  Possible statuses:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the sub-account.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param add_request_id [Integer] addRequestId returned from a previous call to **Add Requests: Create (Existing Sub-Account)** or retrieved from **Add Requests: List (Sub-Account)** 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [SubAccountAddRequestResponse]
    def get_sub_account_add_request(account_id, add_request_id, v, opts = {})
      data, _status_code, _headers = get_sub_account_add_request_with_http_info(account_id, add_request_id, v, opts)
      data
    end

    # Add Requests: Get (Sub-Account)
    # Get status information about an add request that was previously created for a sub-account.  Possible statuses:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the sub-account.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param add_request_id [Integer] addRequestId returned from a previous call to **Add Requests: Create (Existing Sub-Account)** or retrieved from **Add Requests: List (Sub-Account)** 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubAccountAddRequestResponse, Integer, Hash)>] SubAccountAddRequestResponse data, response status code and response headers
    def get_sub_account_add_request_with_http_info(account_id, add_request_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.get_sub_account_add_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.get_sub_account_add_request"
      end
      # verify the required parameter 'add_request_id' is set
      if @api_client.config.client_side_validation && add_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'add_request_id' when calling AdministrativeAPIApi.get_sub_account_add_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.get_sub_account_add_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/subaccountaddrequests/{addRequestId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'addRequestId' + '}', CGI.escape(add_request_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountAddRequestResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.get_sub_account_add_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#get_sub_account_add_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: List
    # List all accounts that you have access to. Unless you are in Partner Portal mode, this will only be your own account.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Returns only accounts whose name contains the provided string
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [AccountsResponse]
    def list_accounts(v, opts = {})
      data, _status_code, _headers = list_accounts_with_http_info(v, opts)
      data
    end

    # Accounts: List
    # List all accounts that you have access to. Unless you are in Partner Portal mode, this will only be your own account.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :name Returns only accounts whose name contains the provided string
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(AccountsResponse, Integer, Hash)>] AccountsResponse data, response status code and response headers
    def list_accounts_with_http_info(v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_accounts ...'
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_accounts"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdministrativeAPIApi.list_accounts, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AccountsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_accounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_accounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: List (Location)
    # Get all of the add requests in the account that were created for locations. The response includes both New Location Add Requests and Existing Location Add Requests.  Possible `status` values for each add request:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the location.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * REVIEW - The request is being reviewed by Yext, most likely because this location may be a duplicate of another location already     receiving this service through Yext. Once the review is complete, *status* will be updated to either CANCELED or COMPLETE.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the list to add requests in a specific status.
    # @option opts [Date] :submitted_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :submitted_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [String] :sku 
    # @option opts [Integer] :agreement_id 
    # @option opts [String] :location_id 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [AddRequestsResponse]
    def list_add_requests(account_id, v, opts = {})
      data, _status_code, _headers = list_add_requests_with_http_info(account_id, v, opts)
      data
    end

    # Add Requests: List (Location)
    # Get all of the add requests in the account that were created for locations. The response includes both New Location Add Requests and Existing Location Add Requests.  Possible &#x60;status&#x60; values for each add request:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the location.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * REVIEW - The request is being reviewed by Yext, most likely because this location may be a duplicate of another location already     receiving this service through Yext. Once the review is complete, *status* will be updated to either CANCELED or COMPLETE.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the list to add requests in a specific status.
    # @option opts [Date] :submitted_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :submitted_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [String] :sku 
    # @option opts [Integer] :agreement_id 
    # @option opts [String] :location_id 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(AddRequestsResponse, Integer, Hash)>] AddRequestsResponse data, response status code and response headers
    def list_add_requests_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_add_requests ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.list_add_requests"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_add_requests"
      end
      allowable_values = ["SUBMITTED", "PROCESSING", "COMPLETE", "CANCELED", "REVIEW", "FAILED"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdministrativeAPIApi.list_add_requests, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/addrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'submittedAfter'] = opts[:'submitted_after'] if !opts[:'submitted_after'].nil?
      query_params[:'submittedBefore'] = opts[:'submitted_before'] if !opts[:'submitted_before'].nil?
      query_params[:'updatedAfter'] = opts[:'updated_after'] if !opts[:'updated_after'].nil?
      query_params[:'updatedBefore'] = opts[:'updated_before'] if !opts[:'updated_before'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'agreementId'] = opts[:'agreement_id'] if !opts[:'agreement_id'].nil?
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_add_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_add_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Available Services: List
    # Return list of services available to you under your agreements
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [AvailableServiceResponse]
    def list_available_services(account_id, v, opts = {})
      data, _status_code, _headers = list_available_services_with_http_info(account_id, v, opts)
      data
    end

    # Available Services: List
    # Return list of services available to you under your agreements
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AvailableServiceResponse, Integer, Hash)>] AvailableServiceResponse data, response status code and response headers
    def list_available_services_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_available_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.list_available_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_available_services"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/availableservices'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AvailableServiceResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_available_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_available_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Services: List (Location)
    # Retrieve a list of all services provisioned on a location.  **NOTE:** If you have added location services under sub-accounts, they will be returned from this endpoint on your *main account*. 
    # @param account_id [String] The ID of the account.  **NOTE:** To retrieve information about services provisioned on a location under a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku 
    # @option opts [String] :location_id 
    # @option opts [String] :location_account_id *(Portal Mode only)* Filters on the account that the location receiving service is in. 
    # @option opts [String] :status Status of the service. By default, returns only Active services, not All services.
    # @option opts [Integer] :agreement_id 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [ServicesResponse]
    def list_services(account_id, v, opts = {})
      data, _status_code, _headers = list_services_with_http_info(account_id, v, opts)
      data
    end

    # Services: List (Location)
    # Retrieve a list of all services provisioned on a location.  **NOTE:** If you have added location services under sub-accounts, they will be returned from this endpoint on your *main account*. 
    # @param account_id [String] The ID of the account.  **NOTE:** To retrieve information about services provisioned on a location under a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku 
    # @option opts [String] :location_id 
    # @option opts [String] :location_account_id *(Portal Mode only)* Filters on the account that the location receiving service is in. 
    # @option opts [String] :status Status of the service. By default, returns only Active services, not All services.
    # @option opts [Integer] :agreement_id 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(ServicesResponse, Integer, Hash)>] ServicesResponse data, response status code and response headers
    def list_services_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.list_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_services"
      end
      allowable_values = ["ACTIVE", "STOPPED", "ALL"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdministrativeAPIApi.list_services, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/services'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?
      query_params[:'locationAccountId'] = opts[:'location_account_id'] if !opts[:'location_account_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'agreementId'] = opts[:'agreement_id'] if !opts[:'agreement_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add Requests: List (Sub-Account)
    # Get all of the add requests in the account that were created for sub-accounts.  Possible `status` values for each add request:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the sub-account.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the list to add requests in a specific status.
    # @option opts [Date] :submitted_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :submitted_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [String] :sku 
    # @option opts [Integer] :agreement_id 
    # @option opts [String] :sub_account_id 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [SubAccountAddRequestsResponse]
    def list_sub_account_add_requests(account_id, v, opts = {})
      data, _status_code, _headers = list_sub_account_add_requests_with_http_info(account_id, v, opts)
      data
    end

    # Add Requests: List (Sub-Account)
    # Get all of the add requests in the account that were created for sub-accounts.  Possible &#x60;status&#x60; values for each add request:   * SUBMITTED - The request has been submitted for processing. Updated status should be available soon, usually within seconds.   * PROCESSING - The request is currently being processed. Updated status should be available soon, usually within seconds.   * COMPLETE - The request was successfully processed and service was added. You can verify this by retrieving services for the sub-account.   * CANCELED - The request was purposefully canceled by Yext and was not processed. Details are available in the *results* field.   * FAILED - Processing the request failed due to a technical issue. Details may be available in the *statusDetail* field. No changes were made to your account, so you can     try the request again. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filters the list to add requests in a specific status.
    # @option opts [Date] :submitted_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :submitted_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_after (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [Date] :updated_before (&#x60;YYYY-MM-DDThh:mm:ss&#x60; format)
    # @option opts [String] :sku 
    # @option opts [Integer] :agreement_id 
    # @option opts [String] :sub_account_id 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(SubAccountAddRequestsResponse, Integer, Hash)>] SubAccountAddRequestsResponse data, response status code and response headers
    def list_sub_account_add_requests_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_sub_account_add_requests ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.list_sub_account_add_requests"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_sub_account_add_requests"
      end
      allowable_values = ["SUBMITTED", "PROCESSING", "COMPLETE", "CANCELED", "FAILED"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdministrativeAPIApi.list_sub_account_add_requests, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/subaccountaddrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'submittedAfter'] = opts[:'submitted_after'] if !opts[:'submitted_after'].nil?
      query_params[:'submittedBefore'] = opts[:'submitted_before'] if !opts[:'submitted_before'].nil?
      query_params[:'updatedAfter'] = opts[:'updated_after'] if !opts[:'updated_after'].nil?
      query_params[:'updatedBefore'] = opts[:'updated_before'] if !opts[:'updated_before'].nil?
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'agreementId'] = opts[:'agreement_id'] if !opts[:'agreement_id'].nil?
      query_params[:'subAccountId'] = opts[:'sub_account_id'] if !opts[:'sub_account_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountAddRequestsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_sub_account_add_requests",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_sub_account_add_requests\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Services: List (Sub-Account)
    # Retrieve a list of all services provisioned on a sub-account.  **NOTE:** If you have added services to sub-accounts, they will be returned from this endpoint on your *main account*. 
    # @param account_id [String] The ID of the account.  **NOTE:** To retrieve information about services provisioned on a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku 
    # @option opts [String] :sub_account_id 
    # @option opts [String] :status Status of the service. By default, returns only Active services, not All services.
    # @option opts [Integer] :agreement_id 
    # @option opts [Integer] :limit  (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [SubAccountServicesResponse]
    def list_sub_account_services(account_id, v, opts = {})
      data, _status_code, _headers = list_sub_account_services_with_http_info(account_id, v, opts)
      data
    end

    # Services: List (Sub-Account)
    # Retrieve a list of all services provisioned on a sub-account.  **NOTE:** If you have added services to sub-accounts, they will be returned from this endpoint on your *main account*. 
    # @param account_id [String] The ID of the account.  **NOTE:** To retrieve information about services provisioned on a sub-account, enter the ID of the *main account* rather than the sub-account. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :sku 
    # @option opts [String] :sub_account_id 
    # @option opts [String] :status Status of the service. By default, returns only Active services, not All services.
    # @option opts [Integer] :agreement_id 
    # @option opts [Integer] :limit 
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @return [Array<(SubAccountServicesResponse, Integer, Hash)>] SubAccountServicesResponse data, response status code and response headers
    def list_sub_account_services_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.list_sub_account_services ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.list_sub_account_services"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.list_sub_account_services"
      end
      allowable_values = ["ACTIVE", "STOPPED", "ALL"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 1000
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling AdministrativeAPIApi.list_sub_account_services, must be smaller than or equal to 1000.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/subaccountservices'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'sku'] = opts[:'sku'] if !opts[:'sku'].nil?
      query_params[:'subAccountId'] = opts[:'sub_account_id'] if !opts[:'sub_account_id'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'agreementId'] = opts[:'agreement_id'] if !opts[:'agreement_id'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SubAccountServicesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.list_sub_account_services",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#list_sub_account_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Resources Apply Request: Create (Account)
    # Create a request to asynchronously apply resources using the URL of a GitHub repository. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param resources_apply_request [ResourcesApplyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ResourcesApplyRequestResponse1]
    def resources_apply_request(account_id, v, resources_apply_request, opts = {})
      data, _status_code, _headers = resources_apply_request_with_http_info(account_id, v, resources_apply_request, opts)
      data
    end

    # Resources Apply Request: Create (Account)
    # Create a request to asynchronously apply resources using the URL of a GitHub repository. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param resources_apply_request [ResourcesApplyRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ResourcesApplyRequestResponse1, Integer, Hash)>] ResourcesApplyRequestResponse1 data, response status code and response headers
    def resources_apply_request_with_http_info(account_id, v, resources_apply_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.resources_apply_request ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.resources_apply_request"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.resources_apply_request"
      end
      # verify the required parameter 'resources_apply_request' is set
      if @api_client.config.client_side_validation && resources_apply_request.nil?
        fail ArgumentError, "Missing the required parameter 'resources_apply_request' when calling AdministrativeAPIApi.resources_apply_request"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/resourcesapplyrequests'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(resources_apply_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ResourcesApplyRequestResponse1'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.resources_apply_request",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#resources_apply_request\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Accounts: Update
    # Update an account's name or ID
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAccount] :update_account 
    # @return [IdResponse]
    def update_account(account_id, v, opts = {})
      data, _status_code, _headers = update_account_with_http_info(account_id, v, opts)
      data
    end

    # Accounts: Update
    # Update an account&#39;s name or ID
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateAccount] :update_account 
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def update_account_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AdministrativeAPIApi.update_account ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AdministrativeAPIApi.update_account"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AdministrativeAPIApi.update_account"
      end
      # resource path
      local_var_path = '/accounts/{accountId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_account'])

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AdministrativeAPIApi.update_account",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AdministrativeAPIApi#update_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
