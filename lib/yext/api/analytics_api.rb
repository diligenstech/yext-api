=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'cgi'

module Yext
  class AnalyticsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Activity Log
    # Fetches account activity information.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityLogRequest] :activity_log_request 
    # @return [ActivitiesResponse]
    def activity_log(account_id, v, opts = {})
      data, _status_code, _headers = activity_log_with_http_info(account_id, v, opts)
      data
    end

    # Activity Log
    # Fetches account activity information.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [ActivityLogRequest] :activity_log_request 
    # @return [Array<(ActivitiesResponse, Integer, Hash)>] ActivitiesResponse data, response status code and response headers
    def activity_log_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.activity_log ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AnalyticsApi.activity_log"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AnalyticsApi.activity_log"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/analytics/activity'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'activity_log_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'ActivitiesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.activity_log",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#activity_log\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reports
    # Create a report to retrieve analytics for each of your products using synchronous or asynchronous requests depending on the size of your data.  For more information available in the Reports API, check our documentation below: * [Metrics in Analytics](https://help.yext.com/hc/en-us/articles/360000001103-Metrics-in-Analytics) * [Dimensions in Analytics](https://help.yext.com/hc/en-us/articles/5901921968027-Dimensions-in-Analytics) 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async Defaults to false.  When true, the report’s ID will be returned immediately and the report results can be fetched later.  When false, the report results will be returned immediately, but an error may occur if the data requested is too large.
    # @option opts [String] :callback Optional.  When async&#x3D;true and callback is specified, the provided URL will be called when the report is ready. The URL must be of the form:      POST https://[your domain]/[your path]  It must accept the following parameters:      id:         (string)  - The ID of the report request which completed.      status:     (string)  - One of [DONE, FAILED] indicating the result of the request.      statusCode: (int)     - An HTTP status code indicating the result of the request.      message:    (string)  - When status&#x3D;FAILED, contains an error message.      url:        (string)  - When status&#x3D;DONE, contains the URL to download the report data as a text file. 
    # @option opts [CreateReportRequestBody] :create_report_request_body JSON object containing any filters to be applied to the report
    # @return [CreateReportsResponse]
    def create_reports(account_id, v, opts = {})
      data, _status_code, _headers = create_reports_with_http_info(account_id, v, opts)
      data
    end

    # Reports
    # Create a report to retrieve analytics for each of your products using synchronous or asynchronous requests depending on the size of your data.  For more information available in the Reports API, check our documentation below: * [Metrics in Analytics](https://help.yext.com/hc/en-us/articles/360000001103-Metrics-in-Analytics) * [Dimensions in Analytics](https://help.yext.com/hc/en-us/articles/5901921968027-Dimensions-in-Analytics) 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :async Defaults to false.  When true, the report’s ID will be returned immediately and the report results can be fetched later.  When false, the report results will be returned immediately, but an error may occur if the data requested is too large.
    # @option opts [String] :callback Optional.  When async&#x3D;true and callback is specified, the provided URL will be called when the report is ready. The URL must be of the form:      POST https://[your domain]/[your path]  It must accept the following parameters:      id:         (string)  - The ID of the report request which completed.      status:     (string)  - One of [DONE, FAILED] indicating the result of the request.      statusCode: (int)     - An HTTP status code indicating the result of the request.      message:    (string)  - When status&#x3D;FAILED, contains an error message.      url:        (string)  - When status&#x3D;DONE, contains the URL to download the report data as a text file. 
    # @option opts [CreateReportRequestBody] :create_report_request_body JSON object containing any filters to be applied to the report
    # @return [Array<(CreateReportsResponse, Integer, Hash)>] CreateReportsResponse data, response status code and response headers
    def create_reports_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.create_reports ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AnalyticsApi.create_reports"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AnalyticsApi.create_reports"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/analytics/reports'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'async'] = opts[:'async'] if !opts[:'async'].nil?
      query_params[:'callback'] = opts[:'callback'] if !opts[:'callback'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_report_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateReportsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.create_reports",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#create_reports\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Catalog
    # List of all metrics for which reporting data is available, along with their completed dates.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [CatalogResponse]
    def get_catalog(account_id, v, opts = {})
      data, _status_code, _headers = get_catalog_with_http_info(account_id, v, opts)
      data
    end

    # Catalog
    # List of all metrics for which reporting data is available, along with their completed dates.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CatalogResponse, Integer, Hash)>] CatalogResponse data, response status code and response headers
    def get_catalog_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_catalog ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AnalyticsApi.get_catalog"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AnalyticsApi.get_catalog"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/analytics/catalog'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CatalogResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_catalog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_catalog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Max Dates
    # Fetch the completed date for Listings and Bing metrics. Fetching the completed date for individual metrics can be done using the catalog endpoint.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [MaximumDatesResponse]
    def get_max_dates(account_id, v, opts = {})
      data, _status_code, _headers = get_max_dates_with_http_info(account_id, v, opts)
      data
    end

    # Max Dates
    # Fetch the completed date for Listings and Bing metrics. Fetching the completed date for individual metrics can be done using the catalog endpoint.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(MaximumDatesResponse, Integer, Hash)>] MaximumDatesResponse data, response status code and response headers
    def get_max_dates_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.get_max_dates ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AnalyticsApi.get_max_dates"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AnalyticsApi.get_max_dates"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/analytics/maxdates'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'MaximumDatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.get_max_dates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#get_max_dates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Report Status
    # Checks the status of a Report created with async=true.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param report_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [ReportStatusResponse]
    def report_status(account_id, v, report_id, opts = {})
      data, _status_code, _headers = report_status_with_http_info(account_id, v, report_id, opts)
      data
    end

    # Report Status
    # Checks the status of a Report created with async&#x3D;true.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param report_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReportStatusResponse, Integer, Hash)>] ReportStatusResponse data, response status code and response headers
    def report_status_with_http_info(account_id, v, report_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AnalyticsApi.report_status ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling AnalyticsApi.report_status"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling AnalyticsApi.report_status"
      end
      # verify the required parameter 'report_id' is set
      if @api_client.config.client_side_validation && report_id.nil?
        fail ArgumentError, "Missing the required parameter 'report_id' when calling AnalyticsApi.report_status"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/analytics/standardreports/{reportId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reportId' + '}', CGI.escape(report_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReportStatusResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"AnalyticsApi.report_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AnalyticsApi#report_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
