=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'cgi'

module Yext
  class ListingsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Verification: Complete
    # Provides verification codes to complete the verification for entities in an account. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param verification_completion [Array<VerificationCompletion>] 
    # @param [Hash] opts the optional parameters
    # @return [CompleteVerificationResponse]
    def complete_verification(account_id, v, publisher_id, verification_completion, opts = {})
      data, _status_code, _headers = complete_verification_with_http_info(account_id, v, publisher_id, verification_completion, opts)
      data
    end

    # Verification: Complete
    # Provides verification codes to complete the verification for entities in an account. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param verification_completion [Array<VerificationCompletion>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CompleteVerificationResponse, Integer, Hash)>] CompleteVerificationResponse data, response status code and response headers
    def complete_verification_with_http_info(account_id, v, publisher_id, verification_completion, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.complete_verification ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.complete_verification"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.complete_verification"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.complete_verification"
      end
      # verify the required parameter 'verification_completion' is set
      if @api_client.config.client_side_validation && verification_completion.nil?
        fail ArgumentError, "Missing the required parameter 'verification_completion' when calling ListingsApi.complete_verification"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/verifications/{publisherId}/complete'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification_completion)

      # return_type
      return_type = opts[:debug_return_type] || 'CompleteVerificationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.complete_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#complete_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Answer: Create
    # Creates a new Answer on a Question.
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerRequest] :answer_request 
    # @return [CreateAnswerResponse]
    def create_answer(account_id, question_id, v, opts = {})
      data, _status_code, _headers = create_answer_with_http_info(account_id, question_id, v, opts)
      data
    end

    # Answer: Create
    # Creates a new Answer on a Question.
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerRequest] :answer_request 
    # @return [Array<(CreateAnswerResponse, Integer, Hash)>] CreateAnswerResponse data, response status code and response headers
    def create_answer_with_http_info(account_id, question_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.create_answer ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.create_answer"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ListingsApi.create_answer"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.create_answer"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/questions/{questionId}/answers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'questionId' + '}', CGI.escape(question_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'answer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAnswerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.create_answer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#create_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: Create
    # Creates a new Duplicate with **`status`** `SUPPRESSION_REQUESTED`.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **`Yext-User-Id`** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param url [String] URL of the Duplicate listing
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location_id An account location ID with a Listings subscription.
    # @return [IdResponse]
    def create_duplicate(account_id, v, publisher_id, url, opts = {})
      data, _status_code, _headers = create_duplicate_with_http_info(account_id, v, publisher_id, url, opts)
      data
    end

    # Duplicates: Create
    # Creates a new Duplicate with **&#x60;status&#x60;** &#x60;SUPPRESSION_REQUESTED&#x60;.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param url [String] URL of the Duplicate listing
    # @param [Hash] opts the optional parameters
    # @option opts [String] :location_id An account location ID with a Listings subscription.
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def create_duplicate_with_http_info(account_id, v, publisher_id, url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.create_duplicate ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.create_duplicate"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.create_duplicate"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.create_duplicate"
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling ListingsApi.create_duplicate"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/duplicates'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'publisherId'] = publisher_id
      query_params[:'url'] = url
      query_params[:'locationId'] = opts[:'location_id'] if !opts[:'location_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.create_duplicate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#create_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Answer: Delete
    # Deletes an Answer for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param answer_id [Integer] ID of this Answer.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_answer(account_id, question_id, answer_id, v, opts = {})
      data, _status_code, _headers = delete_answer_with_http_info(account_id, question_id, answer_id, v, opts)
      data
    end

    # Answer: Delete
    # Deletes an Answer for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param answer_id [Integer] ID of this Answer.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_answer_with_http_info(account_id, question_id, answer_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.delete_answer ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.delete_answer"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ListingsApi.delete_answer"
      end
      # verify the required parameter 'answer_id' is set
      if @api_client.config.client_side_validation && answer_id.nil?
        fail ArgumentError, "Missing the required parameter 'answer_id' when calling ListingsApi.delete_answer"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.delete_answer"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/questions/{questionId}/answers/{answerId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'questionId' + '}', CGI.escape(question_id.to_s)).sub('{' + 'answerId' + '}', CGI.escape(answer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.delete_answer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#delete_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: Delete
    # Indicates that a Duplicate should be ignored.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **`Yext-User-Id`** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_duplicate(account_id, v, duplicate_id, opts = {})
      data, _status_code, _headers = delete_duplicate_with_http_info(account_id, v, duplicate_id, opts)
      data
    end

    # Duplicates: Delete
    # Indicates that a Duplicate should be ignored.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_duplicate_with_http_info(account_id, v, duplicate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.delete_duplicate ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.delete_duplicate"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.delete_duplicate"
      end
      # verify the required parameter 'duplicate_id' is set
      if @api_client.config.client_side_validation && duplicate_id.nil?
        fail ArgumentError, "Missing the required parameter 'duplicate_id' when calling ListingsApi.delete_duplicate"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/duplicates/{duplicateId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'duplicateId' + '}', CGI.escape(duplicate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.delete_duplicate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#delete_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Entity Listings: Delete
    # Deletes event listings from publishers. If deletion is not supported by the publisher, then service is removed instead.  **NOTE:** You can delete a maximum of 100 listings in a single request. If the number of Entity IDs multiplied by the number of Publisher IDs in your request exceeds 100, you will receive a 400 error response.  **Support for `all` macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the `all` macro in place of your account ID in your request URLs. For more information, see the \"Account ID\" section of \"Policies and Conventions\" at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
    # @return [EmptyResponse]
    def delete_listings(account_id, v, opts = {})
      data, _status_code, _headers = delete_listings_with_http_info(account_id, v, opts)
      data
    end

    # Entity Listings: Delete
    # Deletes event listings from publishers. If deletion is not supported by the publisher, then service is removed instead.  **NOTE:** You can delete a maximum of 100 listings in a single request. If the number of Entity IDs multiplied by the number of Publisher IDs in your request exceeds 100, you will receive a 400 error response.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.delete_listings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.delete_listings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.delete_listings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/delete'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = @api_client.build_collection_param(opts[:'entity_ids'], :csv) if !opts[:'entity_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.delete_listings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#delete_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: Get
    # Fetches details of a specific Publisher Suggestion
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [PublisherSuggestionResponse]
    def get_publisher_suggestion(account_id, v, suggestion_id, opts = {})
      data, _status_code, _headers = get_publisher_suggestion_with_http_info(account_id, v, suggestion_id, opts)
      data
    end

    # Publisher Suggestions: Get
    # Fetches details of a specific Publisher Suggestion
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PublisherSuggestionResponse, Integer, Hash)>] PublisherSuggestionResponse data, response status code and response headers
    def get_publisher_suggestion_with_http_info(account_id, v, suggestion_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_publisher_suggestion ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.get_publisher_suggestion"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.get_publisher_suggestion"
      end
      # verify the required parameter 'suggestion_id' is set
      if @api_client.config.client_side_validation && suggestion_id.nil?
        fail ArgumentError, "Missing the required parameter 'suggestion_id' when calling ListingsApi.get_publisher_suggestion"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/publishersuggestions/{suggestionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'suggestionId' + '}', CGI.escape(suggestion_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublisherSuggestionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.get_publisher_suggestion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_publisher_suggestion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Question: Get
    # Retrieve information for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [QuestionResponse]
    def get_question(account_id, question_id, v, opts = {})
      data, _status_code, _headers = get_question_with_http_info(account_id, question_id, v, opts)
      data
    end

    # Question: Get
    # Retrieve information for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuestionResponse, Integer, Hash)>] QuestionResponse data, response status code and response headers
    def get_question_with_http_info(account_id, question_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.get_question ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.get_question"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ListingsApi.get_question"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.get_question"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/questions/{questionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'questionId' + '}', CGI.escape(question_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuestionResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.get_question",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#get_question\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verification: Initiate
    # Initiate verification for entities in an account. This request will trigger verification codes being sent to the specified addresses, phone numbers, or email addresses. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param locale [String] Locale code.
    # @param verification_initiation [Array<VerificationInitiation>] 
    # @param [Hash] opts the optional parameters
    # @return [InitiateVerificationResponse]
    def initiate_verification(account_id, v, publisher_id, locale, verification_initiation, opts = {})
      data, _status_code, _headers = initiate_verification_with_http_info(account_id, v, publisher_id, locale, verification_initiation, opts)
      data
    end

    # Verification: Initiate
    # Initiate verification for entities in an account. This request will trigger verification codes being sent to the specified addresses, phone numbers, or email addresses. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param locale [String] Locale code.
    # @param verification_initiation [Array<VerificationInitiation>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InitiateVerificationResponse, Integer, Hash)>] InitiateVerificationResponse data, response status code and response headers
    def initiate_verification_with_http_info(account_id, v, publisher_id, locale, verification_initiation, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.initiate_verification ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.initiate_verification"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.initiate_verification"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.initiate_verification"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling ListingsApi.initiate_verification"
      end
      # verify the required parameter 'verification_initiation' is set
      if @api_client.config.client_side_validation && verification_initiation.nil?
        fail ArgumentError, "Missing the required parameter 'verification_initiation' when calling ListingsApi.initiate_verification"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/verifications/{publisherId}/{locale}/initiate'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verification_initiation)

      # return_type
      return_type = opts[:debug_return_type] || 'InitiateVerificationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.initiate_verification",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#initiate_verification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listing Admin: Invite
    # Sends invitations to new listing admins for entities in an account. For Google Business Profile listings, the admins will be given owner-level access. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param admin_invite [Array<AdminInvite>] 
    # @param [Hash] opts the optional parameters
    # @return [InviteAdminsResponse]
    def invite_admins(account_id, v, publisher_id, admin_invite, opts = {})
      data, _status_code, _headers = invite_admins_with_http_info(account_id, v, publisher_id, admin_invite, opts)
      data
    end

    # Listing Admin: Invite
    # Sends invitations to new listing admins for entities in an account. For Google Business Profile listings, the admins will be given owner-level access. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param admin_invite [Array<AdminInvite>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InviteAdminsResponse, Integer, Hash)>] InviteAdminsResponse data, response status code and response headers
    def invite_admins_with_http_info(account_id, v, publisher_id, admin_invite, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.invite_admins ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.invite_admins"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.invite_admins"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.invite_admins"
      end
      # verify the required parameter 'admin_invite' is set
      if @api_client.config.client_side_validation && admin_invite.nil?
        fail ArgumentError, "Missing the required parameter 'admin_invite' when calling ListingsApi.invite_admins"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/admins/{publisherId}/invite'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(admin_invite)

      # return_type
      return_type = opts[:debug_return_type] || 'InviteAdminsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.invite_admins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#invite_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listing Admins: List
    # Retrieve listing admins for entities in an account. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [ListAdminsResponse]
    def list_admins(account_id, v, publisher_id, opts = {})
      data, _status_code, _headers = list_admins_with_http_info(account_id, v, publisher_id, opts)
      data
    end

    # Listing Admins: List
    # Retrieve listing admins for entities in an account. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [Array<(ListAdminsResponse, Integer, Hash)>] ListAdminsResponse data, response status code and response headers
    def list_admins_with_http_info(account_id, v, publisher_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_admins ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_admins"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_admins"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.list_admins"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/admins/{publisherId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = opts[:'entity_ids'] if !opts[:'entity_ids'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListAdminsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_admins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: List
    # Retrieve Duplicates for an account  If the **`v`** parameter is `20180802` or later: only duplicates of live listings (**`status`**: `LIVE`) will be included 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Duplicates with the provided statuses will be returned  **Example:** POSSIBLE_DUPLICATE,SUPPRESSION_REQUESTED 
    # @return [DuplicatesResponse]
    def list_duplicates(account_id, v, opts = {})
      data, _status_code, _headers = list_duplicates_with_http_info(account_id, v, opts)
      data
    end

    # Duplicates: List
    # Retrieve Duplicates for an account  If the **&#x60;v&#x60;** parameter is &#x60;20180802&#x60; or later: only duplicates of live listings (**&#x60;status&#x60;**: &#x60;LIVE&#x60;) will be included 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Duplicates with the provided statuses will be returned  **Example:** POSSIBLE_DUPLICATE,SUPPRESSION_REQUESTED 
    # @return [Array<(DuplicatesResponse, Integer, Hash)>] DuplicatesResponse data, response status code and response headers
    def list_duplicates_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_duplicates ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_duplicates"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_duplicates"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ListingsApi.list_duplicates, must be smaller than or equal to 50.'
      end

      allowable_values = ["POSSIBLE_DUPLICATE", "SUPPRESSION_REQUESTED", "SUPPRESSED", "UNAVAILABLE"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/duplicates'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :csv) if !opts[:'statuses'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'DuplicatesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_duplicates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_duplicates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Entity Listings: List
    # Retrieve all Entity Listings matching the given criteria. Includes the status of each Listing and reasons why a Listing may not be live. This endpoint currently only supports Event Listings.  The results will first be sorted by publisher and then by Entity.  **Support for `all` macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the `all` macro in place of your account ID in your request URLs. For more information, see the \"Account ID\" section of \"Policies and Conventions\" at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
    # @option opts [Array<String>] :statuses Defaults to all Listings whose **&#x60;status&#x60;** is not &#x60;DELETED&#x60; or &#x60;SYNC_STOPPED&#x60;.  When specified, only Listings with the provided statuses will be returned. 
    # @option opts [String] :language One of the following language codes: - &#x60;cs&#x60; - Czech - &#x60;da&#x60; - Danish - &#x60;nl&#x60; - Dutch - &#x60;en&#x60; - English - &#x60;en_GB&#x60; - English (UK) - &#x60;fi&#x60; - Finnish - &#x60;fr&#x60; - French (France) - &#x60;de&#x60; - German (Germany) - &#x60;hu&#x60; - Hungarian - &#x60;it&#x60; - Italian - &#x60;ja&#x60; - Japanese - &#x60;no&#x60; - Norwegian - &#x60;pt&#x60; - Portuguese (Portugal) - &#x60;sk&#x60; - Slovak - &#x60;es&#x60; - Spanish (Spain) - &#x60;sv&#x60; - Swedish - &#x60;tr&#x60; - Turkish - &#x60;zh_Hans&#x60; - Chinese (Simplified) - &#x60;zh_Hant&#x60; - Chinese (Traditional)  (default to 'en')
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [EntityListingsResponse]
    def list_entity_listings(account_id, v, opts = {})
      data, _status_code, _headers = list_entity_listings_with_http_info(account_id, v, opts)
      data
    end

    # Entity Listings: List
    # Retrieve all Entity Listings matching the given criteria. Includes the status of each Listing and reasons why a Listing may not be live. This endpoint currently only supports Event Listings.  The results will first be sorted by publisher and then by Entity.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
    # @option opts [Array<String>] :statuses Defaults to all Listings whose **&#x60;status&#x60;** is not &#x60;DELETED&#x60; or &#x60;SYNC_STOPPED&#x60;.  When specified, only Listings with the provided statuses will be returned. 
    # @option opts [String] :language One of the following language codes: - &#x60;cs&#x60; - Czech - &#x60;da&#x60; - Danish - &#x60;nl&#x60; - Dutch - &#x60;en&#x60; - English - &#x60;en_GB&#x60; - English (UK) - &#x60;fi&#x60; - Finnish - &#x60;fr&#x60; - French (France) - &#x60;de&#x60; - German (Germany) - &#x60;hu&#x60; - Hungarian - &#x60;it&#x60; - Italian - &#x60;ja&#x60; - Japanese - &#x60;no&#x60; - Norwegian - &#x60;pt&#x60; - Portuguese (Portugal) - &#x60;sk&#x60; - Slovak - &#x60;es&#x60; - Spanish (Spain) - &#x60;sv&#x60; - Swedish - &#x60;tr&#x60; - Turkish - &#x60;zh_Hans&#x60; - Chinese (Simplified) - &#x60;zh_Hant&#x60; - Chinese (Traditional)  (default to 'en')
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [Array<(EntityListingsResponse, Integer, Hash)>] EntityListingsResponse data, response status code and response headers
    def list_entity_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_entity_listings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_entity_listings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_entity_listings"
      end
      allowable_values = ["NOT_SYNCED", "SYNC_IN_PROGRESS", "LIVE", "UPDATE_IN_PROGRESS", "CANCELING_SYNC", "NOT_APPLICABLE", "DELETE_PENDING", "DELETE_FAILED", "DELETED", "SYNC_STOPPED"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ListingsApi.list_entity_listings, must be smaller than or equal to 100.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/listings/entitylistings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = @api_client.build_collection_param(opts[:'entity_ids'], :csv) if !opts[:'entity_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EntityListingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_entity_listings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_entity_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: List
    # Retrieve all Listings matching the given criteria including status and reasons why a Listing may be unavailable  The results will first be sorted by publisher and then by Location.  **Support for `all` macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the `all` macro in place of your account ID in your request URLs. For more information, see the \"Account ID\" section of \"Policies and Conventions\" at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;pageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Listings with the provided statuses will be returned  **Example:** &#x60;WAITING_ON_YEXT,WAITING_ON_CUSTOMER&#x60; 
    # @option opts [String] :language One of the language codes that we support: - cs - Czech - da - Danish - nl - Dutch - en - English - en_GB - English (UK) - fi - Finnish - fr - French (France) - de - German (Germany) - hu - Hungarian - it - Italian - ja - Japanese - no - Norwegian - pt - Portuguese (Portugal) - sk - Slovak - es - Spanish (Spain) - sv - Swedish - tr - Turkish - zh_Hans - Chinese (Simplified) - zh_Hant - Chinese (Traditional)  (default to 'en')
    # @return [ListingsResponse]
    def list_listings(account_id, v, opts = {})
      data, _status_code, _headers = list_listings_with_http_info(account_id, v, opts)
      data
    end

    # Listings: List
    # Retrieve all Listings matching the given criteria including status and reasons why a Listing may be unavailable  The results will first be sorted by publisher and then by Location.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;pageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Listings with the provided statuses will be returned  **Example:** &#x60;WAITING_ON_YEXT,WAITING_ON_CUSTOMER&#x60; 
    # @option opts [String] :language One of the language codes that we support: - cs - Czech - da - Danish - nl - Dutch - en - English - en_GB - English (UK) - fi - Finnish - fr - French (France) - de - German (Germany) - hu - Hungarian - it - Italian - ja - Japanese - no - Norwegian - pt - Portuguese (Portugal) - sk - Slovak - es - Spanish (Spain) - sv - Swedish - tr - Turkish - zh_Hans - Chinese (Simplified) - zh_Hant - Chinese (Traditional)  (default to 'en')
    # @return [Array<(ListingsResponse, Integer, Hash)>] ListingsResponse data, response status code and response headers
    def list_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_listings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_listings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_listings"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ListingsApi.list_listings, must be smaller than or equal to 100.'
      end

      allowable_values = ["WAITING_ON_YEXT", "WAITING_ON_CUSTOMER", "WAITING_ON_PUBLISHER", "LIVE", "UNAVAILABLE", "OPTED_OUT"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/listings'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :multi) if !opts[:'statuses'].nil?
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_listings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verification Methods: List
    # Retrieve verification methods for entities in an account 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param locale [String] Locale code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [ListMethodsResponse]
    def list_methods(account_id, v, publisher_id, locale, opts = {})
      data, _status_code, _headers = list_methods_with_http_info(account_id, v, publisher_id, locale, opts)
      data
    end

    # Verification Methods: List
    # Retrieve verification methods for entities in an account 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param locale [String] Locale code.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [Array<(ListMethodsResponse, Integer, Hash)>] ListMethodsResponse data, response status code and response headers
    def list_methods_with_http_info(account_id, v, publisher_id, locale, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_methods ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_methods"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_methods"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.list_methods"
      end
      # verify the required parameter 'locale' is set
      if @api_client.config.client_side_validation && locale.nil?
        fail ArgumentError, "Missing the required parameter 'locale' when calling ListingsApi.list_methods"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/verifications/{publisherId}/{locale}/methods'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s)).sub('{' + 'locale' + '}', CGI.escape(locale.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = opts[:'entity_ids'] if !opts[:'entity_ids'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListMethodsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: List
    # Retrieve suggestions publishers have submitted for the Locations in an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Publisher Suggestions with the provided statuses will be returned  **Example:** WAITING_ON_CUSTOMER,EXPIRED 
    # @return [PublisherSuggestionsResponse]
    def list_publisher_suggestions(account_id, v, opts = {})
      data, _status_code, _headers = list_publisher_suggestions_with_http_info(account_id, v, opts)
      data
    end

    # Publisher Suggestions: List
    # Retrieve suggestions publishers have submitted for the Locations in an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [Array<String>] :statuses When specified, only Publisher Suggestions with the provided statuses will be returned  **Example:** WAITING_ON_CUSTOMER,EXPIRED 
    # @return [Array<(PublisherSuggestionsResponse, Integer, Hash)>] PublisherSuggestionsResponse data, response status code and response headers
    def list_publisher_suggestions_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_publisher_suggestions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_publisher_suggestions"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_publisher_suggestions"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ListingsApi.list_publisher_suggestions, must be smaller than or equal to 50.'
      end

      allowable_values = ["WAITING_ON_CUSTOMER", "ACCEPTED", "REJECTED", "EXPIRED"]
      if @api_client.config.client_side_validation && opts[:'statuses'] && !opts[:'statuses'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"statuses\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/publishersuggestions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?
      query_params[:'statuses'] = @api_client.build_collection_param(opts[:'statuses'], :csv) if !opts[:'statuses'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublisherSuggestionsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_publisher_suggestions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_publisher_suggestions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publishers: List
    # Retrieve a list of publishers included in an account's subscription 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subset One of the following: - ALL - return all publishers - RELEVANT_ONLY - only return publishers based on available subscriptions and supported countries  (default to 'RELEVANT_ONLY')
    # @option opts [Array<String>] :entity_type When specified, only publishers that support the specified entity types will be returned  **Example:** &#x60;LOCATION,EVENT&#x60; 
    # @return [PublishersResponse]
    def list_publishers(account_id, v, opts = {})
      data, _status_code, _headers = list_publishers_with_http_info(account_id, v, opts)
      data
    end

    # Publishers: List
    # Retrieve a list of publishers included in an account&#39;s subscription 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :subset One of the following: - ALL - return all publishers - RELEVANT_ONLY - only return publishers based on available subscriptions and supported countries  (default to 'RELEVANT_ONLY')
    # @option opts [Array<String>] :entity_type When specified, only publishers that support the specified entity types will be returned  **Example:** &#x60;LOCATION,EVENT&#x60; 
    # @return [Array<(PublishersResponse, Integer, Hash)>] PublishersResponse data, response status code and response headers
    def list_publishers_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_publishers ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_publishers"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_publishers"
      end
      allowable_values = ["LOCATION", "HEALTHCARE_PROFESSIONAL", "HEALTHCARE_FACILITY", "RESTAURANT", "ATM", "EVENT", "HOTEL"]
      if @api_client.config.client_side_validation && opts[:'entity_type'] && !opts[:'entity_type'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"entity_type\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/publishers'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'subset'] = opts[:'subset'] if !opts[:'subset'].nil?
      query_params[:'entityType'] = @api_client.build_collection_param(opts[:'entity_type'], :multi) if !opts[:'entity_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PublishersResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_publishers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_publishers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Questions: List 
    # Retrieve a list of Questions within an account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter This parameter represents one or more filtering conditions that are applied to the set of entities that would otherwise be returned. This parameter should be provided as a URL-encoded string containing a JSON object.  For example, if the filter JSON is &#x60;{\&quot;entityId\&quot;:{\&quot;$eq\&quot;:\&quot;location123\&quot;}}&#x60;, then the filter param after URL-encoding will be: &#x60;filter&#x3D;%7B%22entityId%22%3A%7B%22%24eq%22%3A%22location123%22%7D%7D&#x60;  **Supported filters** * **&#x60;id&#x60;** * **&#x60;entityId&#x60;** * **&#x60;publisherId&#x60;** * **&#x60;authorType&#x60;** * **&#x60;language&#x60;** * **&#x60;createTime&#x60;** * **&#x60;updateTime&#x60;** * **&#x60;answerCount&#x60;** * **&#x60;ownerAnswer&#x60;**  **Basic Filter Structure**  The filter object at its core consists of a *matcher*, a *field*, and an *argument*.  For example, in the following filter JSON:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  &#x60;$eq&#x60; is the *matcher*, or filtering operation (equals, in this example),  &#x60;entityId&#x60; is the *field* being filtered by, and  &#x60;location123&#x60; is *value* to be matched against.  **Combining Multiple Filters**  Multiple filters can be combined into one object using *combinators*. For example, the following filter JSON combines multiple filters using the combinator &#x60;$and&#x60;. &#x60;$or&#x60; is also supported. &#x60;&#x60;&#x60; {   \&quot;$and\&quot;:[     {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;$in\&quot;:[           \&quot;LOCAL_GUIDE\&quot;,           \&quot;MERCHANT\&quot;         ]       }     }   ] } &#x60;&#x60;&#x60;  **Filter Negation**  Certain filter types may be negated. For example:  &#x60;&#x60;&#x60; {   \&quot;$not\&quot; {     \&quot;entityId\&quot;:{       \&quot;$eq\&quot;:\&quot;location123\&quot;     }   } } &#x60;&#x60;&#x60;  This can also be written more simply with a &#x60;!&#x60; in the &#x60;$eq&#x60; parameter. The following filter would have the same effect:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;!$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  **TEXT**  The &#x60;TEXT&#x60; filter type is supported for text fields. (e.g., **&#x60;entityId&#x60;**, **&#x60;authorType&#x60;**)  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq (equals)&lt;/th&gt;     &lt;th&gt;      {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;!$eq\&quot;:\&quot;REGULAR_USER\&quot;       }     }    Supports negation. Case insensitive.   &lt;/tr&gt; &lt;/table&gt;  **BOOLEAN**  The BOOLEAN filter type is supported for boolean fields and Yes / No fields. &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;      {       \&quot;ownerAnswer\&quot;: {         \&quot;$eq\&quot;: true       }     }    For booleans, the filter takes a boolean value, not a string.   Supports negation.   &lt;/tr&gt; &lt;/table&gt;  **INTEGER, FLOAT, DATE, DATETIME, and TIME**  These filter types are strictly ordered -- therefore, they support the following matchers: - Equals - Less Than / Less Than or Equal To - Greater Than / Greater Than or Equal To  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;    Equals      {       \&quot;answerCount\&quot;: {         \&quot;$eq\&quot;: 3       }     }    Supports negation.    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$lt&lt;/th&gt;     &lt;th&gt;    Less than      {       \&quot;updateTime\&quot;: {         \&quot;$lt\&quot;: 1579711121392       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$gt&lt;/th&gt;     &lt;th&gt;    Greater than      {       \&quot;answerCount\&quot;: {         \&quot;$gt\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$le&lt;/th&gt;     &lt;th&gt;    Less than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$le\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$ge&lt;/th&gt;     &lt;th&gt;    Greater than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$ge\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;Combinations&lt;/th&gt;     &lt;th&gt;    While we do not support \&quot;between\&quot; in our filtering syntax, it is possible to combine multiple matchers for a result similar to an \&quot;and\&quot; operation:      {       \&quot;answerCount : {         \&quot;$gt\&quot; : 1,         \&quot;$lt\&quot;: 3       }     }    &lt;/tr&gt; &lt;/table&gt; 
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @return [ListQuestionsReponse]
    def list_questions(account_id, v, opts = {})
      data, _status_code, _headers = list_questions_with_http_info(account_id, v, opts)
      data
    end

    # Questions: List 
    # Retrieve a list of Questions within an account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filter This parameter represents one or more filtering conditions that are applied to the set of entities that would otherwise be returned. This parameter should be provided as a URL-encoded string containing a JSON object.  For example, if the filter JSON is &#x60;{\&quot;entityId\&quot;:{\&quot;$eq\&quot;:\&quot;location123\&quot;}}&#x60;, then the filter param after URL-encoding will be: &#x60;filter&#x3D;%7B%22entityId%22%3A%7B%22%24eq%22%3A%22location123%22%7D%7D&#x60;  **Supported filters** * **&#x60;id&#x60;** * **&#x60;entityId&#x60;** * **&#x60;publisherId&#x60;** * **&#x60;authorType&#x60;** * **&#x60;language&#x60;** * **&#x60;createTime&#x60;** * **&#x60;updateTime&#x60;** * **&#x60;answerCount&#x60;** * **&#x60;ownerAnswer&#x60;**  **Basic Filter Structure**  The filter object at its core consists of a *matcher*, a *field*, and an *argument*.  For example, in the following filter JSON:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  &#x60;$eq&#x60; is the *matcher*, or filtering operation (equals, in this example),  &#x60;entityId&#x60; is the *field* being filtered by, and  &#x60;location123&#x60; is *value* to be matched against.  **Combining Multiple Filters**  Multiple filters can be combined into one object using *combinators*. For example, the following filter JSON combines multiple filters using the combinator &#x60;$and&#x60;. &#x60;$or&#x60; is also supported. &#x60;&#x60;&#x60; {   \&quot;$and\&quot;:[     {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;$in\&quot;:[           \&quot;LOCAL_GUIDE\&quot;,           \&quot;MERCHANT\&quot;         ]       }     }   ] } &#x60;&#x60;&#x60;  **Filter Negation**  Certain filter types may be negated. For example:  &#x60;&#x60;&#x60; {   \&quot;$not\&quot; {     \&quot;entityId\&quot;:{       \&quot;$eq\&quot;:\&quot;location123\&quot;     }   } } &#x60;&#x60;&#x60;  This can also be written more simply with a &#x60;!&#x60; in the &#x60;$eq&#x60; parameter. The following filter would have the same effect:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;!$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  **TEXT**  The &#x60;TEXT&#x60; filter type is supported for text fields. (e.g., **&#x60;entityId&#x60;**, **&#x60;authorType&#x60;**)  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq (equals)&lt;/th&gt;     &lt;th&gt;      {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;!$eq\&quot;:\&quot;REGULAR_USER\&quot;       }     }    Supports negation. Case insensitive.   &lt;/tr&gt; &lt;/table&gt;  **BOOLEAN**  The BOOLEAN filter type is supported for boolean fields and Yes / No fields. &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;      {       \&quot;ownerAnswer\&quot;: {         \&quot;$eq\&quot;: true       }     }    For booleans, the filter takes a boolean value, not a string.   Supports negation.   &lt;/tr&gt; &lt;/table&gt;  **INTEGER, FLOAT, DATE, DATETIME, and TIME**  These filter types are strictly ordered -- therefore, they support the following matchers: - Equals - Less Than / Less Than or Equal To - Greater Than / Greater Than or Equal To  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;    Equals      {       \&quot;answerCount\&quot;: {         \&quot;$eq\&quot;: 3       }     }    Supports negation.    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$lt&lt;/th&gt;     &lt;th&gt;    Less than      {       \&quot;updateTime\&quot;: {         \&quot;$lt\&quot;: 1579711121392       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$gt&lt;/th&gt;     &lt;th&gt;    Greater than      {       \&quot;answerCount\&quot;: {         \&quot;$gt\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$le&lt;/th&gt;     &lt;th&gt;    Less than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$le\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$ge&lt;/th&gt;     &lt;th&gt;    Greater than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$ge\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;Combinations&lt;/th&gt;     &lt;th&gt;    While we do not support \&quot;between\&quot; in our filtering syntax, it is possible to combine multiple matchers for a result similar to an \&quot;and\&quot; operation:      {       \&quot;answerCount : {         \&quot;$gt\&quot; : 1,         \&quot;$lt\&quot;: 3       }     }    &lt;/tr&gt; &lt;/table&gt; 
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @return [Array<(ListQuestionsReponse, Integer, Hash)>] ListQuestionsReponse data, response status code and response headers
    def list_questions_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_questions ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_questions"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_questions"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 50
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ListingsApi.list_questions, must be smaller than or equal to 50.'
      end

      # resource path
      local_var_path = '/accounts/{accountId}/questions'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'filter'] = opts[:'filter'] if !opts[:'filter'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListQuestionsReponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_questions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_questions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verification Statuses: List
    # Retrieve verification statuses for entities in an account 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [ListStatusesResponse]
    def list_statuses(account_id, v, publisher_id, opts = {})
      data, _status_code, _headers = list_statuses_with_http_info(account_id, v, publisher_id, opts)
      data
    end

    # Verification Statuses: List
    # Retrieve verification statuses for entities in an account 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param publisher_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
    # @option opts [Integer] :limit Number of results to return. (default to 100)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @return [Array<(ListStatusesResponse, Integer, Hash)>] ListStatusesResponse data, response status code and response headers
    def list_statuses_with_http_info(account_id, v, publisher_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.list_statuses ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.list_statuses"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.list_statuses"
      end
      # verify the required parameter 'publisher_id' is set
      if @api_client.config.client_side_validation && publisher_id.nil?
        fail ArgumentError, "Missing the required parameter 'publisher_id' when calling ListingsApi.list_statuses"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/verifications/{publisherId}/statuses'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'publisherId' + '}', CGI.escape(publisher_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'entityIds'] = opts[:'entity_ids'] if !opts[:'entity_ids'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ListStatusesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.list_statuses",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#list_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: Opt In
    # Opts designated locations into designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @return [EmptyResponse]
    def opt_in_listings(account_id, v, opts = {})
      data, _status_code, _headers = opt_in_listings_with_http_info(account_id, v, opts)
      data
    end

    # Listings: Opt In
    # Opts designated locations into designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def opt_in_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.opt_in_listings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.opt_in_listings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.opt_in_listings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/listings/optin'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.opt_in_listings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#opt_in_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Listings: Opt Out
    # Opts designated locations out of designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @return [EmptyResponse]
    def opt_out_listings(account_id, v, opts = {})
      data, _status_code, _headers = opt_out_listings_with_http_info(account_id, v, opts)
      data
    end

    # Listings: Opt Out
    # Opts designated locations out of designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def opt_out_listings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.opt_out_listings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.opt_out_listings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.opt_out_listings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/listings/optout'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.opt_out_listings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#opt_out_listings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Duplicates: Suppress
    # Request suppression of a Duplicate.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **`Yext-User-Id`** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def suppress_duplicate(account_id, v, duplicate_id, opts = {})
      data, _status_code, _headers = suppress_duplicate_with_http_info(account_id, v, duplicate_id, opts)
      data
    end

    # Duplicates: Suppress
    # Request suppression of a Duplicate.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param duplicate_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def suppress_duplicate_with_http_info(account_id, v, duplicate_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.suppress_duplicate ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.suppress_duplicate"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.suppress_duplicate"
      end
      # verify the required parameter 'duplicate_id' is set
      if @api_client.config.client_side_validation && duplicate_id.nil?
        fail ArgumentError, "Missing the required parameter 'duplicate_id' when calling ListingsApi.suppress_duplicate"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/duplicates/{duplicateId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'duplicateId' + '}', CGI.escape(duplicate_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.suppress_duplicate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#suppress_duplicate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Answer: Update
    # Updates an Answer for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param answer_id [Integer] ID of this Answer.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerRequest] :answer_request 
    # @return [UpdateAnswerResponse]
    def update_answer(account_id, question_id, answer_id, v, opts = {})
      data, _status_code, _headers = update_answer_with_http_info(account_id, question_id, answer_id, v, opts)
      data
    end

    # Answer: Update
    # Updates an Answer for a Question
    # @param account_id [String] 
    # @param question_id [Integer] ID of this Question.
    # @param answer_id [Integer] ID of this Answer.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [AnswerRequest] :answer_request 
    # @return [Array<(UpdateAnswerResponse, Integer, Hash)>] UpdateAnswerResponse data, response status code and response headers
    def update_answer_with_http_info(account_id, question_id, answer_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.update_answer ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.update_answer"
      end
      # verify the required parameter 'question_id' is set
      if @api_client.config.client_side_validation && question_id.nil?
        fail ArgumentError, "Missing the required parameter 'question_id' when calling ListingsApi.update_answer"
      end
      # verify the required parameter 'answer_id' is set
      if @api_client.config.client_side_validation && answer_id.nil?
        fail ArgumentError, "Missing the required parameter 'answer_id' when calling ListingsApi.update_answer"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.update_answer"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/questions/{questionId}/answers/{answerId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'questionId' + '}', CGI.escape(question_id.to_s)).sub('{' + 'answerId' + '}', CGI.escape(answer_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'answer_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAnswerResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.update_answer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#update_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Publisher Suggestions: Update
    # Accept or reject a Publisher Suggestion.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **`Yext-User-Id`** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id [String] 
    # @param status [String] The status of the Publisher Suggestion
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def update_publisher_suggestion(account_id, v, suggestion_id, status, opts = {})
      data, _status_code, _headers = update_publisher_suggestion_with_http_info(account_id, v, suggestion_id, status, opts)
      data
    end

    # Publisher Suggestions: Update
    # Accept or reject a Publisher Suggestion.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param suggestion_id [String] 
    # @param status [String] The status of the Publisher Suggestion
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def update_publisher_suggestion_with_http_info(account_id, v, suggestion_id, status, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ListingsApi.update_publisher_suggestion ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ListingsApi.update_publisher_suggestion"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ListingsApi.update_publisher_suggestion"
      end
      # verify the required parameter 'suggestion_id' is set
      if @api_client.config.client_side_validation && suggestion_id.nil?
        fail ArgumentError, "Missing the required parameter 'suggestion_id' when calling ListingsApi.update_publisher_suggestion"
      end
      # verify the required parameter 'status' is set
      if @api_client.config.client_side_validation && status.nil?
        fail ArgumentError, "Missing the required parameter 'status' when calling ListingsApi.update_publisher_suggestion"
      end
      # verify enum value
      allowable_values = ["ACCEPTED", "REJECTED"]
      if @api_client.config.client_side_validation && !allowable_values.include?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/listings/publishersuggestions/{suggestionId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'suggestionId' + '}', CGI.escape(suggestion_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'status'] = status

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ListingsApi.update_publisher_suggestion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListingsApi#update_publisher_suggestion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
