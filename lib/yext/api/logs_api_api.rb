=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'cgi'

module Yext
  class LogsAPIApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Table Schema
    # Retrieve schema for table in the Logs API. Available tables can be found by querying the GET Tables endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param table [String] Table to query
    # @param [Hash] opts the optional parameters
    # @return [GetTableResponse]
    def get_table(account_id, v, api_key, table, opts = {})
      data, _status_code, _headers = get_table_with_http_info(account_id, v, api_key, table, opts)
      data
    end

    # Table Schema
    # Retrieve schema for table in the Logs API. Available tables can be found by querying the GET Tables endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param table [String] Table to query
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTableResponse, Integer, Hash)>] GetTableResponse data, response status code and response headers
    def get_table_with_http_info(account_id, v, api_key, table, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsAPIApi.get_table ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling LogsAPIApi.get_table"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling LogsAPIApi.get_table"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling LogsAPIApi.get_table"
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling LogsAPIApi.get_table"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/logs/tables/{table}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'table' + '}', CGI.escape(table.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTableResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"LogsAPIApi.get_table",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsAPIApi#get_table\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Tables
    # Retrieve tables that can be queried in the POST Query endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param [Hash] opts the optional parameters
    # @return [GetTablesResponse]
    def get_tables(account_id, v, api_key, opts = {})
      data, _status_code, _headers = get_tables_with_http_info(account_id, v, api_key, opts)
      data
    end

    # Tables
    # Retrieve tables that can be queried in the POST Query endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTablesResponse, Integer, Hash)>] GetTablesResponse data, response status code and response headers
    def get_tables_with_http_info(account_id, v, api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsAPIApi.get_tables ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling LogsAPIApi.get_tables"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling LogsAPIApi.get_tables"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling LogsAPIApi.get_tables"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/logs/tables'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetTablesResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"LogsAPIApi.get_tables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsAPIApi#get_tables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Query
    # Retrieve data from table. Available tables can be found by querying the GET Tables endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param table [String] Table to query
    # @param [Hash] opts the optional parameters
    # @option opts [CreateQueryRequestBody] :create_query_request_body JSON object containing fields, pageSize, sorting and filters to be applied to request.
    # @return [CreateQueryResponse]
    def post_query(account_id, v, api_key, table, opts = {})
      data, _status_code, _headers = post_query_with_http_info(account_id, v, api_key, table, opts)
      data
    end

    # Query
    # Retrieve data from table. Available tables can be found by querying the GET Tables endpoint of the Logs API.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param api_key [String] API Key associated with your App that has access to Logs endpoint.
    # @param table [String] Table to query
    # @param [Hash] opts the optional parameters
    # @option opts [CreateQueryRequestBody] :create_query_request_body JSON object containing fields, pageSize, sorting and filters to be applied to request.
    # @return [Array<(CreateQueryResponse, Integer, Hash)>] CreateQueryResponse data, response status code and response headers
    def post_query_with_http_info(account_id, v, api_key, table, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LogsAPIApi.post_query ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling LogsAPIApi.post_query"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling LogsAPIApi.post_query"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling LogsAPIApi.post_query"
      end
      # verify the required parameter 'table' is set
      if @api_client.config.client_side_validation && table.nil?
        fail ArgumentError, "Missing the required parameter 'table' when calling LogsAPIApi.post_query"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/logs/tables/{table}/query'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'table' + '}', CGI.escape(table.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_query_request_body'])

      # return_type
      return_type = opts[:debug_return_type] || 'CreateQueryResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"LogsAPIApi.post_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LogsAPIApi#post_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
