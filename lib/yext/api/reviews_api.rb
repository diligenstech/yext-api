=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'cgi'

module Yext
  class ReviewsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Comment: Create
    # Creates a new Comment on a Review. <br><br>  ## Required fields * **`content`** <br><br>  ## Optional fields * **`parentId`** * **`visibility`** <br><br> 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_comment [ReviewComment] 
    # @param [Hash] opts the optional parameters
    # @return [CreateReviewCommentResponse]
    def create_comment(account_id, review_id, v, review_comment, opts = {})
      data, _status_code, _headers = create_comment_with_http_info(account_id, review_id, v, review_comment, opts)
      data
    end

    # Comment: Create
    # Creates a new Comment on a Review. &lt;br&gt;&lt;br&gt;  ## Required fields * **&#x60;content&#x60;** &lt;br&gt;&lt;br&gt;  ## Optional fields * **&#x60;parentId&#x60;** * **&#x60;visibility&#x60;** &lt;br&gt;&lt;br&gt; 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_comment [ReviewComment] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateReviewCommentResponse, Integer, Hash)>] CreateReviewCommentResponse data, response status code and response headers
    def create_comment_with_http_info(account_id, review_id, v, review_comment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.create_comment ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_comment"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.create_comment"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_comment"
      end
      # verify the required parameter 'review_comment' is set
      if @api_client.config.client_side_validation && review_comment.nil?
        fail ArgumentError, "Missing the required parameter 'review_comment' when calling ReviewsApi.create_comment"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}/comments'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(review_comment)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateReviewCommentResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.create_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: Create
    # Create a new External First Party Review. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_review [CreateReview] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def create_review(account_id, v, create_review, opts = {})
      data, _status_code, _headers = create_review_with_http_info(account_id, v, create_review, opts)
      data
    end

    # Reviews: Create
    # Create a new External First Party Review. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_review [CreateReview] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def create_review_with_http_info(account_id, v, create_review, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.create_review ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_review"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_review"
      end
      # verify the required parameter 'create_review' is set
      if @api_client.config.client_side_validation && create_review.nil?
        fail ArgumentError, "Missing the required parameter 'create_review' when calling ReviewsApi.create_review"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_review)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.create_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitations: Create
    # Sends review invitations to one or more consumers. <br><br>  ## Optional fields * **`templateId`** * **`transactionId`** <br><br> 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_review_invitation_request [Array<CreateReviewInvitationRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [CreateReviewInvitationsResponse]
    def create_review_invites(account_id, v, create_review_invitation_request, opts = {})
      data, _status_code, _headers = create_review_invites_with_http_info(account_id, v, create_review_invitation_request, opts)
      data
    end

    # Review Invitations: Create
    # Sends review invitations to one or more consumers. &lt;br&gt;&lt;br&gt;  ## Optional fields * **&#x60;templateId&#x60;** * **&#x60;transactionId&#x60;** &lt;br&gt;&lt;br&gt; 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_review_invitation_request [Array<CreateReviewInvitationRequest>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateReviewInvitationsResponse, Integer, Hash)>] CreateReviewInvitationsResponse data, response status code and response headers
    def create_review_invites_with_http_info(account_id, v, create_review_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.create_review_invites ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.create_review_invites"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.create_review_invites"
      end
      # verify the required parameter 'create_review_invitation_request' is set
      if @api_client.config.client_side_validation && create_review_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_review_invitation_request' when calling ReviewsApi.create_review_invites"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviewinvites'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_review_invitation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateReviewInvitationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.create_review_invites",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#create_review_invites\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Comment: Delete
    # Deletes a Comment on a Review. <br><br> 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param comment_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_comment(account_id, review_id, comment_id, v, opts = {})
      data, _status_code, _headers = delete_comment_with_http_info(account_id, review_id, comment_id, v, opts)
      data
    end

    # Comment: Delete
    # Deletes a Comment on a Review. &lt;br&gt;&lt;br&gt; 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param comment_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_comment_with_http_info(account_id, review_id, comment_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.delete_comment ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.delete_comment"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.delete_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReviewsApi.delete_comment"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.delete_comment"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}/comments/{commentId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s)).sub('{' + 'commentId' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.delete_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#delete_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitation: Delete
    # Delete a specific review invitation.
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_invitation(account_id, invitation_uid, v, opts = {})
      data, _status_code, _headers = delete_invitation_with_http_info(account_id, invitation_uid, v, opts)
      data
    end

    # Review Invitation: Delete
    # Delete a specific review invitation.
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_invitation_with_http_info(account_id, invitation_uid, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.delete_invitation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.delete_invitation"
      end
      # verify the required parameter 'invitation_uid' is set
      if @api_client.config.client_side_validation && invitation_uid.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_uid' when calling ReviewsApi.delete_invitation"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.delete_invitation"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviewinvites/{invitationUid}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'invitationUid' + '}', CGI.escape(invitation_uid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.delete_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#delete_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review: Get
    # Retrieve a specific Review.
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ReviewResponse]
    def get_review(account_id, review_id, v, opts = {})
      data, _status_code, _headers = get_review_with_http_info(account_id, review_id, v, opts)
      data
    end

    # Review: Get
    # Retrieve a specific Review.
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReviewResponse, Integer, Hash)>] ReviewResponse data, response status code and response headers
    def get_review_with_http_info(account_id, review_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.get_review ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.get_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.get_review"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.get_review"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReviewResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.get_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#get_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Generation Settings: Get
    # Returns all current generation settings for a specified account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ReviewGenerationSettingsResponse]
    def get_review_generation_settings(account_id, v, opts = {})
      data, _status_code, _headers = get_review_generation_settings_with_http_info(account_id, v, opts)
      data
    end

    # Review Generation Settings: Get
    # Returns all current generation settings for a specified account.
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReviewGenerationSettingsResponse, Integer, Hash)>] ReviewGenerationSettingsResponse data, response status code and response headers
    def get_review_generation_settings_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.get_review_generation_settings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.get_review_generation_settings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.get_review_generation_settings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/settings/generation'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReviewGenerationSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.get_review_generation_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#get_review_generation_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitation: Get
    # Retrieve a specific review invitation.
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [ReviewInvitationResponse]
    def get_review_invitation(account_id, invitation_uid, v, opts = {})
      data, _status_code, _headers = get_review_invitation_with_http_info(account_id, invitation_uid, v, opts)
      data
    end

    # Review Invitation: Get
    # Retrieve a specific review invitation.
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReviewInvitationResponse, Integer, Hash)>] ReviewInvitationResponse data, response status code and response headers
    def get_review_invitation_with_http_info(account_id, invitation_uid, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.get_review_invitation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.get_review_invitation"
      end
      # verify the required parameter 'invitation_uid' is set
      if @api_client.config.client_side_validation && invitation_uid.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_uid' when calling ReviewsApi.get_review_invitation"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.get_review_invitation"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviewinvites/{invitationUid}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'invitationUid' + '}', CGI.escape(invitation_uid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReviewInvitationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.get_review_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#get_review_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitations: List
    # Retrieves all review invitations for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  (default to 0)
    # @option opts [Array<String>] :location_ids When provided, only invitations for the requested locations will be returned.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :folder_ids When provided, only invitations for locations in the given folders and their subfolders will be included in the results. 
    # @option opts [Array<String>] :location_labels When present, only invitations for locations with the provided labels will be returned. 
    # @option opts [Array<String>] :template_ids When provided, only invitations using the provided templateIds will be returned.
    # @option opts [String] :status When provided, only invitations of the chosen status will be returned.
    # @option opts [String] :type When provided, only invitations of the selected type will be returned.
    # @return [ReviewInvitationsResponse]
    def list_review_invitations(account_id, v, opts = {})
      data, _status_code, _headers = list_review_invitations_with_http_info(account_id, v, opts)
      data
    end

    # Review Invitations: List
    # Retrieves all review invitations for an account
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
    # @option opts [Array<String>] :location_ids When provided, only invitations for the requested locations will be returned.  **Example:** loc123,loc456,loc789 
    # @option opts [Array<String>] :folder_ids When provided, only invitations for locations in the given folders and their subfolders will be included in the results. 
    # @option opts [Array<String>] :location_labels When present, only invitations for locations with the provided labels will be returned. 
    # @option opts [Array<String>] :template_ids When provided, only invitations using the provided templateIds will be returned.
    # @option opts [String] :status When provided, only invitations of the chosen status will be returned.
    # @option opts [String] :type When provided, only invitations of the selected type will be returned.
    # @return [Array<(ReviewInvitationsResponse, Integer, Hash)>] ReviewInvitationsResponse data, response status code and response headers
    def list_review_invitations_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.list_review_invitations ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.list_review_invitations"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.list_review_invitations"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReviewsApi.list_review_invitations, must be smaller than or equal to 100.'
      end

      allowable_values = ["ACCEPTED", "REJECTED", "PENDING"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["EMAIL", "SMS"]
      if @api_client.config.client_side_validation && opts[:'type'] && !allowable_values.include?(opts[:'type'])
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviewinvites'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'locationIds'] = @api_client.build_collection_param(opts[:'location_ids'], :csv) if !opts[:'location_ids'].nil?
      query_params[:'folderIds'] = @api_client.build_collection_param(opts[:'folder_ids'], :multi) if !opts[:'folder_ids'].nil?
      query_params[:'locationLabels'] = @api_client.build_collection_param(opts[:'location_labels'], :multi) if !opts[:'location_labels'].nil?
      query_params[:'templateIds'] = @api_client.build_collection_param(opts[:'template_ids'], :multi) if !opts[:'template_ids'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReviewInvitationsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.list_review_invitations",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#list_review_invitations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reviews: List
    # Retrieve all Reviews matching the given criteria.  **NOTE:** Not all publishers' reviews will be included in the response. For more details, please contact your Account Manager. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return. (default to 10)
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  If the **&#x60;v&#x60;** parameter is before &#x60;20211115&#x60;, the maximum offset is not enforced. However, users are still encouraged to migrate to **&#x60;pageToken&#x60;** for queries requiring large offsets, as these may result in errors.  (default to 0)
    # @option opts [Array<String>] :entity_ids When provided, only reviews for the requested entities will be returned.  Before 12/13/21, the parameter name was  **&#x60;locationIds&#x60;**. Specifying either **&#x60;locationsIds&#x60;** or **&#x60;entityIds&#x60;** as the parameter name will have the same result.  By default, reviews will be returned for all entities subscribed to Review Monitoring.  **Example:** entity123,entity456,entity789 
    # @option opts [String] :review_external_id The review&#39;s ID, as assigned by the publisher.
    # @option opts [String] :folder_id When provided, only reviews for locations in the given folder and its subfolders will be included in the results.
    # @option opts [Array<String>] :countries When present, only reviews for locations in the given countries will be returned. Countries are denoted by ISO 3166 2-letter country codes.
    # @option opts [Array<String>] :location_labels When present, only reviews for locations with the provided labels will be returned.
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [String] :review_content When specified, only reviews that include the provided content will be returned.
    # @option opts [Float] :min_rating When specified, only reviews with the provided minimum rating or higher will be returned.
    # @option opts [Float] :max_rating When specified, only reviews with the provided maximum rating or lower will be returned.
    # @option opts [Date] :min_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or after the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a publisher date on or after the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a publisher date on or after the given date in **UTC** 
    # @option opts [Date] :max_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or before the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a publisher date on or before the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a publisher date on or before the given date in **UTC** 
    # @option opts [Date] :min_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or after the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns revies with a last Yext update date on or after the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns revies with a last Yext update date on or after the given date in **UTC** 
    # @option opts [Date] :max_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or before the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a last Yext update date on or before the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a last Yext update date on or before the given date in **UTC** 
    # @option opts [String] :awaiting_response When specified, only reviews that are awaiting an owner reply on the given objects will be returned.  For example, when &#x60;awaitingResponse&#x3D;COMMENT&#x60;, reviews will only be returned if they have at least one comment that has not been responded to by the owner. 
    # @option opts [Integer] :min_non_owner_comments When specified, only reviews that have at least the provided number of non-owner comments will be returned.
    # @option opts [String] :reviewer_name When specified, only reviews whose authorName contains the provided string will be returned.
    # @option opts [String] :status When specified, only reviews with the given **&#x60;status&#x60;** values will be returned.  The **&#x60;status&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20170830&#x60; or later. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data.  The **&#x60;pageToken&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20170901&#x60; or later. 
    # @option opts [String] :review_language When provided, only reviews in the given languages will be included in the results.  Languages must be specified by their ISO 639-1 codes. If specifying multiple languages, enter the language codes as a comma-separated list.  **Example:** &#39;en,fr,zh&#39; 
    # @option opts [Array<String>] :label_ids When present, only reviews with the provided review label IDs will be returned.
    # @option opts [String] :review_type When specified, only reviews that are of the given **&#x60;reviewType&#x60;** will be returned. Only applicable to Facebook reviews.  The **&#x60;reviewType&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20181002&#x60; or later. 
    # @option opts [String] :recommendation When specified, only reviews with the given **&#x60;recommendation&#x60;** value will be returned. Only applicable to Facebook reviews.  The **&#x60;recommendation&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20181002&#x60; or later. 
    # @option opts [String] :flag_status When specified, only reviews with the given **&#x60;flagStatus&#x60;** value will be returned.  **&#x60;flagStatus&#x60;** indicates whether the review has been flagged for inappropriate or irrelevant content. For review publishing, Yext recommends filtering to reviews with &#x60;flagStatus &#x3D; NOT_FLAGGED&#x60;, as flagged reviews are being examined for inappropriate or irrelevant content. Note that only First Party and External First Party reviews can be flagged. 
    # @return [ReviewsResponse]
    def list_reviews(account_id, v, opts = {})
      data, _status_code, _headers = list_reviews_with_http_info(account_id, v, opts)
      data
    end

    # Reviews: List
    # Retrieve all Reviews matching the given criteria.  **NOTE:** Not all publishers&#39; reviews will be included in the response. For more details, please contact your Account Manager. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of results to return.
    # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**.  If the **&#x60;v&#x60;** parameter is before &#x60;20211115&#x60;, the maximum offset is not enforced. However, users are still encouraged to migrate to **&#x60;pageToken&#x60;** for queries requiring large offsets, as these may result in errors. 
    # @option opts [Array<String>] :entity_ids When provided, only reviews for the requested entities will be returned.  Before 12/13/21, the parameter name was  **&#x60;locationIds&#x60;**. Specifying either **&#x60;locationsIds&#x60;** or **&#x60;entityIds&#x60;** as the parameter name will have the same result.  By default, reviews will be returned for all entities subscribed to Review Monitoring.  **Example:** entity123,entity456,entity789 
    # @option opts [String] :review_external_id The review&#39;s ID, as assigned by the publisher.
    # @option opts [String] :folder_id When provided, only reviews for locations in the given folder and its subfolders will be included in the results.
    # @option opts [Array<String>] :countries When present, only reviews for locations in the given countries will be returned. Countries are denoted by ISO 3166 2-letter country codes.
    # @option opts [Array<String>] :location_labels When present, only reviews for locations with the provided labels will be returned.
    # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
    # @option opts [String] :review_content When specified, only reviews that include the provided content will be returned.
    # @option opts [Float] :min_rating When specified, only reviews with the provided minimum rating or higher will be returned.
    # @option opts [Float] :max_rating When specified, only reviews with the provided maximum rating or lower will be returned.
    # @option opts [Date] :min_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or after the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a publisher date on or after the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a publisher date on or after the given date in **UTC** 
    # @option opts [Date] :max_publisher_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a publisher date on or before the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a publisher date on or before the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a publisher date on or before the given date in **UTC** 
    # @option opts [Date] :min_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or after the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns revies with a last Yext update date on or after the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns revies with a last Yext update date on or after the given date in **UTC** 
    # @option opts [Date] :max_last_yext_update_date (&#x60;YYYY-MM-DD&#x60; format) When specified, only reviews with a last Yext update date on or before the given date will be returned.  If the **&#x60;v&#x60;** parameter is before &#x60;20170617&#x60;: returns reviews with a last Yext update date on or before the given date in **EST**  If the **&#x60;v&#x60;** parameter is &#x60;20170617&#x60; or later: returns reviews with a last Yext update date on or before the given date in **UTC** 
    # @option opts [String] :awaiting_response When specified, only reviews that are awaiting an owner reply on the given objects will be returned.  For example, when &#x60;awaitingResponse&#x3D;COMMENT&#x60;, reviews will only be returned if they have at least one comment that has not been responded to by the owner. 
    # @option opts [Integer] :min_non_owner_comments When specified, only reviews that have at least the provided number of non-owner comments will be returned.
    # @option opts [String] :reviewer_name When specified, only reviews whose authorName contains the provided string will be returned.
    # @option opts [String] :status When specified, only reviews with the given **&#x60;status&#x60;** values will be returned.  The **&#x60;status&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20170830&#x60; or later. 
    # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data.  The **&#x60;pageToken&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20170901&#x60; or later. 
    # @option opts [String] :review_language When provided, only reviews in the given languages will be included in the results.  Languages must be specified by their ISO 639-1 codes. If specifying multiple languages, enter the language codes as a comma-separated list.  **Example:** &#39;en,fr,zh&#39; 
    # @option opts [Array<String>] :label_ids When present, only reviews with the provided review label IDs will be returned.
    # @option opts [String] :review_type When specified, only reviews that are of the given **&#x60;reviewType&#x60;** will be returned. Only applicable to Facebook reviews.  The **&#x60;reviewType&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20181002&#x60; or later. 
    # @option opts [String] :recommendation When specified, only reviews with the given **&#x60;recommendation&#x60;** value will be returned. Only applicable to Facebook reviews.  The **&#x60;recommendation&#x60;** parameter will only be respected with the inclusion of a **&#x60;v&#x60;** parameter of &#x60;20181002&#x60; or later. 
    # @option opts [String] :flag_status When specified, only reviews with the given **&#x60;flagStatus&#x60;** value will be returned.  **&#x60;flagStatus&#x60;** indicates whether the review has been flagged for inappropriate or irrelevant content. For review publishing, Yext recommends filtering to reviews with &#x60;flagStatus &#x3D; NOT_FLAGGED&#x60;, as flagged reviews are being examined for inappropriate or irrelevant content. Note that only First Party and External First Party reviews can be flagged. 
    # @return [Array<(ReviewsResponse, Integer, Hash)>] ReviewsResponse data, response status code and response headers
    def list_reviews_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.list_reviews ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.list_reviews"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.list_reviews"
      end
      if @api_client.config.client_side_validation && !opts[:'limit'].nil? && opts[:'limit'] > 100
        fail ArgumentError, 'invalid value for "opts[:"limit"]" when calling ReviewsApi.list_reviews, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 9900
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling ReviewsApi.list_reviews, must be smaller than or equal to 9900.'
      end

      allowable_values = ["REVIEW", "COMMENT", "REVIEW_OR_COMMENT"]
      if @api_client.config.client_side_validation && opts[:'awaiting_response'] && !allowable_values.include?(opts[:'awaiting_response'])
        fail ArgumentError, "invalid value for \"awaiting_response\", must be one of #{allowable_values}"
      end
      allowable_values = ["LIVE", "QUARANTINED", "REMOVED"]
      if @api_client.config.client_side_validation && opts[:'status'] && !allowable_values.include?(opts[:'status'])
        fail ArgumentError, "invalid value for \"status\", must be one of #{allowable_values}"
      end
      allowable_values = ["Rating", "Recommendation"]
      if @api_client.config.client_side_validation && opts[:'review_type'] && !allowable_values.include?(opts[:'review_type'])
        fail ArgumentError, "invalid value for \"review_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["Recommended", "Not Recommended"]
      if @api_client.config.client_side_validation && opts[:'recommendation'] && !allowable_values.include?(opts[:'recommendation'])
        fail ArgumentError, "invalid value for \"recommendation\", must be one of #{allowable_values}"
      end
      allowable_values = ["FLAGGED", "NOT_FLAGGED"]
      if @api_client.config.client_side_validation && opts[:'flag_status'] && !allowable_values.include?(opts[:'flag_status'])
        fail ArgumentError, "invalid value for \"flag_status\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'entityIds'] = @api_client.build_collection_param(opts[:'entity_ids'], :csv) if !opts[:'entity_ids'].nil?
      query_params[:'reviewExternalId'] = opts[:'review_external_id'] if !opts[:'review_external_id'].nil?
      query_params[:'folderId'] = opts[:'folder_id'] if !opts[:'folder_id'].nil?
      query_params[:'countries'] = @api_client.build_collection_param(opts[:'countries'], :multi) if !opts[:'countries'].nil?
      query_params[:'locationLabels'] = @api_client.build_collection_param(opts[:'location_labels'], :multi) if !opts[:'location_labels'].nil?
      query_params[:'publisherIds'] = @api_client.build_collection_param(opts[:'publisher_ids'], :csv) if !opts[:'publisher_ids'].nil?
      query_params[:'reviewContent'] = opts[:'review_content'] if !opts[:'review_content'].nil?
      query_params[:'minRating'] = opts[:'min_rating'] if !opts[:'min_rating'].nil?
      query_params[:'maxRating'] = opts[:'max_rating'] if !opts[:'max_rating'].nil?
      query_params[:'minPublisherDate'] = opts[:'min_publisher_date'] if !opts[:'min_publisher_date'].nil?
      query_params[:'maxPublisherDate'] = opts[:'max_publisher_date'] if !opts[:'max_publisher_date'].nil?
      query_params[:'minLastYextUpdateDate'] = opts[:'min_last_yext_update_date'] if !opts[:'min_last_yext_update_date'].nil?
      query_params[:'maxLastYextUpdateDate'] = opts[:'max_last_yext_update_date'] if !opts[:'max_last_yext_update_date'].nil?
      query_params[:'awaitingResponse'] = opts[:'awaiting_response'] if !opts[:'awaiting_response'].nil?
      query_params[:'minNonOwnerComments'] = opts[:'min_non_owner_comments'] if !opts[:'min_non_owner_comments'].nil?
      query_params[:'reviewerName'] = opts[:'reviewer_name'] if !opts[:'reviewer_name'].nil?
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'reviewLanguage'] = opts[:'review_language'] if !opts[:'review_language'].nil?
      query_params[:'labelIds'] = @api_client.build_collection_param(opts[:'label_ids'], :multi) if !opts[:'label_ids'].nil?
      query_params[:'reviewType'] = opts[:'review_type'] if !opts[:'review_type'].nil?
      query_params[:'recommendation'] = opts[:'recommendation'] if !opts[:'recommendation'].nil?
      query_params[:'flagStatus'] = opts[:'flag_status'] if !opts[:'flag_status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ReviewsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.list_reviews",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#list_reviews\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Comment: Update
    # Updates a Comment on a Review. <br><br>  ## Optional fields * **`content`** * **`visibility`** <br><br> 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param comment_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_comment_update [ReviewCommentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def update_comment(account_id, review_id, comment_id, v, review_comment_update, opts = {})
      data, _status_code, _headers = update_comment_with_http_info(account_id, review_id, comment_id, v, review_comment_update, opts)
      data
    end

    # Comment: Update
    # Updates a Comment on a Review. &lt;br&gt;&lt;br&gt;  ## Optional fields * **&#x60;content&#x60;** * **&#x60;visibility&#x60;** &lt;br&gt;&lt;br&gt; 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param comment_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_comment_update [ReviewCommentUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def update_comment_with_http_info(account_id, review_id, comment_id, v, review_comment_update, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.update_comment ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_comment"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.update_comment"
      end
      # verify the required parameter 'comment_id' is set
      if @api_client.config.client_side_validation && comment_id.nil?
        fail ArgumentError, "Missing the required parameter 'comment_id' when calling ReviewsApi.update_comment"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_comment"
      end
      # verify the required parameter 'review_comment_update' is set
      if @api_client.config.client_side_validation && review_comment_update.nil?
        fail ArgumentError, "Missing the required parameter 'review_comment_update' when calling ReviewsApi.update_comment"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}/comments/{commentId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s)).sub('{' + 'commentId' + '}', CGI.escape(comment_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(review_comment_update)

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.update_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review: Update
    # Updates an External First Party Review or a First Party Review. <br><br> **NOTE:** Despite using the `PUT` method, Reviews: Update only updates supplied fields. Omitted fields are not modified. <br><br> 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param update_review [UpdateReview] 
    # @param [Hash] opts the optional parameters
    # @return [IdResponse]
    def update_review(account_id, review_id, v, update_review, opts = {})
      data, _status_code, _headers = update_review_with_http_info(account_id, review_id, v, update_review, opts)
      data
    end

    # Review: Update
    # Updates an External First Party Review or a First Party Review. &lt;br&gt;&lt;br&gt; **NOTE:** Despite using the &#x60;PUT&#x60; method, Reviews: Update only updates supplied fields. Omitted fields are not modified. &lt;br&gt;&lt;br&gt; 
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param update_review [UpdateReview] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdResponse, Integer, Hash)>] IdResponse data, response status code and response headers
    def update_review_with_http_info(account_id, review_id, v, update_review, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.update_review ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.update_review"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review"
      end
      # verify the required parameter 'update_review' is set
      if @api_client.config.client_side_validation && update_review.nil?
        fail ArgumentError, "Missing the required parameter 'update_review' when calling ReviewsApi.update_review"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_review)

      # return_type
      return_type = opts[:debug_return_type] || 'IdResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.update_review",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Generation Settings: Update
    # Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_generation_settings [ReviewGenerationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateReviewGenerationSettingsResponse]
    def update_review_generation_settings(account_id, v, review_generation_settings, opts = {})
      data, _status_code, _headers = update_review_generation_settings_with_http_info(account_id, v, review_generation_settings, opts)
      data
    end

    # Review Generation Settings: Update
    # Updates any generation settings specified in a specified account. Call may include any/all settings available to the account. Settings not included will remain unchanged. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param review_generation_settings [ReviewGenerationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateReviewGenerationSettingsResponse, Integer, Hash)>] UpdateReviewGenerationSettingsResponse data, response status code and response headers
    def update_review_generation_settings_with_http_info(account_id, v, review_generation_settings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.update_review_generation_settings ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review_generation_settings"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review_generation_settings"
      end
      # verify the required parameter 'review_generation_settings' is set
      if @api_client.config.client_side_validation && review_generation_settings.nil?
        fail ArgumentError, "Missing the required parameter 'review_generation_settings' when calling ReviewsApi.update_review_generation_settings"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/settings/generation'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(review_generation_settings)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateReviewGenerationSettingsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.update_review_generation_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review_generation_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Invitation: Update
    # Supports updating an existing review invitation. This endpoint will not create a new review invitation or trigger a new SMS/Email to be sent, it will only update the data and/or metadata for an existing review invitation. Any optional parameters which are excluded from the request will simply be ignored. 
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param update_review_invitation_request [UpdateReviewInvitationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateReviewInvitationResponse]
    def update_review_invitation(account_id, invitation_uid, v, update_review_invitation_request, opts = {})
      data, _status_code, _headers = update_review_invitation_with_http_info(account_id, invitation_uid, v, update_review_invitation_request, opts)
      data
    end

    # Review Invitation: Update
    # Supports updating an existing review invitation. This endpoint will not create a new review invitation or trigger a new SMS/Email to be sent, it will only update the data and/or metadata for an existing review invitation. Any optional parameters which are excluded from the request will simply be ignored. 
    # @param account_id [String] 
    # @param invitation_uid [String] The UID of this Review Invitation. This UID can be included as part of Review Creation requests for attribution. 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param update_review_invitation_request [UpdateReviewInvitationRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateReviewInvitationResponse, Integer, Hash)>] UpdateReviewInvitationResponse data, response status code and response headers
    def update_review_invitation_with_http_info(account_id, invitation_uid, v, update_review_invitation_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.update_review_invitation ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review_invitation"
      end
      # verify the required parameter 'invitation_uid' is set
      if @api_client.config.client_side_validation && invitation_uid.nil?
        fail ArgumentError, "Missing the required parameter 'invitation_uid' when calling ReviewsApi.update_review_invitation"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review_invitation"
      end
      # verify the required parameter 'update_review_invitation_request' is set
      if @api_client.config.client_side_validation && update_review_invitation_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_review_invitation_request' when calling ReviewsApi.update_review_invitation"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviewinvites/{invitationUid}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'invitationUid' + '}', CGI.escape(invitation_uid.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_review_invitation_request)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateReviewInvitationResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.update_review_invitation",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review_invitation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Review Labels: Update
    # Adds the specified review labels to the specified review.
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReviewLabelsRequest] :update_review_labels_request 
    # @return [UpdateReviewLabelsResponse]
    def update_review_labels(account_id, review_id, v, opts = {})
      data, _status_code, _headers = update_review_labels_with_http_info(account_id, review_id, v, opts)
      data
    end

    # Review Labels: Update
    # Adds the specified review labels to the specified review.
    # @param account_id [String] 
    # @param review_id [Integer] ID of this Review.
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateReviewLabelsRequest] :update_review_labels_request 
    # @return [Array<(UpdateReviewLabelsResponse, Integer, Hash)>] UpdateReviewLabelsResponse data, response status code and response headers
    def update_review_labels_with_http_info(account_id, review_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ReviewsApi.update_review_labels ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling ReviewsApi.update_review_labels"
      end
      # verify the required parameter 'review_id' is set
      if @api_client.config.client_side_validation && review_id.nil?
        fail ArgumentError, "Missing the required parameter 'review_id' when calling ReviewsApi.update_review_labels"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling ReviewsApi.update_review_labels"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/reviews/{reviewId}/labels'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'reviewId' + '}', CGI.escape(review_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'update_review_labels_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateReviewLabelsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"ReviewsApi.update_review_labels",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ReviewsApi#update_review_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
