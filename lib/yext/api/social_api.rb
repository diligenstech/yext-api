=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'cgi'

module Yext
  class SocialApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Entity Post: Create Comment
    # Comment on specific entity post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param entity_post_id [String] The ID of an individual post created for a given entity on a given publisher. 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEntityPostCommentRequest] :create_entity_post_comment_request 
    # @return [EmptyResponse]
    def create_entity_post_comment(account_id, v, entity_post_id, opts = {})
      data, _status_code, _headers = create_entity_post_comment_with_http_info(account_id, v, entity_post_id, opts)
      data
    end

    # Entity Post: Create Comment
    # Comment on specific entity post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param entity_post_id [String] The ID of an individual post created for a given entity on a given publisher. 
    # @param [Hash] opts the optional parameters
    # @option opts [CreateEntityPostCommentRequest] :create_entity_post_comment_request 
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def create_entity_post_comment_with_http_info(account_id, v, entity_post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.create_entity_post_comment ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.create_entity_post_comment"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.create_entity_post_comment"
      end
      # verify the required parameter 'entity_post_id' is set
      if @api_client.config.client_side_validation && entity_post_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_post_id' when calling SocialApi.create_entity_post_comment"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/entityPosts/{entityPostId}/comments'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'entityPostId' + '}', CGI.escape(entity_post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'create_entity_post_comment_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.create_entity_post_comment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#create_entity_post_comment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post: Create
    # Create a new social post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_post [CreatePost] 
    # @param [Hash] opts the optional parameters
    # @return [PostResponse]
    def create_posts(account_id, v, create_post, opts = {})
      data, _status_code, _headers = create_posts_with_http_info(account_id, v, create_post, opts)
      data
    end

    # Post: Create
    # Create a new social post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param create_post [CreatePost] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostResponse, Integer, Hash)>] PostResponse data, response status code and response headers
    def create_posts_with_http_info(account_id, v, create_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.create_posts ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.create_posts"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.create_posts"
      end
      # verify the required parameter 'create_post' is set
      if @api_client.config.client_side_validation && create_post.nil?
        fail ArgumentError, "Missing the required parameter 'create_post' when calling SocialApi.create_posts"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/posts'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_post)

      # return_type
      return_type = opts[:debug_return_type] || 'PostResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.create_posts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#create_posts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Entity Post: Delete
    # Delete a specific entity post 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param entity_post_id [String] The ID of an individual post created for a given entity on a given publisher. 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_entity_post(account_id, v, entity_post_id, opts = {})
      data, _status_code, _headers = delete_entity_post_with_http_info(account_id, v, entity_post_id, opts)
      data
    end

    # Entity Post: Delete
    # Delete a specific entity post 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param entity_post_id [String] The ID of an individual post created for a given entity on a given publisher. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_entity_post_with_http_info(account_id, v, entity_post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.delete_entity_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.delete_entity_post"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.delete_entity_post"
      end
      # verify the required parameter 'entity_post_id' is set
      if @api_client.config.client_side_validation && entity_post_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_post_id' when calling SocialApi.delete_entity_post"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/entityPosts/{entityPostId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'entityPostId' + '}', CGI.escape(entity_post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.delete_entity_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#delete_entity_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post: Delete
    # Delete a social post.  **NOTE:** Posts that have status `POST_PROCESSING` may not be deleted. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post.  To delete individual entity posts, please use the [**Entity Post: Delete**](#operation/deleteEntityPost) endpoint. 
    # @param [Hash] opts the optional parameters
    # @return [EmptyResponse]
    def delete_post(account_id, v, post_id, opts = {})
      data, _status_code, _headers = delete_post_with_http_info(account_id, v, post_id, opts)
      data
    end

    # Post: Delete
    # Delete a social post.  **NOTE:** Posts that have status &#x60;POST_PROCESSING&#x60; may not be deleted. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post.  To delete individual entity posts, please use the [**Entity Post: Delete**](#operation/deleteEntityPost) endpoint. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmptyResponse, Integer, Hash)>] EmptyResponse data, response status code and response headers
    def delete_post_with_http_info(account_id, v, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.delete_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.delete_post"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.delete_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling SocialApi.delete_post"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/posts/{postId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'postId' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'EmptyResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.delete_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#delete_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post: Get
    # Retrieve a specific social post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post.
    # @param [Hash] opts the optional parameters
    # @return [PostResponse]
    def get_post(account_id, v, post_id, opts = {})
      data, _status_code, _headers = get_post_with_http_info(account_id, v, post_id, opts)
      data
    end

    # Post: Get
    # Retrieve a specific social post. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostResponse, Integer, Hash)>] PostResponse data, response status code and response headers
    def get_post_with_http_info(account_id, v, post_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.get_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.get_post"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.get_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling SocialApi.get_post"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/posts/{postId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'postId' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.get_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#get_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Posts: List
    # Retrieve Social Posts made in the past six months matching the given criteria. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token If a response to a previous request contained the nextPageToken field, pass that field&#39;s value as the pageToken parameter to retrieve the next page of data. 
    # @option opts [Array<String>] :post_ids Only return posts with the postIDs in the specified list.
    # @option opts [Array<String>] :entity_post_ids Only return entityPosts with entityPostIds in the specified list.
    # @option opts [Array<String>] :entity_ids Only return posts for the specified entities.
    # @option opts [Array<String>] :publishers Only return posts on the specified publishers. 
    # @option opts [String] :text Only return posts with the specified text.
    # @option opts [Array<String>] :status Only include posts which match one of the specified statuses:   * &#x60;POST_SCHEDULED&#x60;   * &#x60;POST_AWAITING_APPROVAL&#x60;   * &#x60;POST_SUCCEEDED&#x60;   * &#x60;POST_DELETED&#x60;   * &#x60;POST_PROCESSING&#x60;   * &#x60;DELETE_PROCESSING&#x60;   * &#x60;POST_FAILED&#x60;   * &#x60;DELETE_FAILED&#x60;   * &#x60;AWAITING_APPROVAL&#x60;   * &#x60;REJECTED_BY_APPROVER&#x60; 
    # @return [PostsResponse]
    def list_posts(account_id, v, opts = {})
      data, _status_code, _headers = list_posts_with_http_info(account_id, v, opts)
      data
    end

    # Posts: List
    # Retrieve Social Posts made in the past six months matching the given criteria. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :page_token If a response to a previous request contained the nextPageToken field, pass that field&#39;s value as the pageToken parameter to retrieve the next page of data. 
    # @option opts [Array<String>] :post_ids Only return posts with the postIDs in the specified list.
    # @option opts [Array<String>] :entity_post_ids Only return entityPosts with entityPostIds in the specified list.
    # @option opts [Array<String>] :entity_ids Only return posts for the specified entities.
    # @option opts [Array<String>] :publishers Only return posts on the specified publishers. 
    # @option opts [String] :text Only return posts with the specified text.
    # @option opts [Array<String>] :status Only include posts which match one of the specified statuses:   * &#x60;POST_SCHEDULED&#x60;   * &#x60;POST_AWAITING_APPROVAL&#x60;   * &#x60;POST_SUCCEEDED&#x60;   * &#x60;POST_DELETED&#x60;   * &#x60;POST_PROCESSING&#x60;   * &#x60;DELETE_PROCESSING&#x60;   * &#x60;POST_FAILED&#x60;   * &#x60;DELETE_FAILED&#x60;   * &#x60;AWAITING_APPROVAL&#x60;   * &#x60;REJECTED_BY_APPROVER&#x60; 
    # @return [Array<(PostsResponse, Integer, Hash)>] PostsResponse data, response status code and response headers
    def list_posts_with_http_info(account_id, v, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.list_posts ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.list_posts"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.list_posts"
      end
      allowable_values = ["FACEBOOK", "FIRSTPARTY", "GOOGLEMYBUSINESS"]
      if @api_client.config.client_side_validation && opts[:'publishers'] && !opts[:'publishers'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"publishers\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/posts'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v
      query_params[:'pageToken'] = opts[:'page_token'] if !opts[:'page_token'].nil?
      query_params[:'postIds'] = @api_client.build_collection_param(opts[:'post_ids'], :multi) if !opts[:'post_ids'].nil?
      query_params[:'entityPostIds'] = @api_client.build_collection_param(opts[:'entity_post_ids'], :multi) if !opts[:'entity_post_ids'].nil?
      query_params[:'entityIds'] = @api_client.build_collection_param(opts[:'entity_ids'], :multi) if !opts[:'entity_ids'].nil?
      query_params[:'publishers'] = @api_client.build_collection_param(opts[:'publishers'], :multi) if !opts[:'publishers'].nil?
      query_params[:'text'] = opts[:'text'] if !opts[:'text'].nil?
      query_params[:'status'] = @api_client.build_collection_param(opts[:'status'], :multi) if !opts[:'status'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'PostsResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.list_posts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#list_posts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Post: Update
    # Update a social post.  **NOTE:** Updates are only allowed for posts with no entity posts currently processing. Entity posts that failed to publish will not be updated by subsequent requests to the update endpoint. Updates to Google Posts may not be reflected immediately. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post. 
    # @param update_post [UpdatePost] 
    # @param [Hash] opts the optional parameters
    # @return [PostResponse]
    def update_post(account_id, v, post_id, update_post, opts = {})
      data, _status_code, _headers = update_post_with_http_info(account_id, v, post_id, update_post, opts)
      data
    end

    # Post: Update
    # Update a social post.  **NOTE:** Updates are only allowed for posts with no entity posts currently processing. Entity posts that failed to publish will not be updated by subsequent requests to the update endpoint. Updates to Google Posts may not be reflected immediately. 
    # @param account_id [String] 
    # @param v [String] A date in &#x60;YYYYMMDD&#x60; format.
    # @param post_id [String] The ID of a specific post. 
    # @param update_post [UpdatePost] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PostResponse, Integer, Hash)>] PostResponse data, response status code and response headers
    def update_post_with_http_info(account_id, v, post_id, update_post, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SocialApi.update_post ...'
      end
      # verify the required parameter 'account_id' is set
      if @api_client.config.client_side_validation && account_id.nil?
        fail ArgumentError, "Missing the required parameter 'account_id' when calling SocialApi.update_post"
      end
      # verify the required parameter 'v' is set
      if @api_client.config.client_side_validation && v.nil?
        fail ArgumentError, "Missing the required parameter 'v' when calling SocialApi.update_post"
      end
      # verify the required parameter 'post_id' is set
      if @api_client.config.client_side_validation && post_id.nil?
        fail ArgumentError, "Missing the required parameter 'post_id' when calling SocialApi.update_post"
      end
      # verify the required parameter 'update_post' is set
      if @api_client.config.client_side_validation && update_post.nil?
        fail ArgumentError, "Missing the required parameter 'update_post' when calling SocialApi.update_post"
      end
      # resource path
      local_var_path = '/accounts/{accountId}/posts/{postId}'.sub('{' + 'accountId' + '}', CGI.escape(account_id.to_s)).sub('{' + 'postId' + '}', CGI.escape(post_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'v'] = v

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_post)

      # return_type
      return_type = opts[:debug_return_type] || 'PostResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['api-key', 'api_key']

      new_options = opts.merge(
        :operation => :"SocialApi.update_post",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SocialApi#update_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
