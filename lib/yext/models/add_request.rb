=begin
#Yext Admin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class AddRequest
    # The Yext ID of the created add request.
    attr_accessor :id

    # Whether the request is to add service for an existing location or to create a new location and add service to it. 
    attr_accessor :location_mode

    # The existing location ID to add service to.  This field is provided only when *locationMode* is EXISTING. Either this field or *newLocationId* will be provided. 
    attr_accessor :existing_location_id

    # The new location ID to create and add service to.  This field is provided only when *locationMode* is NEW. Either this field or *existingLocationId* will be provided. 
    attr_accessor :new_location_id

    # *(Partner Portal mode)* The account ID to create a new location under.  This field is provided only for Partner Portal and when *locationMode* is NEW. 
    attr_accessor :new_location_account_id

    # *(Partner Portal mode)* The account name to create a new location under.  This field is provided only for Partner Portal and when *locationMode* is NEW and when *newLocationAccountName* was specified in the add request. 
    attr_accessor :new_location_account_name

    # *(Partner Portal mode)* The account ID to create a new account and location under.  This field is provided only for Partner Portal, when *locationMode* is NEW and *newAccountParentAccountId* was specified in the add request. 
    attr_accessor :new_account_parent_account_id

    # The location profile data used in creating a new location for this add request.  Optional. Provided only for the **Add Requests: Create (New Location)** endpoint. 
    attr_accessor :new_location_data

    # The entity profile data used in creating a new entity for this add request.  Optional. Provided only for the **Add Requests: Create (New Location)** endpoint. 
    attr_accessor :new_entity_data

    # List of SKUs to sign the location up for, from among those listed in the **Available Services: List** response with Location recipientType. 
    attr_accessor :skus

    # The Agreement ID of the agreement that services will be added under. 
    attr_accessor :agreement_id

    # The current status of the add request.
    attr_accessor :status

    # The date the add request was submitted.
    attr_accessor :date_submitted

    # The date the add request was completed. An empty string if the request has not been completed.
    attr_accessor :date_completed

    # Results from processing.
    attr_accessor :status_detail

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'location_mode' => :'locationMode',
        :'existing_location_id' => :'existingLocationId',
        :'new_location_id' => :'newLocationId',
        :'new_location_account_id' => :'newLocationAccountId',
        :'new_location_account_name' => :'newLocationAccountName',
        :'new_account_parent_account_id' => :'newAccountParentAccountId',
        :'new_location_data' => :'newLocationData',
        :'new_entity_data' => :'newEntityData',
        :'skus' => :'skus',
        :'agreement_id' => :'agreementId',
        :'status' => :'status',
        :'date_submitted' => :'dateSubmitted',
        :'date_completed' => :'dateCompleted',
        :'status_detail' => :'statusDetail'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'location_mode' => :'String',
        :'existing_location_id' => :'String',
        :'new_location_id' => :'String',
        :'new_location_account_id' => :'String',
        :'new_location_account_name' => :'String',
        :'new_account_parent_account_id' => :'String',
        :'new_location_data' => :'Location',
        :'new_entity_data' => :'Entity',
        :'skus' => :'Array<String>',
        :'agreement_id' => :'Integer',
        :'status' => :'String',
        :'date_submitted' => :'Time',
        :'date_completed' => :'Time',
        :'status_detail' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'new_location_data',
        :'new_entity_data',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::AddRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::AddRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'location_mode')
        self.location_mode = attributes[:'location_mode']
      end

      if attributes.key?(:'existing_location_id')
        self.existing_location_id = attributes[:'existing_location_id']
      end

      if attributes.key?(:'new_location_id')
        self.new_location_id = attributes[:'new_location_id']
      end

      if attributes.key?(:'new_location_account_id')
        self.new_location_account_id = attributes[:'new_location_account_id']
      end

      if attributes.key?(:'new_location_account_name')
        self.new_location_account_name = attributes[:'new_location_account_name']
      end

      if attributes.key?(:'new_account_parent_account_id')
        self.new_account_parent_account_id = attributes[:'new_account_parent_account_id']
      end

      if attributes.key?(:'new_location_data')
        self.new_location_data = attributes[:'new_location_data']
      end

      if attributes.key?(:'new_entity_data')
        self.new_entity_data = attributes[:'new_entity_data']
      end

      if attributes.key?(:'skus')
        if (value = attributes[:'skus']).is_a?(Array)
          self.skus = value
        end
      end

      if attributes.key?(:'agreement_id')
        self.agreement_id = attributes[:'agreement_id']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'date_submitted')
        self.date_submitted = attributes[:'date_submitted']
      end

      if attributes.key?(:'date_completed')
        self.date_completed = attributes[:'date_completed']
      end

      if attributes.key?(:'status_detail')
        self.status_detail = attributes[:'status_detail']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      location_mode_validator = EnumAttributeValidator.new('String', ["EXISTING", "NEW"])
      return false unless location_mode_validator.valid?(@location_mode)
      status_validator = EnumAttributeValidator.new('String', ["SUBMITTED", "PROCESSING", "COMPLETE", "CANCELED", "REVIEW", "FAILED"])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_mode Object to be assigned
    def location_mode=(location_mode)
      validator = EnumAttributeValidator.new('String', ["EXISTING", "NEW"])
      unless validator.valid?(location_mode)
        fail ArgumentError, "invalid value for \"location_mode\", must be one of #{validator.allowable_values}."
      end
      @location_mode = location_mode
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["SUBMITTED", "PROCESSING", "COMPLETE", "CANCELED", "REVIEW", "FAILED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          location_mode == o.location_mode &&
          existing_location_id == o.existing_location_id &&
          new_location_id == o.new_location_id &&
          new_location_account_id == o.new_location_account_id &&
          new_location_account_name == o.new_location_account_name &&
          new_account_parent_account_id == o.new_account_parent_account_id &&
          new_location_data == o.new_location_data &&
          new_entity_data == o.new_entity_data &&
          skus == o.skus &&
          agreement_id == o.agreement_id &&
          status == o.status &&
          date_submitted == o.date_submitted &&
          date_completed == o.date_completed &&
          status_detail == o.status_detail
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, location_mode, existing_location_id, new_location_id, new_location_account_id, new_location_account_name, new_account_parent_account_id, new_location_data, new_entity_data, skus, agreement_id, status, date_submitted, date_completed, status_detail].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
