=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class AtmWriteAllOf
    attr_accessor :meta

    #    Cannot Include: * HTML markup
    attr_accessor :name

    attr_accessor :address

    attr_accessor :access_hours

    # Additional information about hours that does not fit in **`hours`** (e.g., `\"Closed during the winter\"`)
    attr_accessor :additional_hours_text

    # Other names for your business that you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :alternate_names

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :alternate_phone

    # Other websites for your business that we should search for when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* common domain names, e.g., google.com, youtube.com, etc.
    attr_accessor :alternate_websites

    # Yext Category IDs.  IDs must be valid and selectable (i.e., cannot be parent categories).  NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings. 
    attr_accessor :category_ids

    # Indicates whether the entity is closed
    attr_accessor :closed

    # Additional keywords you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 5 elements. 
    attr_accessor :custom_keywords

    # A description of the entity   Cannot Include: * HTML markup
    attr_accessor :description

    attr_accessor :display_coordinate

    attr_accessor :drive_through_hours

    attr_accessor :dropoff_coordinate

    attr_accessor :facebook_call_to_action

    attr_accessor :facebook_cover_photo

    # Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.   Cannot Include: * HTML markup
    attr_accessor :facebook_descriptor

    # The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.
    attr_accessor :facebook_name

    # The city to be displayed on this entity's Facebook profile
    attr_accessor :facebook_override_city

    # URL for the entity's Facebook Page.  Valid formats:  - facebook.com/profile.php?id=[numId] - facebook.com/group.php?gid=[numId] - facebook.com/groups/[numId] - facebook.com/[Name] - facebook.com/pages/[Name]/[numId]  where [Name] is a String and [numId] is an Integer  If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.
    attr_accessor :facebook_page_url

    attr_accessor :facebook_profile_photo

    # The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.
    attr_accessor :facebook_vanity_url

    # Must be a valid fax number.  If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :fax

    attr_accessor :featured_message

    # A list of questions that are frequently asked about this entity   Array must be ordered.  Array may have a maximum of 100 elements. 
    attr_accessor :frequently_asked_questions

    # Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)
    attr_accessor :geomodifier

    # The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.  Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.  Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).  * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ \"id\": \"has_wheelchair_accessible_entrance\", \"values\": [ \"true\" ] }]`) * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ \"has_wheelchair_accessible_entrance\": [ \"true\" ]}`)  **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
    attr_accessor :google_attributes

    attr_accessor :google_cover_photo

    # Google My Business Labels help users organize their locations into groups within GMB.   Array must be ordered.  Array may have a maximum of 10 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :google_my_business_labels

    # The unique identifier of this entity on Google Maps.
    attr_accessor :google_place_id

    attr_accessor :google_profile_photo

    # The URL you would like to submit to Google My Business in place of the one given in **`websiteUrl`** (if applicable).  For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
    attr_accessor :google_website_override

    # Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity
    attr_accessor :holiday_hours_conversation_enabled

    attr_accessor :hours

    # A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.
    attr_accessor :impressum

    # The ISO 3166-2 region code for the entity  Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.
    attr_accessor :iso_region_code

    # Keywords that describe the entity.  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :keywords

    # The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
    attr_accessor :labels

    # The URL of this entity's Landing Page that was created with Yext Pages
    attr_accessor :landing_page_url

    # Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.
    attr_accessor :local_phone

    # For atms, the external ID of the entity that the atm is installed in. The entity must be in the same business account as the atm.
    attr_accessor :located_in

    # Indicates the entity's type, if it is not an event
    attr_accessor :location_type

    attr_accessor :logo

    # The main phone number of the entity's point of contact  Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :main_phone

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :mobile_phone

    # Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
    attr_accessor :nudge_enabled

    attr_accessor :pickup_coordinate

    # he typical price of products sold by this location, on a scale of 1 (low) to 4 (high)
    attr_accessor :price_range

    # ID of the user who is the primary Knowledge Assistant contact for the entity
    attr_accessor :primary_conversation_contact

    # Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity
    attr_accessor :questions_and_answers

    # Information about the competitors whose search performance you would like to compare to your own   Array must be ordered.  Array may have a maximum of 5 elements. 
    attr_accessor :rank_tracking_competitors

    # Indicates whether Rank Tracking is enabled
    attr_accessor :rank_tracking_enabled

    # How often we send search queries to track your search performance
    attr_accessor :rank_tracking_frequency

    # The ways in which your keywords will be arranged in the search queries we use to track your performance   Array must have a minimum of 2 elements.  Array may have a maximum of 4 elements. 
    attr_accessor :rank_tracking_query_templates

    # The search engines that we will use to track your performance
    attr_accessor :rank_tracking_sites

    # Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity
    attr_accessor :review_response_conversation_enabled

    attr_accessor :routable_coordinate

    # The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `\"America/New_York\"`
    attr_accessor :timezone

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :toll_free_phone

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :tty_phone

    attr_accessor :walkable_coordinate

    attr_accessor :website_url

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'meta' => :'meta',
        :'name' => :'name',
        :'address' => :'address',
        :'access_hours' => :'accessHours',
        :'additional_hours_text' => :'additionalHoursText',
        :'alternate_names' => :'alternateNames',
        :'alternate_phone' => :'alternatePhone',
        :'alternate_websites' => :'alternateWebsites',
        :'category_ids' => :'categoryIds',
        :'closed' => :'closed',
        :'custom_keywords' => :'customKeywords',
        :'description' => :'description',
        :'display_coordinate' => :'displayCoordinate',
        :'drive_through_hours' => :'driveThroughHours',
        :'dropoff_coordinate' => :'dropoffCoordinate',
        :'facebook_call_to_action' => :'facebookCallToAction',
        :'facebook_cover_photo' => :'facebookCoverPhoto',
        :'facebook_descriptor' => :'facebookDescriptor',
        :'facebook_name' => :'facebookName',
        :'facebook_override_city' => :'facebookOverrideCity',
        :'facebook_page_url' => :'facebookPageUrl',
        :'facebook_profile_photo' => :'facebookProfilePhoto',
        :'facebook_vanity_url' => :'facebookVanityUrl',
        :'fax' => :'fax',
        :'featured_message' => :'featuredMessage',
        :'frequently_asked_questions' => :'frequentlyAskedQuestions',
        :'geomodifier' => :'geomodifier',
        :'google_attributes' => :'googleAttributes',
        :'google_cover_photo' => :'googleCoverPhoto',
        :'google_my_business_labels' => :'googleMyBusinessLabels',
        :'google_place_id' => :'googlePlaceId',
        :'google_profile_photo' => :'googleProfilePhoto',
        :'google_website_override' => :'googleWebsiteOverride',
        :'holiday_hours_conversation_enabled' => :'holidayHoursConversationEnabled',
        :'hours' => :'hours',
        :'impressum' => :'impressum',
        :'iso_region_code' => :'isoRegionCode',
        :'keywords' => :'keywords',
        :'labels' => :'labels',
        :'landing_page_url' => :'landingPageUrl',
        :'local_phone' => :'localPhone',
        :'located_in' => :'locatedIn',
        :'location_type' => :'locationType',
        :'logo' => :'logo',
        :'main_phone' => :'mainPhone',
        :'mobile_phone' => :'mobilePhone',
        :'nudge_enabled' => :'nudgeEnabled',
        :'pickup_coordinate' => :'pickupCoordinate',
        :'price_range' => :'priceRange',
        :'primary_conversation_contact' => :'primaryConversationContact',
        :'questions_and_answers' => :'questionsAndAnswers',
        :'rank_tracking_competitors' => :'rankTrackingCompetitors',
        :'rank_tracking_enabled' => :'rankTrackingEnabled',
        :'rank_tracking_frequency' => :'rankTrackingFrequency',
        :'rank_tracking_query_templates' => :'rankTrackingQueryTemplates',
        :'rank_tracking_sites' => :'rankTrackingSites',
        :'review_response_conversation_enabled' => :'reviewResponseConversationEnabled',
        :'routable_coordinate' => :'routableCoordinate',
        :'timezone' => :'timezone',
        :'toll_free_phone' => :'tollFreePhone',
        :'tty_phone' => :'ttyPhone',
        :'walkable_coordinate' => :'walkableCoordinate',
        :'website_url' => :'websiteUrl'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'meta' => :'AtmWriteAllOfMeta',
        :'name' => :'String',
        :'address' => :'AtmWriteAllOfAddress',
        :'access_hours' => :'AtmWriteAllOfAccessHours',
        :'additional_hours_text' => :'String',
        :'alternate_names' => :'Array<String>',
        :'alternate_phone' => :'String',
        :'alternate_websites' => :'Array<String>',
        :'category_ids' => :'Array<String>',
        :'closed' => :'Boolean',
        :'custom_keywords' => :'Array<String>',
        :'description' => :'String',
        :'display_coordinate' => :'AtmWriteAllOfDisplayCoordinate',
        :'drive_through_hours' => :'AtmWriteAllOfDriveThroughHours',
        :'dropoff_coordinate' => :'AtmWriteAllOfDropoffCoordinate',
        :'facebook_call_to_action' => :'AtmWriteAllOfFacebookCallToAction',
        :'facebook_cover_photo' => :'AtmWriteAllOfFacebookCoverPhoto',
        :'facebook_descriptor' => :'String',
        :'facebook_name' => :'String',
        :'facebook_override_city' => :'String',
        :'facebook_page_url' => :'String',
        :'facebook_profile_photo' => :'AtmWriteAllOfFacebookProfilePhoto',
        :'facebook_vanity_url' => :'String',
        :'fax' => :'String',
        :'featured_message' => :'AtmWriteAllOfFeaturedMessage',
        :'frequently_asked_questions' => :'Array<AtmWriteAllOfFrequentlyAskedQuestions>',
        :'geomodifier' => :'String',
        :'google_attributes' => :'Object',
        :'google_cover_photo' => :'AtmWriteAllOfGoogleCoverPhoto',
        :'google_my_business_labels' => :'Array<String>',
        :'google_place_id' => :'String',
        :'google_profile_photo' => :'AtmWriteAllOfGoogleProfilePhoto',
        :'google_website_override' => :'String',
        :'holiday_hours_conversation_enabled' => :'Boolean',
        :'hours' => :'AtmWriteAllOfHours',
        :'impressum' => :'String',
        :'iso_region_code' => :'String',
        :'keywords' => :'Array<String>',
        :'labels' => :'Array<String>',
        :'landing_page_url' => :'String',
        :'local_phone' => :'String',
        :'located_in' => :'String',
        :'location_type' => :'String',
        :'logo' => :'AtmWriteAllOfLogo',
        :'main_phone' => :'String',
        :'mobile_phone' => :'String',
        :'nudge_enabled' => :'Boolean',
        :'pickup_coordinate' => :'AtmWriteAllOfPickupCoordinate',
        :'price_range' => :'String',
        :'primary_conversation_contact' => :'String',
        :'questions_and_answers' => :'Boolean',
        :'rank_tracking_competitors' => :'Array<AtmWriteAllOfRankTrackingCompetitors>',
        :'rank_tracking_enabled' => :'Boolean',
        :'rank_tracking_frequency' => :'String',
        :'rank_tracking_query_templates' => :'Array<String>',
        :'rank_tracking_sites' => :'Array<String>',
        :'review_response_conversation_enabled' => :'Boolean',
        :'routable_coordinate' => :'AtmWriteAllOfRoutableCoordinate',
        :'timezone' => :'String',
        :'toll_free_phone' => :'String',
        :'tty_phone' => :'String',
        :'walkable_coordinate' => :'AtmWriteAllOfWalkableCoordinate',
        :'website_url' => :'AtmWriteAllOfWebsiteUrl'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::AtmWriteAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::AtmWriteAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'access_hours')
        self.access_hours = attributes[:'access_hours']
      end

      if attributes.key?(:'additional_hours_text')
        self.additional_hours_text = attributes[:'additional_hours_text']
      end

      if attributes.key?(:'alternate_names')
        if (value = attributes[:'alternate_names']).is_a?(Array)
          self.alternate_names = value
        end
      end

      if attributes.key?(:'alternate_phone')
        self.alternate_phone = attributes[:'alternate_phone']
      end

      if attributes.key?(:'alternate_websites')
        if (value = attributes[:'alternate_websites']).is_a?(Array)
          self.alternate_websites = value
        end
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.key?(:'custom_keywords')
        if (value = attributes[:'custom_keywords']).is_a?(Array)
          self.custom_keywords = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_coordinate')
        self.display_coordinate = attributes[:'display_coordinate']
      end

      if attributes.key?(:'drive_through_hours')
        self.drive_through_hours = attributes[:'drive_through_hours']
      end

      if attributes.key?(:'dropoff_coordinate')
        self.dropoff_coordinate = attributes[:'dropoff_coordinate']
      end

      if attributes.key?(:'facebook_call_to_action')
        self.facebook_call_to_action = attributes[:'facebook_call_to_action']
      end

      if attributes.key?(:'facebook_cover_photo')
        self.facebook_cover_photo = attributes[:'facebook_cover_photo']
      end

      if attributes.key?(:'facebook_descriptor')
        self.facebook_descriptor = attributes[:'facebook_descriptor']
      end

      if attributes.key?(:'facebook_name')
        self.facebook_name = attributes[:'facebook_name']
      end

      if attributes.key?(:'facebook_override_city')
        self.facebook_override_city = attributes[:'facebook_override_city']
      end

      if attributes.key?(:'facebook_page_url')
        self.facebook_page_url = attributes[:'facebook_page_url']
      end

      if attributes.key?(:'facebook_profile_photo')
        self.facebook_profile_photo = attributes[:'facebook_profile_photo']
      end

      if attributes.key?(:'facebook_vanity_url')
        self.facebook_vanity_url = attributes[:'facebook_vanity_url']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'featured_message')
        self.featured_message = attributes[:'featured_message']
      end

      if attributes.key?(:'frequently_asked_questions')
        if (value = attributes[:'frequently_asked_questions']).is_a?(Array)
          self.frequently_asked_questions = value
        end
      end

      if attributes.key?(:'geomodifier')
        self.geomodifier = attributes[:'geomodifier']
      end

      if attributes.key?(:'google_attributes')
        self.google_attributes = attributes[:'google_attributes']
      end

      if attributes.key?(:'google_cover_photo')
        self.google_cover_photo = attributes[:'google_cover_photo']
      end

      if attributes.key?(:'google_my_business_labels')
        if (value = attributes[:'google_my_business_labels']).is_a?(Array)
          self.google_my_business_labels = value
        end
      end

      if attributes.key?(:'google_place_id')
        self.google_place_id = attributes[:'google_place_id']
      end

      if attributes.key?(:'google_profile_photo')
        self.google_profile_photo = attributes[:'google_profile_photo']
      end

      if attributes.key?(:'google_website_override')
        self.google_website_override = attributes[:'google_website_override']
      end

      if attributes.key?(:'holiday_hours_conversation_enabled')
        self.holiday_hours_conversation_enabled = attributes[:'holiday_hours_conversation_enabled']
      end

      if attributes.key?(:'hours')
        self.hours = attributes[:'hours']
      end

      if attributes.key?(:'impressum')
        self.impressum = attributes[:'impressum']
      end

      if attributes.key?(:'iso_region_code')
        self.iso_region_code = attributes[:'iso_region_code']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'landing_page_url')
        self.landing_page_url = attributes[:'landing_page_url']
      end

      if attributes.key?(:'local_phone')
        self.local_phone = attributes[:'local_phone']
      end

      if attributes.key?(:'located_in')
        self.located_in = attributes[:'located_in']
      end

      if attributes.key?(:'location_type')
        self.location_type = attributes[:'location_type']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'main_phone')
        self.main_phone = attributes[:'main_phone']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'nudge_enabled')
        self.nudge_enabled = attributes[:'nudge_enabled']
      end

      if attributes.key?(:'pickup_coordinate')
        self.pickup_coordinate = attributes[:'pickup_coordinate']
      end

      if attributes.key?(:'price_range')
        self.price_range = attributes[:'price_range']
      end

      if attributes.key?(:'primary_conversation_contact')
        self.primary_conversation_contact = attributes[:'primary_conversation_contact']
      end

      if attributes.key?(:'questions_and_answers')
        self.questions_and_answers = attributes[:'questions_and_answers']
      end

      if attributes.key?(:'rank_tracking_competitors')
        if (value = attributes[:'rank_tracking_competitors']).is_a?(Array)
          self.rank_tracking_competitors = value
        end
      end

      if attributes.key?(:'rank_tracking_enabled')
        self.rank_tracking_enabled = attributes[:'rank_tracking_enabled']
      end

      if attributes.key?(:'rank_tracking_frequency')
        self.rank_tracking_frequency = attributes[:'rank_tracking_frequency']
      end

      if attributes.key?(:'rank_tracking_query_templates')
        if (value = attributes[:'rank_tracking_query_templates']).is_a?(Array)
          self.rank_tracking_query_templates = value
        end
      end

      if attributes.key?(:'rank_tracking_sites')
        if (value = attributes[:'rank_tracking_sites']).is_a?(Array)
          self.rank_tracking_sites = value
        end
      end

      if attributes.key?(:'review_response_conversation_enabled')
        self.review_response_conversation_enabled = attributes[:'review_response_conversation_enabled']
      end

      if attributes.key?(:'routable_coordinate')
        self.routable_coordinate = attributes[:'routable_coordinate']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'toll_free_phone')
        self.toll_free_phone = attributes[:'toll_free_phone']
      end

      if attributes.key?(:'tty_phone')
        self.tty_phone = attributes[:'tty_phone']
      end

      if attributes.key?(:'walkable_coordinate')
        self.walkable_coordinate = attributes[:'walkable_coordinate']
      end

      if attributes.key?(:'website_url')
        self.website_url = attributes[:'website_url']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 5000
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 5000.')
      end

      if !@name.nil? && @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be great than or equal to 0.')
      end

      if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
        invalid_properties.push('invalid value for "alternate_phone", the character length must be great than or equal to 0.')
      end

      if !@description.nil? && @description.to_s.length > 15000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 15000.')
      end

      if !@description.nil? && @description.to_s.length < 10
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 10.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be great than or equal to 3.')
      end

      if !@facebook_name.nil? && @facebook_name.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_name", the character length must be great than or equal to 0.')
      end

      if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_override_city", the character length must be great than or equal to 0.')
      end

      if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_page_url", the character length must be great than or equal to 0.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.')
      end

      if !@fax.nil? && @fax.to_s.length < 0
        invalid_properties.push('invalid value for "fax", the character length must be great than or equal to 0.')
      end

      if !@geomodifier.nil? && @geomodifier.to_s.length < 0
        invalid_properties.push('invalid value for "geomodifier", the character length must be great than or equal to 0.')
      end

      if !@google_place_id.nil? && @google_place_id.to_s.length < 0
        invalid_properties.push('invalid value for "google_place_id", the character length must be great than or equal to 0.')
      end

      if !@google_website_override.nil? && @google_website_override.to_s.length < 0
        invalid_properties.push('invalid value for "google_website_override", the character length must be great than or equal to 0.')
      end

      if !@impressum.nil? && @impressum.to_s.length > 2000
        invalid_properties.push('invalid value for "impressum", the character length must be smaller than or equal to 2000.')
      end

      if !@impressum.nil? && @impressum.to_s.length < 0
        invalid_properties.push('invalid value for "impressum", the character length must be great than or equal to 0.')
      end

      if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
        invalid_properties.push('invalid value for "iso_region_code", the character length must be great than or equal to 0.')
      end

      if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "landing_page_url", the character length must be great than or equal to 0.')
      end

      if !@local_phone.nil? && @local_phone.to_s.length < 0
        invalid_properties.push('invalid value for "local_phone", the character length must be great than or equal to 0.')
      end

      if !@main_phone.nil? && @main_phone.to_s.length < 0
        invalid_properties.push('invalid value for "main_phone", the character length must be great than or equal to 0.')
      end

      if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
        invalid_properties.push('invalid value for "mobile_phone", the character length must be great than or equal to 0.')
      end

      if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
        invalid_properties.push('invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.')
      end

      if !@timezone.nil? && @timezone.to_s.length < 0
        invalid_properties.push('invalid value for "timezone", the character length must be great than or equal to 0.')
      end

      if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
        invalid_properties.push('invalid value for "toll_free_phone", the character length must be great than or equal to 0.')
      end

      if !@tty_phone.nil? && @tty_phone.to_s.length < 0
        invalid_properties.push('invalid value for "tty_phone", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 5000
      return false if !@name.nil? && @name.to_s.length < 0
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
      return false if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
      return false if !@description.nil? && @description.to_s.length > 15000
      return false if !@description.nil? && @description.to_s.length < 10
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
      return false if !@facebook_name.nil? && @facebook_name.to_s.length < 0
      return false if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
      return false if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
      return false if !@fax.nil? && @fax.to_s.length < 0
      return false if !@geomodifier.nil? && @geomodifier.to_s.length < 0
      return false if !@google_place_id.nil? && @google_place_id.to_s.length < 0
      return false if !@google_website_override.nil? && @google_website_override.to_s.length < 0
      return false if !@impressum.nil? && @impressum.to_s.length > 2000
      return false if !@impressum.nil? && @impressum.to_s.length < 0
      return false if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
      return false if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
      return false if !@local_phone.nil? && @local_phone.to_s.length < 0
      location_type_validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      return false unless location_type_validator.valid?(@location_type)
      return false if !@main_phone.nil? && @main_phone.to_s.length < 0
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
      price_range_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ONE", "TWO", "THREE", "FOUR"])
      return false unless price_range_validator.valid?(@price_range)
      return false if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
      rank_tracking_frequency_validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      return false unless rank_tracking_frequency_validator.valid?(@rank_tracking_frequency)
      return false if !@timezone.nil? && @timezone.to_s.length < 0
      return false if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
      return false if !@tty_phone.nil? && @tty_phone.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 5000
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 5000.'
      end

      if !name.nil? && name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_hours_text Value to be assigned
    def additional_hours_text=(additional_hours_text)
      if !additional_hours_text.nil? && additional_hours_text.to_s.length > 255
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.'
      end

      if !additional_hours_text.nil? && additional_hours_text.to_s.length < 0
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be great than or equal to 0.'
      end

      @additional_hours_text = additional_hours_text
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_names Value to be assigned
    def alternate_names=(alternate_names)
      @alternate_names = alternate_names
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_phone Value to be assigned
    def alternate_phone=(alternate_phone)
      if !alternate_phone.nil? && alternate_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "alternate_phone", the character length must be great than or equal to 0.'
      end

      @alternate_phone = alternate_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_websites Value to be assigned
    def alternate_websites=(alternate_websites)
      @alternate_websites = alternate_websites
    end

    # Custom attribute writer method with validation
    # @param [Object] category_ids Value to be assigned
    def category_ids=(category_ids)
      @category_ids = category_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_keywords Value to be assigned
    def custom_keywords=(custom_keywords)
      @custom_keywords = custom_keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 15000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 15000.'
      end

      if !description.nil? && description.to_s.length < 10
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 10.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_descriptor Value to be assigned
    def facebook_descriptor=(facebook_descriptor)
      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length > 75
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.'
      end

      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length < 3
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be great than or equal to 3.'
      end

      @facebook_descriptor = facebook_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_name Value to be assigned
    def facebook_name=(facebook_name)
      if !facebook_name.nil? && facebook_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_name", the character length must be great than or equal to 0.'
      end

      @facebook_name = facebook_name
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_override_city Value to be assigned
    def facebook_override_city=(facebook_override_city)
      if !facebook_override_city.nil? && facebook_override_city.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_override_city", the character length must be great than or equal to 0.'
      end

      @facebook_override_city = facebook_override_city
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_page_url Value to be assigned
    def facebook_page_url=(facebook_page_url)
      if !facebook_page_url.nil? && facebook_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_page_url", the character length must be great than or equal to 0.'
      end

      @facebook_page_url = facebook_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_vanity_url Value to be assigned
    def facebook_vanity_url=(facebook_vanity_url)
      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length > 50
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.'
      end

      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.'
      end

      @facebook_vanity_url = facebook_vanity_url
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length < 0
        fail ArgumentError, 'invalid value for "fax", the character length must be great than or equal to 0.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] frequently_asked_questions Value to be assigned
    def frequently_asked_questions=(frequently_asked_questions)
      @frequently_asked_questions = frequently_asked_questions
    end

    # Custom attribute writer method with validation
    # @param [Object] geomodifier Value to be assigned
    def geomodifier=(geomodifier)
      if !geomodifier.nil? && geomodifier.to_s.length < 0
        fail ArgumentError, 'invalid value for "geomodifier", the character length must be great than or equal to 0.'
      end

      @geomodifier = geomodifier
    end

    # Custom attribute writer method with validation
    # @param [Object] google_my_business_labels Value to be assigned
    def google_my_business_labels=(google_my_business_labels)
      @google_my_business_labels = google_my_business_labels
    end

    # Custom attribute writer method with validation
    # @param [Object] google_place_id Value to be assigned
    def google_place_id=(google_place_id)
      if !google_place_id.nil? && google_place_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_place_id", the character length must be great than or equal to 0.'
      end

      @google_place_id = google_place_id
    end

    # Custom attribute writer method with validation
    # @param [Object] google_website_override Value to be assigned
    def google_website_override=(google_website_override)
      if !google_website_override.nil? && google_website_override.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_website_override", the character length must be great than or equal to 0.'
      end

      @google_website_override = google_website_override
    end

    # Custom attribute writer method with validation
    # @param [Object] impressum Value to be assigned
    def impressum=(impressum)
      if !impressum.nil? && impressum.to_s.length > 2000
        fail ArgumentError, 'invalid value for "impressum", the character length must be smaller than or equal to 2000.'
      end

      if !impressum.nil? && impressum.to_s.length < 0
        fail ArgumentError, 'invalid value for "impressum", the character length must be great than or equal to 0.'
      end

      @impressum = impressum
    end

    # Custom attribute writer method with validation
    # @param [Object] iso_region_code Value to be assigned
    def iso_region_code=(iso_region_code)
      if !iso_region_code.nil? && iso_region_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "iso_region_code", the character length must be great than or equal to 0.'
      end

      @iso_region_code = iso_region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] keywords Value to be assigned
    def keywords=(keywords)
      @keywords = keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] labels Value to be assigned
    def labels=(labels)
      @labels = labels
    end

    # Custom attribute writer method with validation
    # @param [Object] landing_page_url Value to be assigned
    def landing_page_url=(landing_page_url)
      if !landing_page_url.nil? && landing_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "landing_page_url", the character length must be great than or equal to 0.'
      end

      @landing_page_url = landing_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] local_phone Value to be assigned
    def local_phone=(local_phone)
      if !local_phone.nil? && local_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "local_phone", the character length must be great than or equal to 0.'
      end

      @local_phone = local_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_type Object to be assigned
    def location_type=(location_type)
      validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      unless validator.valid?(location_type)
        fail ArgumentError, "invalid value for \"location_type\", must be one of #{validator.allowable_values}."
      end
      @location_type = location_type
    end

    # Custom attribute writer method with validation
    # @param [Object] main_phone Value to be assigned
    def main_phone=(main_phone)
      if !main_phone.nil? && main_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "main_phone", the character length must be great than or equal to 0.'
      end

      @main_phone = main_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)
      if !mobile_phone.nil? && mobile_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "mobile_phone", the character length must be great than or equal to 0.'
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_range Object to be assigned
    def price_range=(price_range)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ONE", "TWO", "THREE", "FOUR"])
      unless validator.valid?(price_range)
        fail ArgumentError, "invalid value for \"price_range\", must be one of #{validator.allowable_values}."
      end
      @price_range = price_range
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_conversation_contact Value to be assigned
    def primary_conversation_contact=(primary_conversation_contact)
      if !primary_conversation_contact.nil? && primary_conversation_contact.to_s.length < 0
        fail ArgumentError, 'invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.'
      end

      @primary_conversation_contact = primary_conversation_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] rank_tracking_competitors Value to be assigned
    def rank_tracking_competitors=(rank_tracking_competitors)
      @rank_tracking_competitors = rank_tracking_competitors
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rank_tracking_frequency Object to be assigned
    def rank_tracking_frequency=(rank_tracking_frequency)
      validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      unless validator.valid?(rank_tracking_frequency)
        fail ArgumentError, "invalid value for \"rank_tracking_frequency\", must be one of #{validator.allowable_values}."
      end
      @rank_tracking_frequency = rank_tracking_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] timezone Value to be assigned
    def timezone=(timezone)
      if !timezone.nil? && timezone.to_s.length < 0
        fail ArgumentError, 'invalid value for "timezone", the character length must be great than or equal to 0.'
      end

      @timezone = timezone
    end

    # Custom attribute writer method with validation
    # @param [Object] toll_free_phone Value to be assigned
    def toll_free_phone=(toll_free_phone)
      if !toll_free_phone.nil? && toll_free_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "toll_free_phone", the character length must be great than or equal to 0.'
      end

      @toll_free_phone = toll_free_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] tty_phone Value to be assigned
    def tty_phone=(tty_phone)
      if !tty_phone.nil? && tty_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "tty_phone", the character length must be great than or equal to 0.'
      end

      @tty_phone = tty_phone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          meta == o.meta &&
          name == o.name &&
          address == o.address &&
          access_hours == o.access_hours &&
          additional_hours_text == o.additional_hours_text &&
          alternate_names == o.alternate_names &&
          alternate_phone == o.alternate_phone &&
          alternate_websites == o.alternate_websites &&
          category_ids == o.category_ids &&
          closed == o.closed &&
          custom_keywords == o.custom_keywords &&
          description == o.description &&
          display_coordinate == o.display_coordinate &&
          drive_through_hours == o.drive_through_hours &&
          dropoff_coordinate == o.dropoff_coordinate &&
          facebook_call_to_action == o.facebook_call_to_action &&
          facebook_cover_photo == o.facebook_cover_photo &&
          facebook_descriptor == o.facebook_descriptor &&
          facebook_name == o.facebook_name &&
          facebook_override_city == o.facebook_override_city &&
          facebook_page_url == o.facebook_page_url &&
          facebook_profile_photo == o.facebook_profile_photo &&
          facebook_vanity_url == o.facebook_vanity_url &&
          fax == o.fax &&
          featured_message == o.featured_message &&
          frequently_asked_questions == o.frequently_asked_questions &&
          geomodifier == o.geomodifier &&
          google_attributes == o.google_attributes &&
          google_cover_photo == o.google_cover_photo &&
          google_my_business_labels == o.google_my_business_labels &&
          google_place_id == o.google_place_id &&
          google_profile_photo == o.google_profile_photo &&
          google_website_override == o.google_website_override &&
          holiday_hours_conversation_enabled == o.holiday_hours_conversation_enabled &&
          hours == o.hours &&
          impressum == o.impressum &&
          iso_region_code == o.iso_region_code &&
          keywords == o.keywords &&
          labels == o.labels &&
          landing_page_url == o.landing_page_url &&
          local_phone == o.local_phone &&
          located_in == o.located_in &&
          location_type == o.location_type &&
          logo == o.logo &&
          main_phone == o.main_phone &&
          mobile_phone == o.mobile_phone &&
          nudge_enabled == o.nudge_enabled &&
          pickup_coordinate == o.pickup_coordinate &&
          price_range == o.price_range &&
          primary_conversation_contact == o.primary_conversation_contact &&
          questions_and_answers == o.questions_and_answers &&
          rank_tracking_competitors == o.rank_tracking_competitors &&
          rank_tracking_enabled == o.rank_tracking_enabled &&
          rank_tracking_frequency == o.rank_tracking_frequency &&
          rank_tracking_query_templates == o.rank_tracking_query_templates &&
          rank_tracking_sites == o.rank_tracking_sites &&
          review_response_conversation_enabled == o.review_response_conversation_enabled &&
          routable_coordinate == o.routable_coordinate &&
          timezone == o.timezone &&
          toll_free_phone == o.toll_free_phone &&
          tty_phone == o.tty_phone &&
          walkable_coordinate == o.walkable_coordinate &&
          website_url == o.website_url
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [meta, name, address, access_hours, additional_hours_text, alternate_names, alternate_phone, alternate_websites, category_ids, closed, custom_keywords, description, display_coordinate, drive_through_hours, dropoff_coordinate, facebook_call_to_action, facebook_cover_photo, facebook_descriptor, facebook_name, facebook_override_city, facebook_page_url, facebook_profile_photo, facebook_vanity_url, fax, featured_message, frequently_asked_questions, geomodifier, google_attributes, google_cover_photo, google_my_business_labels, google_place_id, google_profile_photo, google_website_override, holiday_hours_conversation_enabled, hours, impressum, iso_region_code, keywords, labels, landing_page_url, local_phone, located_in, location_type, logo, main_phone, mobile_phone, nudge_enabled, pickup_coordinate, price_range, primary_conversation_contact, questions_and_answers, rank_tracking_competitors, rank_tracking_enabled, rank_tracking_frequency, rank_tracking_query_templates, rank_tracking_sites, review_response_conversation_enabled, routable_coordinate, timezone, toll_free_phone, tty_phone, walkable_coordinate, website_url].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
