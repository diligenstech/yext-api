=begin
#Yext Admin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  class AvailableService
    attr_accessor :sku

    # The ID for the agreement that this service is offered under.
    attr_accessor :agreement_id

    # Information about this service.
    attr_accessor :service_description

    # Recipient type of the service. Only shown with `v` parameters `20210318` and later.
    attr_accessor :recipient_type

    # Optional. The minimum amount of time a service has to be active before it can be canceled. In the units specified by *minimumUsageUnit*.
    attr_accessor :minimum_usage

    # Optional. The unit for *minimumUsage*.
    attr_accessor :minimum_usage_unit

    # Optional. List of SKUs that this is an add-on to.  When adding this service for a location by creating an *addRequest*, you must either supply one of these SKUs along with this one, or the location must already have one of these services. 
    attr_accessor :add_on_to

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'sku' => :'sku',
        :'agreement_id' => :'agreementId',
        :'service_description' => :'serviceDescription',
        :'recipient_type' => :'recipientType',
        :'minimum_usage' => :'minimumUsage',
        :'minimum_usage_unit' => :'minimumUsageUnit',
        :'add_on_to' => :'addOnTo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'sku' => :'String',
        :'agreement_id' => :'Integer',
        :'service_description' => :'String',
        :'recipient_type' => :'String',
        :'minimum_usage' => :'Integer',
        :'minimum_usage_unit' => :'String',
        :'add_on_to' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::AvailableService` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::AvailableService`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'sku')
        self.sku = attributes[:'sku']
      end

      if attributes.key?(:'agreement_id')
        self.agreement_id = attributes[:'agreement_id']
      end

      if attributes.key?(:'service_description')
        self.service_description = attributes[:'service_description']
      end

      if attributes.key?(:'recipient_type')
        self.recipient_type = attributes[:'recipient_type']
      end

      if attributes.key?(:'minimum_usage')
        self.minimum_usage = attributes[:'minimum_usage']
      end

      if attributes.key?(:'minimum_usage_unit')
        self.minimum_usage_unit = attributes[:'minimum_usage_unit']
      end

      if attributes.key?(:'add_on_to')
        if (value = attributes[:'add_on_to']).is_a?(Array)
          self.add_on_to = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@minimum_usage.nil? && @minimum_usage < 1
        invalid_properties.push('invalid value for "minimum_usage", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      recipient_type_validator = EnumAttributeValidator.new('String', ["Location", "Sub-Account"])
      return false unless recipient_type_validator.valid?(@recipient_type)
      return false if !@minimum_usage.nil? && @minimum_usage < 1
      minimum_usage_unit_validator = EnumAttributeValidator.new('String', ["DAYS", "MONTHS"])
      return false unless minimum_usage_unit_validator.valid?(@minimum_usage_unit)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recipient_type Object to be assigned
    def recipient_type=(recipient_type)
      validator = EnumAttributeValidator.new('String', ["Location", "Sub-Account"])
      unless validator.valid?(recipient_type)
        fail ArgumentError, "invalid value for \"recipient_type\", must be one of #{validator.allowable_values}."
      end
      @recipient_type = recipient_type
    end

    # Custom attribute writer method with validation
    # @param [Object] minimum_usage Value to be assigned
    def minimum_usage=(minimum_usage)
      if !minimum_usage.nil? && minimum_usage < 1
        fail ArgumentError, 'invalid value for "minimum_usage", must be greater than or equal to 1.'
      end

      @minimum_usage = minimum_usage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] minimum_usage_unit Object to be assigned
    def minimum_usage_unit=(minimum_usage_unit)
      validator = EnumAttributeValidator.new('String', ["DAYS", "MONTHS"])
      unless validator.valid?(minimum_usage_unit)
        fail ArgumentError, "invalid value for \"minimum_usage_unit\", must be one of #{validator.allowable_values}."
      end
      @minimum_usage_unit = minimum_usage_unit
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          sku == o.sku &&
          agreement_id == o.agreement_id &&
          service_description == o.service_description &&
          recipient_type == o.recipient_type &&
          minimum_usage == o.minimum_usage &&
          minimum_usage_unit == o.minimum_usage_unit &&
          add_on_to == o.add_on_to
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [sku, agreement_id, service_description, recipient_type, minimum_usage, minimum_usage_unit, add_on_to].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
