=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  class CreatePost
    # ID(s) of the entities to post for
    attr_accessor :entity_ids

    # The publisher the post should be sent to. 
    attr_accessor :publisher

    # Whether or not the post(s) must be manually approved within Yext. Defaults to **false**.
    attr_accessor :requires_approval

    # The copy to be featured on the post. Character limits vary per publisher. Please refer to the following character limits: * Google Business Profile: 1500 * Facebook: 5000 * First Party: 5000 
    attr_accessor :text

    # Url included with the post.
    attr_accessor :clickthrough_url

    # List of publicly accessible URLs where the photos can be retrieved from.  **NOTE**: Currently only supports one photo. 
    attr_accessor :photo_urls

    # If the post should be scheduled for some time in the future, specify a postDate in the future here. Formatted as datetime in `YYYY-MM-DD HH:MM:SS`. Ex: 2021-04-06 08:45:00. The timezone for the provided datetime will be UTC. 
    attr_accessor :post_date

    # The topicType of the post. Only supported on Google posts.
    attr_accessor :topic_type

    # The type of alert the post is created for.  **NOTE**: This field is only applicable for posts of topicType `ALERT`, and behaves as a sub-type of Alerts. Only supported on Google posts. 
    attr_accessor :alert_type

    # The actionType of the post. Required for Google posts that include a clickthroughUrl. Only supported on Google posts. 
    attr_accessor :call_to_action_type

    attr_accessor :event_info

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'entity_ids' => :'entityIds',
        :'publisher' => :'publisher',
        :'requires_approval' => :'requiresApproval',
        :'text' => :'text',
        :'clickthrough_url' => :'clickthroughUrl',
        :'photo_urls' => :'photoUrls',
        :'post_date' => :'postDate',
        :'topic_type' => :'topicType',
        :'alert_type' => :'alertType',
        :'call_to_action_type' => :'callToActionType',
        :'event_info' => :'eventInfo'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'entity_ids' => :'Array<String>',
        :'publisher' => :'String',
        :'requires_approval' => :'Boolean',
        :'text' => :'String',
        :'clickthrough_url' => :'String',
        :'photo_urls' => :'Array<String>',
        :'post_date' => :'String',
        :'topic_type' => :'String',
        :'alert_type' => :'String',
        :'call_to_action_type' => :'String',
        :'event_info' => :'EventInfo'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::CreatePost` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::CreatePost`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'entity_ids')
        if (value = attributes[:'entity_ids']).is_a?(Array)
          self.entity_ids = value
        end
      end

      if attributes.key?(:'publisher')
        self.publisher = attributes[:'publisher']
      end

      if attributes.key?(:'requires_approval')
        self.requires_approval = attributes[:'requires_approval']
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'clickthrough_url')
        self.clickthrough_url = attributes[:'clickthrough_url']
      end

      if attributes.key?(:'photo_urls')
        if (value = attributes[:'photo_urls']).is_a?(Array)
          self.photo_urls = value
        end
      end

      if attributes.key?(:'post_date')
        self.post_date = attributes[:'post_date']
      end

      if attributes.key?(:'topic_type')
        self.topic_type = attributes[:'topic_type']
      end

      if attributes.key?(:'alert_type')
        self.alert_type = attributes[:'alert_type']
      end

      if attributes.key?(:'call_to_action_type')
        self.call_to_action_type = attributes[:'call_to_action_type']
      end

      if attributes.key?(:'event_info')
        self.event_info = attributes[:'event_info']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @entity_ids.nil?
        invalid_properties.push('invalid value for "entity_ids", entity_ids cannot be nil.')
      end

      if @publisher.nil?
        invalid_properties.push('invalid value for "publisher", publisher cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @entity_ids.nil?
      return false if @publisher.nil?
      publisher_validator = EnumAttributeValidator.new('String', ["FACEBOOK", "FIRSTPARTY", "GOOGLEMYBUSINESS"])
      return false unless publisher_validator.valid?(@publisher)
      topic_type_validator = EnumAttributeValidator.new('String', ["ALERT", "EVENT", "STANDARD"])
      return false unless topic_type_validator.valid?(@topic_type)
      alert_type_validator = EnumAttributeValidator.new('String', ["ALERT_TYPE_UNSPECIFIED", "COVID_19"])
      return false unless alert_type_validator.valid?(@alert_type)
      call_to_action_type_validator = EnumAttributeValidator.new('String', ["BOOK", "CALL", "LEARN_MORE", "ORDER", "SHOP", "SIGN_UP"])
      return false unless call_to_action_type_validator.valid?(@call_to_action_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] publisher Object to be assigned
    def publisher=(publisher)
      validator = EnumAttributeValidator.new('String', ["FACEBOOK", "FIRSTPARTY", "GOOGLEMYBUSINESS"])
      unless validator.valid?(publisher)
        fail ArgumentError, "invalid value for \"publisher\", must be one of #{validator.allowable_values}."
      end
      @publisher = publisher
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] topic_type Object to be assigned
    def topic_type=(topic_type)
      validator = EnumAttributeValidator.new('String', ["ALERT", "EVENT", "STANDARD"])
      unless validator.valid?(topic_type)
        fail ArgumentError, "invalid value for \"topic_type\", must be one of #{validator.allowable_values}."
      end
      @topic_type = topic_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] alert_type Object to be assigned
    def alert_type=(alert_type)
      validator = EnumAttributeValidator.new('String', ["ALERT_TYPE_UNSPECIFIED", "COVID_19"])
      unless validator.valid?(alert_type)
        fail ArgumentError, "invalid value for \"alert_type\", must be one of #{validator.allowable_values}."
      end
      @alert_type = alert_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] call_to_action_type Object to be assigned
    def call_to_action_type=(call_to_action_type)
      validator = EnumAttributeValidator.new('String', ["BOOK", "CALL", "LEARN_MORE", "ORDER", "SHOP", "SIGN_UP"])
      unless validator.valid?(call_to_action_type)
        fail ArgumentError, "invalid value for \"call_to_action_type\", must be one of #{validator.allowable_values}."
      end
      @call_to_action_type = call_to_action_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          entity_ids == o.entity_ids &&
          publisher == o.publisher &&
          requires_approval == o.requires_approval &&
          text == o.text &&
          clickthrough_url == o.clickthrough_url &&
          photo_urls == o.photo_urls &&
          post_date == o.post_date &&
          topic_type == o.topic_type &&
          alert_type == o.alert_type &&
          call_to_action_type == o.call_to_action_type &&
          event_info == o.event_info
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [entity_ids, publisher, requires_approval, text, clickthrough_url, photo_urls, post_date, topic_type, alert_type, call_to_action_type, event_info].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
