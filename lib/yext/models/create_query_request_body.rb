=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  class CreateQueryRequestBody
    # Fields to return in request e.g. `\"fields\":[\"eventTimestamp\",\"accountId\"]`.<br><br> This field is optional and will return all fields if no fields are specified. All fields can also be explicitly specified as follows: `\"fields\" : [\"*\"]`
    attr_accessor :fields

    # Maximum number of records to return in request e.g. `\"pageSize\":100`.<br><br> This field is optional and will be set to 50 records if no pageSize is specified. pageSize supports a max 1,000 records. If query returns greater than pageSize specified, additional records require pagination.
    attr_accessor :page_size

    # Order of records are returned based on timestamp e.g. `\"descending\": true`.<br><br> This field is optional and will return records in ascending order if not specified.
    attr_accessor :descending

    # Filter to apply to request e.g. `\"filter\": \"eventTimestamp < '2022-03-10T12:23:23.800Z'\"` <br><br> Filter Operators supported by Logs API: * **`&&`**: Combines multiple filter operators together. Records returned must satisfy both filters. <ul><li> Example: `\"filter\": \"searchTerm.containsAnyCase(’hello') && visitor.id == '3523168'\"`</ul> * **`||`**: Combines multiple filter operators together. Records returned must satisfy either filter.<ul><li> Example: `\"filter\": \"searchTerm.containsAnyCase(’hello') || visitor.id == '3523168'\"`</ul> * **`==`**: Returns records where field equals value.<ul><li> Example: `searchTerm == ‘branches near me’`</ul> * **`!=`**: Returns records where field does not equal value.<ul><li> Example: `searchTerm != ‘branches near me’`</ul> * **`<`**: Returns records where field is less than value.<ul><li> Example: `\"filter\": \"eventTimestamp < '2022-03-10T12:23:23.800Z'\"`</ul> * **`>`**: Returns records where field is greater than value.<ul><li> Example: `\"filter\": \"eventTimestamp > '2022-03-10T12:23:23.800Z'\"`</ul> * **`<=`**: Returns records where field is less than or equal value.<ul><li> Example: `\"filter\": \"eventTimestamp <= '2022-03-10T12:23:23.800Z'\"`</ul> * **`>=`**: Returns records where field is greater than or equal value.<ul><li> Example: `\"filter\": \"eventTimestamp >= '2022-03-10T12:23:23.800Z'\"`</ul> * **`has`**: Returns records where field is not null.<ul><li> Example: `\"filter\": \"has(visitor.id)\"`</ul> * **`!has`**: Returns records where field is null.<ul><li> Example:  `\"filter\": \"!has(visitor.id)\"`</ul> * **`in`**: Returns records where field equals value(s) in array.<ul><li> Example: `\"filter\": \"searchTerm in ['bank holiday','branches near me']\"`</ul> * **`!in`**: Returns records where field does not equal value(s) in array.<ul><li> Example: `!(searchTerm in ['bank holiday','branches near me'])`</ul> * **`{FIELD}.containsAnyCase`**: Returns records where value exists in string field.<ul><li> Example: `\"filter\": \"searchTerm.containsAnyCase(’hello')\"`</ul> * **`!{FIELD}.containsAnyCase`**: Returns records where value does not exist in string field.<ul><li> Example: `\"filter\": \"!searchTerm.containsAnyCase(’hello')\"`</ul>  <br>This field is optional and will apply no filters if no filters are specified. 
    attr_accessor :filter

    # Token for paginating queries which return more records than the pageSize specified e.g. `\"pageToken\": \"BeYwVgOhe_fEz9VhfSES4GPDt6jElk7AHN6plsP_TLXk27rlG0YyYc78AOI_oyILcw\"`.<br><br> This is optional and should only be used when your query returns more records than your pageSize (indicated by the nextPageToken being returned in your response body.)
    attr_accessor :page_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fields' => :'fields',
        :'page_size' => :'pageSize',
        :'descending' => :'descending',
        :'filter' => :'filter',
        :'page_token' => :'pageToken'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fields' => :'Array<String>',
        :'page_size' => :'Float',
        :'descending' => :'Boolean',
        :'filter' => :'String',
        :'page_token' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::CreateQueryRequestBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::CreateQueryRequestBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fields')
        if (value = attributes[:'fields']).is_a?(Array)
          self.fields = value
        end
      end

      if attributes.key?(:'page_size')
        self.page_size = attributes[:'page_size']
      end

      if attributes.key?(:'descending')
        self.descending = attributes[:'descending']
      end

      if attributes.key?(:'filter')
        self.filter = attributes[:'filter']
      end

      if attributes.key?(:'page_token')
        self.page_token = attributes[:'page_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fields == o.fields &&
          page_size == o.page_size &&
          descending == o.descending &&
          filter == o.filter &&
          page_token == o.page_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fields, page_size, descending, filter, page_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
