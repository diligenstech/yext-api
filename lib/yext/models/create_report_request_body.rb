=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class CreateReportRequestBody
    # The kinds of data the report should include. Specify up to 10 values.  * **`ANSWERS_CASE_DEFLECTIONS`**: The number of times a user started their journey but did not create a case. * **`ANSWERS_CASE_DEFLECTION_RATE`**: Percentage of cases that were deflected by Support Search. * **`ANSWERS_CASE_STARTS`**: The number of times a user started their journey with search. * **`ANSWERS_CASE_SUBMITS`**: The number of times a user started their journey with search and submitted a case. * **`ANSWERS_CLICKS`**: The number of times content has been clicked. * **`ANSWERS_CLICK_THROUGH_RATE`**: Percentage of Searches with a click, rounded to the 1’s place, e.g. `67.96% → 68%`. CTR = Searches with Click / Searches. * **`ANSWERS_CLUSTERS`**: Distinct count of Clusters. * **`ANSWERS_KG_RESULT_RATE`**: Percentage of Searches where a Knowledge Graph Result was returned. * **`ANSWERS_PERCENTAGE_OF_TOTAL_SEARCHES`**: Percentage of Answers Searches a given dimension(s) represents based on the dimension(s) and filter(s) selected e.g. Percentage of Searches by Search Term where Version Label = PRODUCTION. * **`ANSWERS_SEARCHES`**: The number of times a user ran a Search. * **`ANSWERS_SEARCHES_WITH_CLICKS`**: The number of times a user ran a Search and clicked a link. * **`ANSWERS_SEARCHES_WITH_KG_RESULTS`**: The number of times a user ran a Search that returned Knowledge Graph Results. * **`ANSWERS_SEARCH_TERMS`**: Distinct count of Search Terms. * **`ANSWERS_SESSIONS`**: The number of times a Session was started. A Session begins on user’s first search and ends when user closes the browser. * **`ANSWERS_THUMBS_DOWN_EVENTS`**: The number of times Thumbs Down has been clicked. * **`ANSWERS_THUMBS_UP_EVENTS`**: The number of times Thumbs Up has been clicked. * **`ANSWERS_VOICE_SEARCHES`**: The number of searches made using voice search. * **`AVERAGE_RATING`**: The cumulative average of the ratings your business has received. * **`BING_SEARCHES`**: The number of times your listings were included in Bing search results. Because Bing sends data for full weeks rather than individual days, **`dimensions`** cannot contain `DAYS`, `MONTHS`, or `MONTHS_RETAIL` if `BING_SEARCHES` is in **`metrics`**. Also, reports with `BING_SEARCHES` have different reporting maximum dates than reports with other metrics. * **`CLICKS`**: The number of times consumers clicked on your online properties. * **`CONVERSIONS`**: The number of conversions based on the methodology you selected. * **`CONVERSION_RATE`**: Conversions divided by clicks. * **`CONVERSION_SEARCHES`**: The number of Answers Searches with a Click. * **`CONVERSION_VALUE`**: The monetary impact of your conversions. * **`CUMULATIVE_RATING`**: Average review rating of Competitors. * **`DUPLICATES_DETECTED`**: Count of all duplicates detected. * **`DUPLICATES_SUPPRESSED`**: Count of all duplicates suppressed. * **`EVENT_PROFILEVIEWS`**: The number of times a consumer has seen your full event listing profile on a publisher site, either by clicking on your event listing from a search on the publisher site or from another search engine. * **`EVENT_SEARCHES`**: The number of times a consumer has run a search and seen your event listing in the search result on a Yext Listings Publisher site. * **`FACEBOOK_CHECKINS`**: The total number of consumers who have checked into your business, along with the people tagged as being with them when checking in. * **`FACEBOOK_CTA_CLICKS`**: The total number of clicks on your Page CTA button by people who are logged in to Facebook. * **`FACEBOOK_EVENT_NEW_RSVPS`**: The number of new RSVPs to your Facebook event. * **`FACEBOOK_IMPRESSIONS`**: The total number of impressions seen of any content associated with your Page. * **`FACEBOOK_LIKES`**: The number of consumers who have \"liked\" your Page. * **`FACEBOOK_PAGE_VIEWS`**: The total number of times your Page has been viewed. * **`FACEBOOK_POST_IMPRESSIONS`**: The number of impressions for your Page post. * **`FACEBOOK_TALKING_ABOUT`**: The number of unique consumers who had an interaction with your Page. For an interaction to be included in this total, it must result in a story being posted to the newsfeeds of those consumers' friends. Examples of these interactions include, but are not limited to, sharing a post on your Page, liking your Page, or tagging your location in a photo. * **`FACEBOOK_WERE_HERE`**: The total number of consumers who have checked into your business on Facebook, along with the people tagged as being with them when checking in. * **`FEATURED_MESSAGE_CLICKS`**: The number of times consumers clicked on your Featured Messsage. Does not include Featured Messages on Yelp, Facebook, Bing, or Google. * **`FOURSQUARE_DAILY_CHECKINS`**: The number of consumers who checked into your business on Foursquare on a given date. * **`GOOGLE_CUSTOMER_ACTIONS`**: The number of times consumers called your business, got driving directions to your business, or visited your website via the links in your Google listings. * **`GOOGLE_MAP_VIEWS`**: The number of times your listings were viewed on Google Maps. * **`GOOGLE_PHONE_CALLS`**: The number of times consumers called your business by clicking your phone number in your Google listings during the past 90 days. You must use the `GOOGLE_PHONE_CALL_HOURS` dimension with this metric. * **`GOOGLE_SEARCH_QUERIES`**: The number of times your listings appeared in search results on either Google Search or Google Maps. * **`GOOGLE_SEARCH_VIEWS`**: The number of times your listings were viewed on Google Search. * **`GOOGLE_USER_PHOTOS`**: The number of photos uploaded by Google users (consumers) to your Google listing. * **`GSC_CLICKS`**: The number of times a user clicked through to your Pages from anywhere on the Google Search results page. * **`GSC_CTR`**: The percentage of time users clicked on links to your Pages when they appeared in search results on Google. * **`GSC_IMPRESSIONS`**: The number of times a link to your Pages has appeared anywhere on a Google Search result page. * **`GSC_POSITION`**: The average position of your highest ranking Pages result when they appeared in search results on Google. * **`INSTAGRAM_POSTS`**: *NOTE: This metric is deprecated.* The number of times consumers posted Instagram content geotagged at your business. * **`IST_AD_MATCHES`**: The total number of ads matched to the location or one of its competitors. * **`IST_AD_PRESENCE`**: The percentage of searches in which at least one ad appeared for the location or one of its competitors. * **`IST_AVERAGE_FIRST_LOCAL_PACK_MATCH_POSITION`**: The average position of the first match in the local pack in the search engine results page if one exists. * **`IST_AVERAGE_FIRST_MATCH_POSITION`**: The average position of the first match in either the local pack or organic results in the search engine results page if one exists. * **`IST_AVERAGE_FIRST_ORGANIC_MATCH_POSITION`**: The average position of the first match in the organic results in the search engine results page if one exists. * **`IST_AVERAGE_LOCAL_PACK_NUMBER_OF_RESULTS`**: The average number of results in the local pack when it appears in a search engine results page. * **`IST_AVERAGE_LOCAL_PACK_POSITION`**: The average position of the local pack when it appears in a search engine results page. * **`IST_KNOWLEDGE_CARD_EXISTED`**: The percentage of times a knowledge card showed up in search results. * **`IST_LOCAL_PACK_EXISTED`**: The percentage of times a local pack showed up in search results. * **`IST_LOCAL_PACK_PRESENCE`**: The percentage of times your business appears in a local pack when one was shown. * **`IST_LOCAL_PACK_SHARE_OF_SEARCH`**: The share of search for all local pack matches in the search engine results page. * **`IST_MATCHES_PER_SEARCH`**: The total number of matches on the first page of the search engine results. * **`IST_ORGANIC_SHARE_OF_SEARCH`**: The share of search for all organic matches in the search engine results page. * **`IST_SEARCH_REQUESTS`**: The number of search requests that were successfully analyzed. * **`IST_SHARE_OF_INTELLIGENT_SEARCH`**: The share of search for all matches in the search engine results page. * **`IST_TOTAL_MATCHES`**: The total number of matches on the first page of the search engine results. * **`KEYWORD_MENTIONS`**: The number of times a review keyword is mentioned. * **`KEYWORD_SENTIMENT`**: The sentiment score of review keywords. * **`LISTINGS_LIVE`**: Count of new listings live. * **`NEW_REVIEWS`**: The number of new reviews your business has received. * **`POWERLISTINGS_LIVE`**: The total number of your listings that were live. * **`PROFILE_UPDATES`**: Count of updates to your Yext profile. * **`PROFILE_VIEWS`**: The number of times your listings were viewed. Does not include listings on Yelp, Bing, or Google. * **`PUBLISHER_SUGGESTIONS`**: Count of all publisher suggestions. * **`RESPONSE_COUNT`**: The number of reviews with responses on publishers that support in-platform response. * **`RESPONSE_RATE`**: The percentage of reviews with responses on publishers that support in-platform response. * **`RESPONSE_TIME`**: The average time in hours between the review date and the response date of all reviews with responses that can be responded to in the platform. * **`SEARCHES`**: The number of times your listings were included in search results. Does not include search results on Yelp, Facebook, Bing, or Google. * **`SESSIONS`**: The number of Answers Sessions with a Click. * **`SOCIAL_ACTIVITIES`**: Count of all new social posts. * **`ST_EVENT_MATCHES_PER_SEARCH`**: Matches per Search for Events. * **`ST_EVENT_RICH_RESULT_PRESENCE`**: The percentage of time your event appeared in an event rich result when one was shown. * **`ST_EVENT_SHARE_OF_INTELLIGENT_SEARCH`**: Share of Intelligent Search for your Events. * **`STOREPAGES_CALLTOACTIONCLICKS`**: The number of times someone clicked a call to action on your Store Pages. * **`STOREPAGES_CLICKSTOWEBSITE`**: The number of times someone clicked to go to your website from your Store Pages. * **`STOREPAGES_DRIVINGDIRECTIONS`**: The number of times someone clicked for directions on your Store Pages. * **`STOREPAGES_EVENT_eventtype`**: The number of times the Store Pages custom event occurred. Replace \"eventtype\" with the custom event name. * **`STOREPAGES_PAGEVIEWS`**: The number of page views on your Store Pages. * **`STOREPAGES_PHONECALLS`**: The number of times someone clicked to make a phone call from your Store Pages. * **`STOREPAGES_SESSIONS`**: The number of unique visitors (sessions) to your Store Pages. * **`TICKET_CLICKS`**: Clicks to a button that allows users to get tickets. * **`TOTAL_LISTINGS_IMPRESSIONS`**: The number of times your listing appeared in search results across Google Maps, Google Search, Bing, Facebook, and the broader network. * **`VALUE_PER_CONVERSION`**: Total conversion value divided by the number of conversions. * **`WIDGETS_REVIEWS_VIEWS`**: The number of views of embedded 'widgets' containing reviews. * **`YELP_CUSTOMER_ACTIONS`**: The number of times consumers called your business, got driving directions to your business, or visited your website via the links in your Yelp listings. * **`YELP_PAGE_VIEWS`**: The number of times your listings on Yelp (\"pages\") were viewed. 
    attr_accessor :metrics

    # Determines how the data will be grouped. Specify up to 3 values. <br><br> **NOTES:** <br> You can only use one time-based dimension (e.g., `DAYS`, `WEEKS`) per report. <br> You can only use one location-based dimension (e.g., `FOLDER_IDS`, `LOCATION_NAMES`) per report. <br><br> * **`ACCOUNT_IDS`**: Identify events by sub-account. * **`AGE`**: The age range of a Facebook user. Can be used with `FACEBOOK_LIKES`, `FACEBOOK_TALKING_ABOUT`, `FACEBOOK_CHECKINS`, `FACEBOOK_IMPRESSIONS`, and `FACEBOOK_PAGE_VIEWS`. * **`ANSWERS_BACKEND`**: Backend(s) used to return results. Currently includes: <ul><li>`Algolia`<li>`Bing CSE`<li>`Custom Covid Backend`<li>`Knowledge Manager`<li>`Google CSE`<li>`Zendesk`</ul> Can only be used with Answers metrics. * **`ANSWERS_BLANK_SEARCH_TERM`**: Indicates whether no Search Term was entered for Search. * **`ANSWERS_CLICK_LABEL`**: Label assigned to CTA_CLICK types. * **`ANSWERS_CLICK_TYPE`**: Type of Click. Can only be used with Answers metrics. * **`ANSWERS_CLICK_URL`**: URL user was sent to on click, e.g. Google Maps on Driving Directions click. * **`ANSWERS_CLUSTER`**: Name of the Cluster a Search Term belongs to. Search Term Clusters are named by using the most popular Search Term (based on Sessions) within the Cluster. * **`ANSWERS_CONFIGURATION_VERSION`**: Version Number of Configuration used to run the Search. Can only be used with Answers metrics. * **`ANSWERS_CONFIGURATION_VERSION_LABEL`**: Version Label of Configuration used to run the Search. Can only be used with Answers metrics. * **`ANSWERS_DIRECT_ANSWER_CLICK`**: Indicates whether a click was from Direct Answer. * **`ANSWERS_DIRECT_ANSWER_FIELD`**: Field returned in Direct Answer. * **`ANSWERS_DIRECT_ANSWER_FIELD_TYPE`**: Type of Field used for Direct Answer returned for a Search. * **`ANSWERS_DIRECT_ANSWER_FIELD_VALUE`**: Value returned in Direct Answer. * **`ANSWERS_DIRECT_ANSWER_TYPE`**: Type of Direct Answers returned for a Search. * **`ANSWERS_EXPERIENCE`**: Name of Answers Experience. Can only be used with Answers metrics. * **`ANSWERS_EXPERIENCE_KEY`**: Key of Answers Experience. Can only be used with Answers metrics. * **`ANSWERS_FILTER_KEY`**: Field from the Knowledge Graph which Search filtered on. * **`ANSWERS_FILTER_OPERATOR`**: Operator used for filter. * **`ANSWERS_FILTER_SOURCE`**: Source of filter applied to Search. * **`ANSWERS_FILTER_TYPE`**: Type of filter applied. * **`ANSWERS_FILTER_VALUE`**: Value used to filter Search. * **`ANSWERS_HAS_CASE_START`**: Indicates the first search in the case creation process. * **`ANSWERS_HAS_CASE_SUBMIT`**: Indicates the last search in the case creation process. * **`ANSWERS_HAS_KG_RESULTS`**: Include only searches with results from the Knowledge Graph. * **`ANSWERS_HAS_SEARCH_TERM_CLUSTER`**: Indicates whether a Search Term belongs to a Search Term Cluster. Search Terms may not belong to a cluster if they do not pertain to any other terms searched on your experience or if it is a new term that has been searched for the first time since clustering was last run. * **`ANSWERS_HAS_VOICE_SEARCH`**: Includes only searches made using voice search. * **`ANSWERS_LOCALE`**: Locale Search was run in. Can only be used with Answers metrics. * **`ANSWERS_QUERY_SOURCE`**: The integration source from which this search originated. This includes the following options: STANDARD (standard search bar) and OVERLAY (within an search overlay). * **`ANSWERS_RAW_SEARCH_TERM`**: Raw Search Term entered by user for Search. * **`ANSWERS_REFERRER_DOMAIN`**: Domain of page where user was sent from, e.g. jobs.mysite.com. * **`ANSWERS_REFERRER_PAGE_URL`**: URL of page where user was sent from, e.g. https://jobs.mysite.com/careers/open-positions/. * **`ANSWERS_RESULT_ENTITY_POSITION`**: Position Entity was returned within Vertical. * **`ANSWERS_RESULT_TITLE`**: Title of Result from Third Party Backends. For results that come from Knowledge Graph backends this will be blank. * **`ANSWERS_RESULT_VERTICAL_POSITION`**: Position of Verticals in Result. * **`ANSWERS_SEARCH_ID`**: ID of Search. Can only be used with Answers metrics. * **`ANSWERS_SEARCH_TERM`**: Normalized Search Term of Search. Normalization removes: <ul><li>`Capitalization`<li>`Punctuation`<li>`White Space`</ul> Can only be used with Answers metrics. * **`ANSWERS_SEARCH_TERM_CLUSTER_PERFORMANCE`**: Identify how well a cluster is performing based on % of Total Searches and Click Through Rate. Cluster Performance breaks down into four groups: Needs Attention - Large Cluster, Needs Attention - Small Cluster, Performing Well - Small Cluster and Performing Well - Large Cluster. * **`ANSWERS_SEARCH_TERM_INTENT`**: Whether Search Term should be boosted or blacklisted based on your experience config. Options include BOOSTED and BLACKLISTED. * **`ANSWERS_SEARCH_VERTICAL`**: Vertical Search was ran on. Can only be used with Answers metrics. * **`ANSWERS_SESSION_ID`**: ID of Session Search was run in. Can only be used with Answers metrics. * **`ANSWERS_TRAFFIC_TYPE`**: `External` or `Internal`. Can only be used with Answers metrics. * **`ANSWERS_USER_BROWSER`**: Browser of the user running the Search. * **`ANSWERS_USER_CITY`**: City of user running Search. * **`ANSWERS_USER_COUNTRY`**: Country of user running Search. * **`ANSWERS_USER_DEVICE_CLASS`**: Device of user running Search. * **`ANSWERS_USER_LAT_LONG`**: Lat, Long of user running Search. * **`ANSWERS_USER_LOCATION_ACCURACY`**: Method for identifying user location. Options include Unknown, Device, and IP. * **`ANSWERS_USER_POSTAL_CODE`**: Postal code of the user running the Search. * **`ANSWERS_USER_REGION`**: Region of the user running the Search. * **`ANSWERS_VERTICAL_RETURNED`**: Vertical returned in results for a Search. * **`ANSWERS_VERSION_LABEL`**: The Configuration Version Label of the Answers clicks or conversions. * **`CLICK_TYPE`**: Identify the type of click that a conversion is attributed to. Can only be used with Conversion Tracking metrics. * **`CONVERSION_ACTION_ID`**: Can only be used with Conversion Tracking metrics. * **`CONVERSION_TYPE`**: Type of conversion action (Customer Support, Lead, Page View, Purchase, etc). * **`CUSTOMER_ACTION_TYPE`**: The type of action consumers took through your Google or Yelp listings (Phone Calls, Get Directions, or Website Clicks). Can only be used with the `GOOGLE_CUSTOMER_ACTIONS` and `YELP_CUSTOMER_ACTIONS` metrics. Replaces `GOOGLE_ACTION_TYPE` for **`v`** parameters `20170914` and later. * **`DAYS`**: Identify events by day. * **`DAY_OF_WEEK`** Identify events by day of the week (Monday, Tuesday, etc.). * **`ENTITY_GROUPS`** Identify events by the type group of the corresponding entity. * **`ENTITY_IDS`** Identify events by the corresponding entity. * **`ENTITY_TYPES`** Identify events by the type of the corresponding entity. * **`EVENTS`** Identify events by the corresponding event. * **`EVENT_SEARCH_CONDITION`**: Identify Search Tracker for Events metrics by the event search schedule condition. Can be used with Search Tracker Event metrics. * **`FACEBOOK_IMPRESSION_TYPE`**: Indicates whether your Facebook Impressions came from Organic, Paid, or Viral content. Can only be used with the `FACEBOOK_IMPRESSIONS` and `FACEBOOK_POST_IMPRESSIONS` metrics. * **`FACEBOOK_RSVP_TYPE`**: Identify Facebook Events by RSVP type. Can be used with `FACEBOOK_EVENT_NEW_RSVPS`. * **`FACEBOOK_STORY_TYPE`**: How people are talking about your Page (e.g., posts, likes, comments). Can only be used with the `FACEBOOK_TALKING_ABOUT` metric. * **`FIELD_NAME`**: The name of the field being updated in your profile (can only be used with the `PROFILE_UPDATES` metric). * **`FOLDER_IDS`**: Identify events by folder ID of the corresponding entity. * **`FOLDER_NAMES`**: Identify events by folder name of the corresponding entity. * **`FOURSQUARE_AGE`**: Groups checkins by the users' ages (`13-17`, `18-24`, `25-34`, `35-44`, `45-54`, `55+`). Can only be used with the `FOURSQUARE_DAILY_CHECKINS` metric. * **`FOURSQUARE_GENDER`**: Groups checkins by users' sexes (`male` or `female`). Can only be used with the `FOURSQUARE_DAILY_CHECKINS` metric. * **`FOURSQUARE_TIME`**: Groups checkins by their times (`morning`: 7 AM - 10:59 AM, `noon`: 11 AM - 1:59 PM, `afternoon`: 2 PM - 5:59 PM, `evening`: 6 PM - 8:59 PM, `night`: 9 PM - 6:59 AM). Can only be used with the `FOURSQUARE_DAILY_CHECKINS` metric. * **`FREQUENT_WORDS`**: The words that most frequently appear in your reviews. * **`GENDER`**: The gender of a Facebook user. Can be used with `FACEBOOK_LIKES`, `FACEBOOK_TALKING_ABOUT`, `FACEBOOK_CHECKINS`, `FACEBOOK_IMPRESSIONS`, and `FACEBOOK_PAGE_VIEWS`. * **`GOOGLE_ACTION_TYPE`**: The type of action consumers took through your Google listings (Phone Calls, Get Directions, or Website Clicks). Can only be used with the `GOOGLE_CUSTOMER_ACTIONS` metric. Only works with **`v`** parameters before `20170914`. * **`GOOGLE_PHONE_CALL_HOURS`**: Can only be used with the `GOOGLE_PHONE_CALLS` metric. * **`GOOGLE_QUERY_TYPE`**: Groups search criteria based on whether they contained your brand name (branded) or not (unbranded). Can only be used with the `GOOGLE_SEARCH_QUERIES` metric. If the **`v`** parameter is before `20171020`: groupings are `BRANDED QUERIES` and `UNBRANDED QUERIES`, otherwise groupings are `DIRECT` and `DISCOVERY`. If the **`v`** parameter is `20190425` or later: a new query type `BRANDED` is added. * **`IST_COMPETITOR`**: Competitors monitored by the Intelligent Search Tracker. Can be used with Intelligent Search Tracker metrics and the Cumulative Rating metric. * **`IST_KEYWORD`**: The keyword used to create search requests. Can only be used with Intelligent Search Tracker metrics. * **`IST_LOCAL_PACK_COMPETITOR`**: Local pack competitors monitored by the Intelligent Search Tracker. Can be used with `IST_MATCHES_PER_SEARCH` and `IST_TOTAL_MATCHES`. * **`IST_MATCH_POSITION`**: The local pack or organic position of the search result. Can only be used with Intelligent Search Tracker metrics. * **`IST_MATCH_TYPE`**: One of Local Map Pack, Listings, Pages and Corporate Website. Can only be used with Intelligent Search Tracker metrics. * **`IST_QUERY_TEMPLATE`**: The query template used to create search requests. Can only be used with Intelligent Search Tracker metrics. * **`IST_SEARCH_ENGINE`**: The search engine used for the Intelligent Search Tracker. Can only be used with Intelligent Search Tracker metrics. * **`IST_SEARCH_RESULT_TYPE`**: One of Organic, Local Pack or Knowledge Card. Can only be used with Intelligent Search Tracker metrics. * **`LISTINGS_LIVE_TYPE`**: The type of of listings live, either be `Claimed` or `Created` (can only be used with `LISTINGS_LIVE` metric). * **`LOCATION_IDS`**: Identify events by store ID of the corresponding location. * **`LOCATION_NAMES`**: Identify events by name of the corresponding location. * **`MEDIUM_ID`**: Identify the source of click this conversion is attributed to. Can only be used with Conversion Tracking metrics. * **`MEDIUM_TYPE`**: Identify the type of source of click this conversion is attributed to. Can only be used with Conversion Tracking metrics. * **`MONTHS`**: Identify events by months of the Gregorian calendar (January, February, etc.). * **`MONTHS_RETAIL`**: Identify events by retail month. Refers to the 4-5-4 merchandising calendar. * **`PARTNERS`**: The sites your reviews appear on. Can only be used with Reviews metrics. * **`PLATFORM`**: Groups data by the platform on which the action measured in **`metrics`** was conducted (e.g., Desktop, Mobile). * **`QUARTERS`**: Identify events by quarter. Only supported for Review metrics. * **`PRODUCT`**: Identify conversion analytics by the product in which they occurred. Can only be used with Conversion Tracking metrics. * **`PUBLISHERS`**: Groups data about the site-interaction events listed in **`metrics`** by the sites on which they occurred. * **`PUBLISHER_SUGGESTION_TYPE`**: The type of the publisher suggestion (can only be used with the `PUBLISHER_SUGGESTIONS` metric). * **`RATINGS`**: Can only be used with Reviews metrics except CUMULATIVE_RATING. * **`REVIEW_KEYWORDS`**: The keywords used in your reviews. * **`REVIEW_LABELS`**: Identify reviews by their label. * **`SEARCH_QUERY`**: Groups searches according to the search criteria used. Can only be used with the `SEARCHES` metric. * **`SEARCH_TERM`**: Raw Search Term entered by user for Search. * **`SENTIMENT_COLLECTION`**: Identify reviews by their sentiment collection of keywords. * **`STOREPAGES_DIRECTORY`**: The directories of your Store Pages. Can only be used with Store Pages metrics. * **`STOREPAGES_PAGE_TYPE`**: The page types for your Store Pages. Can only be used with Store Pages metrics. * **`STOREPAGES_PAGE_URL`**: The urls people visited on your Store Pages. Can only be used with Store Pages metrics. * **`TRAFFIC_SOURCE`**: Identify conversion analytics by the source of the traffic. * **`VALUE_PROPOSITION`**: Value Proposition. * **`VERTICAL_CONFIG_ID`**: Vertical Config ID. * **`VISITOR_EMAIL`**: Email of Unique Visitor who triggered event. * **`VISITOR_ID`**: ID of Unique Visitor who triggered event. * **`VISITOR_ID_METHOD`**: Method used to identify Visitor. * **`VISITOR_NAME`**: Name of Unique Visitor who triggered event. * **`WEEKS`**: Identify events by week. A weeks is always Monday to Sunday, and is labeled with the date corresponding to the first day of that week. * **`WEEK_NUMBER`** A given week labeled with the number of weeks into a year and its corresponding year. A week is always Monday to Sunday, “Week 1” will always contain January 1st, and the year is the year of the last day (Sunday) of that week (Week 1 (2017), Week 2 (2017), etc.). 
    attr_accessor :dimensions

    attr_accessor :filters

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'metrics' => :'metrics',
        :'dimensions' => :'dimensions',
        :'filters' => :'filters'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'metrics' => :'Array<String>',
        :'dimensions' => :'Array<String>',
        :'filters' => :'AnalyticsFilter'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::CreateReportRequestBody` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::CreateReportRequestBody`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'metrics')
        if (value = attributes[:'metrics']).is_a?(Array)
          self.metrics = value
        end
      end

      if attributes.key?(:'dimensions')
        if (value = attributes[:'dimensions']).is_a?(Array)
          self.dimensions = value
        end
      end

      if attributes.key?(:'filters')
        self.filters = attributes[:'filters']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @metrics.nil?
        invalid_properties.push('invalid value for "metrics", metrics cannot be nil.')
      end

      if @dimensions.nil?
        invalid_properties.push('invalid value for "dimensions", dimensions cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @metrics.nil?
      return false if @dimensions.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          metrics == o.metrics &&
          dimensions == o.dimensions &&
          filters == o.filters
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [metrics, dimensions, filters].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
