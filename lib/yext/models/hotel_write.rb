=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class HotelWrite < EntityWrite
    attr_accessor :meta

    #   Cannot Include: * HTML markup
    attr_accessor :name

    attr_accessor :address

    attr_accessor :access_hours

    # Additional information about hours that does not fit in **`hours`** (e.g., `\"Closed during the winter\"`)
    attr_accessor :additional_hours_text

    # If `true`, the entity's street address will not be shown on listings. Defaults to `false`.
    attr_accessor :address_hidden

    # Indicates whether the entity has a pool for adults only.
    attr_accessor :adult_pool

    # Indicates whether the entity offers a shuttle to/from the airport.
    attr_accessor :airport_shuttle

    # Indicates whether the entity offers a shuttle service of car service to/from nearby airports or train stations.
    attr_accessor :airport_transfer

    # Indicates whether the entity offers all-inclusive rates.
    attr_accessor :all_inclusive

    # Other names for your business that you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :alternate_names

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :alternate_phone

    # Other websites for your business that we should search for when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* common domain names, e.g., google.com, youtube.com, etc.
    attr_accessor :alternate_websites

    # The URL where consumers can download the entity's Android app
    attr_accessor :android_app_url

    # Association memberships relevant to the entity (e.g., `\"New York Doctors Association\"`) All strings must be non-empty when trimmed of whitespace.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :associations

    # Indicates whether the entity offers babysitting.
    attr_accessor :babysitting_offered

    # Indicates whether the entity offers baggage storage pre check-in and post check-out.
    attr_accessor :baggage_storage

    # Indicates whether the entity has an indoor or outdoor bar onsite.
    attr_accessor :bar

    # Indicates whether the entity has access to a beach.
    attr_accessor :beach_access

    # Indicates whether the entity is physically located next to a beach.
    attr_accessor :beach_front_property

    # Indicates whether the entity offers bicycles for rent or for free.
    attr_accessor :bicycles

    attr_accessor :bios

    # Indicates whether the entity has a boutique store. Gift shop or convenience store are not eligible.
    attr_accessor :boutique_stores

    # Brands sold by this entity All strings must be non-empty when trimmed of whitespace.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :brands

    # Indicates whether the entity offers breakfast.
    attr_accessor :breakfast

    attr_accessor :brunch_hours

    # Indicates whether the entity has a business center.
    attr_accessor :business_center

    attr_accessor :calendars

    # Indicates whether the entity offers car rental.
    attr_accessor :car_rental

    # Indicates whether the entity has a casino on premise or nearby.
    attr_accessor :casino

    # Yext Category IDs.  IDs must be valid and selectable (i.e., cannot be parent categories).  NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings. 
    attr_accessor :category_ids

    # Indicates if the entity is cat friendly.
    attr_accessor :cats_allowed

    # The check-in time
    attr_accessor :check_in_time

    # The check-out time
    attr_accessor :check_out_time

    # The 1 to 5 star rating of the entitiy based on its services and facilities.
    attr_accessor :classification_rating

    # Indicates whether the entity is closed
    attr_accessor :closed

    # Indicates whether the entity offers concierge service.
    attr_accessor :concierge

    # Indicates whether the entity has a convenience store.
    attr_accessor :convenience_store

    # Indicates whether the entity offers currency exchange services.
    attr_accessor :currency_exchange

    # Additional keywords you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 5 elements. 
    attr_accessor :custom_keywords

    # A description of the entity   Cannot Include: * HTML markup
    attr_accessor :description

    attr_accessor :display_coordinate

    # Indicates whether the entity has a doctor on premise or on call.
    attr_accessor :doctor_on_call

    # Indicates if the entity is dog friendly.
    attr_accessor :dogs_allowed

    attr_accessor :dropoff_coordinate

    # Indicates whether the entity has electric car chargine stations on premise.
    attr_accessor :electric_charging_station

    # Indicates whether the entity has an elevator.
    attr_accessor :elevator

    # Indicates whether the entity has an elliptical machine.
    attr_accessor :elliptical_machine

    # Emails addresses for this entity's point of contact  Must be valid email addresses   Array must be ordered.  Array may have a maximum of 5 elements. 
    attr_accessor :emails

    attr_accessor :facebook_call_to_action

    attr_accessor :facebook_cover_photo

    # Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.   Cannot Include: * HTML markup
    attr_accessor :facebook_descriptor

    # The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.
    attr_accessor :facebook_name

    # The city to be displayed on this entity's Facebook profile
    attr_accessor :facebook_override_city

    # URL for the entity's Facebook Page.  Valid formats:  - facebook.com/profile.php?id=[numId] - facebook.com/group.php?gid=[numId] - facebook.com/groups/[numId] - facebook.com/[Name] - facebook.com/pages/[Name]/[numId]  where [Name] is a String and [numId] is an Integer  If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.
    attr_accessor :facebook_page_url

    attr_accessor :facebook_profile_photo

    # The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.
    attr_accessor :facebook_vanity_url

    # Must be a valid fax number.  If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :fax

    attr_accessor :featured_message

    # Link to the review-collection page, where consumers can leave first-party reviews
    attr_accessor :first_party_review_page

    # Indicates whether the entity has a fitness center.
    attr_accessor :fitness_center

    # The number of floors the entity has from ground floor to top floor.
    attr_accessor :floor_count

    # Indicates whether the entity has free weights.
    attr_accessor :free_weights

    # A list of questions that are frequently asked about this entity   Array must be ordered.  Array may have a maximum of 100 elements. 
    attr_accessor :frequently_asked_questions

    # Indicates whether the entity has a front desk.
    attr_accessor :front_desk

    # Indicates whether the staff is vaccinated against COVID-19.
    attr_accessor :fully_vaccinated_staff

    # Indicates whether the entity has a game room.
    attr_accessor :game_room

    # Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)
    attr_accessor :geomodifier

    # Indicates whether the entity has a gift shop.
    attr_accessor :gift_shop

    # Indicates whether the entity has a golf couse on premise or nearby. The golf course may be independently run.
    attr_accessor :golf

    # The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.  Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.  Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).  * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ \"id\": \"has_wheelchair_accessible_entrance\", \"values\": [ \"true\" ] }]`) * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ \"has_wheelchair_accessible_entrance\": [ \"true\" ]}`)  **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
    attr_accessor :google_attributes

    attr_accessor :google_cover_photo

    # Google My Business Labels help users organize their locations into groups within GMB.   Array must be ordered.  Array may have a maximum of 10 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :google_my_business_labels

    # The unique identifier of this entity on Google Maps.
    attr_accessor :google_place_id

    attr_accessor :google_profile_photo

    # The URL you would like to submit to Google My Business in place of the one given in **`websiteUrl`** (if applicable).  For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.
    attr_accessor :google_website_override

    attr_accessor :happy_hours

    # Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity
    attr_accessor :holiday_hours_conversation_enabled

    # Indicates whether the entity offers horseback riding.
    attr_accessor :horseback_riding

    # Indicates whether the entity has a hot tub.
    attr_accessor :hot_tub

    attr_accessor :hours

    # Indicates whether the entity offers housekeeping services.
    attr_accessor :housekeeping

    # A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.
    attr_accessor :impressum

    # A count of the number of indoor pools
    attr_accessor :indoor_pool_count

    # Valid Instagram username for the entity without the leading \"@\" (e.g., `NewCityAuto`)
    attr_accessor :instagram_handle

    # The URL where consumers can download the entity's app to their iPhone or iPad
    attr_accessor :ios_app_url

    # The ISO 3166-2 region code for the entity  Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.
    attr_accessor :iso_region_code

    # Keywords that describe the entity.  All strings must be non-empty when trimmed of whitespace.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :keywords

    # Indicates if the entity is kid friendly.
    attr_accessor :kid_friendly

    # Indicates if the property has a Kids Club.
    attr_accessor :kids_club

    # Indicates whether the entity allows kids to stay free.
    attr_accessor :kids_stay_free

    attr_accessor :kitchen_hours

    # The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
    attr_accessor :labels

    # The URL of this entity's Landing Page that was created with Yext Pages
    attr_accessor :landing_page_url

    # The langauges in which consumers can commicate with this entity or its staff members All strings must be non-empty when trimmed of whitespace.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :languages

    # Indicates whether the entity offers laundry services.
    attr_accessor :laundry

    # Indicates if the property has a lazy river
    attr_accessor :lazy_river

    # Indicates if the property has a lifeguard on duty
    attr_accessor :lifeguard

    # Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.
    attr_accessor :local_phone

    # Indicates whether the entity offers local shuttle services.
    attr_accessor :local_shuttle

    # Indicates the entity's type, if it is not an event
    attr_accessor :location_type

    attr_accessor :logo

    # The main phone number of the entity's point of contact  Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :main_phone

    # Indicates whether the entity offers massage services.
    attr_accessor :massage

    # The maximum age specified by the property for children to stay in the room/suite of a parent or adult without an additional fee
    attr_accessor :max_age_of_kids_stay_free

    # The maximum number of children who can stay in the room/suite of a parent or adult without an additional fee
    attr_accessor :max_number_of_kids_stay_free

    # The number of meeting rooms the entity has.
    attr_accessor :meeting_room_count

    attr_accessor :menu_url

    attr_accessor :menus

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :mobile_phone

    # Indicates whether the entity is mobility/wheelchair accessible
    attr_accessor :mobility_accessible

    # Indicates whether the entity has a nightclub.
    attr_accessor :nightclub

    # Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
    attr_accessor :nudge_enabled

    attr_accessor :order_url

    # The number of outdoor pools the entity has.
    attr_accessor :outdoor_pool_count

    # Indicates whether the entity offers parking services.
    attr_accessor :parking

    # The payment methods accepted by this entity  Valid elements depend on the entity's country. 
    attr_accessor :payment_options

    # Indicates if the entity is pet friendly.
    attr_accessor :pets_allowed

    #  **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Supported Aspect Ratios: >* 1 x 1 >* 4 x 3 >* 3 x 2 >* 5 x 3 >* 16 x 9 >* 3 x 1 >* 2 x 3 >* 5 x 7 >* 4 x 5 >* 4 x 1 > >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host. >
    attr_accessor :photo_gallery

    attr_accessor :pickup_coordinate

    # ID of the user who is the primary Knowledge Assistant contact for the entity
    attr_accessor :primary_conversation_contact

    # Indicates whether the entity has access to a private beach.
    attr_accessor :private_beach

    # Indicates whether the entity offers private car services.
    attr_accessor :private_car_service

    attr_accessor :product_lists

    # Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity
    attr_accessor :questions_and_answers

    # Information about the competitors whose search performance you would like to compare to your own   Array must be ordered.  Array may have a maximum of 5 elements. 
    attr_accessor :rank_tracking_competitors

    # Indicates whether Rank Tracking is enabled
    attr_accessor :rank_tracking_enabled

    # How often we send search queries to track your search performance
    attr_accessor :rank_tracking_frequency

    # The ways in which your keywords will be arranged in the search queries we use to track your performance   Array must have a minimum of 2 elements.  Array may have a maximum of 4 elements. 
    attr_accessor :rank_tracking_query_templates

    # The search engines that we will use to track your performance
    attr_accessor :rank_tracking_sites

    attr_accessor :reservation_url

    # The number of restaurants the entity has.
    attr_accessor :restaurant_count

    # The URL given Review Invitation emails where consumers can leave a review about the entity
    attr_accessor :review_generation_url

    # Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity
    attr_accessor :review_response_conversation_enabled

    # The number of rooms the entity has.
    attr_accessor :room_count

    # Indicates whether the entity offers room service.
    attr_accessor :room_service

    attr_accessor :routable_coordinate

    # Indicates whether the entity has a salon.
    attr_accessor :salon

    # Indicates whether the entity has a sauna.
    attr_accessor :sauna

    # Indicates whether the entity offers scuba diving.
    attr_accessor :scuba

    # Indicates whether the entity offers self parking services.
    attr_accessor :self_parking

    attr_accessor :service_area

    # Information about the area that is served by this entity. It is specified as a list of service area names and their associated types. **Only for Google My Business and Bing:** Currently, **serviceArea** is only supported by Google My Business and Bing and will not affect your listings on other sites.   Array may have a maximum of 200 elements. 
    attr_accessor :service_area_places

    # Services offered by this entity  All strings must be non-empty when trimmed of whitespace.   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :services

    # Indicates if the entity is smoke free.
    attr_accessor :smoke_free_property

    # Indicates whether the entity offers snorkeling.
    attr_accessor :snorkeling

    # Indicates whether the entity offers a social hour.
    attr_accessor :social_hour

    # Indicates whether the entity has a spa.
    attr_accessor :spa

    # Indicates whether the entity has a sit-down restaurant.
    attr_accessor :table_service

    # Indicates whether the entity has tennis courts.
    attr_accessor :tennis

    # Indicates whether the entity has a thermal pool.
    attr_accessor :thermal_pool

    # The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `\"America/New_York\"`
    attr_accessor :timezone

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :toll_free_phone

    # Indicates whether the entity has a treadmill.
    attr_accessor :treadmill

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.
    attr_accessor :tty_phone

    # Indicates whether the entity offers turndown service.
    attr_accessor :turndown_service

    # Valid Twitter handle for the entity without the leading \"@\" (e.g., `JohnSmith`)  If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.
    attr_accessor :twitter_handle

    attr_accessor :uber_link

    attr_accessor :uber_trip_branding

    # Indicates whether the entity offers valet parking services.
    attr_accessor :valet_parking

    # Indicates whether the entity has a vending machine.
    attr_accessor :vending_machine

    # Valid YouTube URLs for embedding a video on some publisher sites  **NOTE:** Currently, only the first URL in the Array appears in your listings.   Array must be ordered. 
    attr_accessor :videos

    # Indicates whether the entity has a wading pool.
    attr_accessor :wading_pool

    # Indicates whether the entity offers wake up call services.
    attr_accessor :wake_up_calls

    attr_accessor :walkable_coordinate

    # Indicates whether the entity has a water park.
    attr_accessor :water_park

    # Indicates whether the entity offers water skiing.
    attr_accessor :water_skiing

    # Indicates whether the entity offers any kind of watercrafts.
    attr_accessor :watercraft

    # Indicates whether the entity has a water slide.
    attr_accessor :waterslide

    # Indicates whether the entity has a wave pool.
    attr_accessor :wave_pool

    attr_accessor :website_url

    # Indicates whether the entity has a weight machine.
    attr_accessor :weight_machine

    # Indicates if the entity is wheelchair accessible.
    attr_accessor :wheelchair_accessible

    # Indicates whether the entity has WiFi available
    attr_accessor :wifi_available

    # The year the entity was established.
    attr_accessor :year_established

    # The most recent year the entity was partially or completely renovated.
    attr_accessor :year_last_renovated

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'meta' => :'meta',
        :'name' => :'name',
        :'address' => :'address',
        :'access_hours' => :'accessHours',
        :'additional_hours_text' => :'additionalHoursText',
        :'address_hidden' => :'addressHidden',
        :'adult_pool' => :'adultPool',
        :'airport_shuttle' => :'airportShuttle',
        :'airport_transfer' => :'airportTransfer',
        :'all_inclusive' => :'allInclusive',
        :'alternate_names' => :'alternateNames',
        :'alternate_phone' => :'alternatePhone',
        :'alternate_websites' => :'alternateWebsites',
        :'android_app_url' => :'androidAppUrl',
        :'associations' => :'associations',
        :'babysitting_offered' => :'babysittingOffered',
        :'baggage_storage' => :'baggageStorage',
        :'bar' => :'bar',
        :'beach_access' => :'beachAccess',
        :'beach_front_property' => :'beachFrontProperty',
        :'bicycles' => :'bicycles',
        :'bios' => :'bios',
        :'boutique_stores' => :'boutiqueStores',
        :'brands' => :'brands',
        :'breakfast' => :'breakfast',
        :'brunch_hours' => :'brunchHours',
        :'business_center' => :'businessCenter',
        :'calendars' => :'calendars',
        :'car_rental' => :'carRental',
        :'casino' => :'casino',
        :'category_ids' => :'categoryIds',
        :'cats_allowed' => :'catsAllowed',
        :'check_in_time' => :'checkInTime',
        :'check_out_time' => :'checkOutTime',
        :'classification_rating' => :'classificationRating',
        :'closed' => :'closed',
        :'concierge' => :'concierge',
        :'convenience_store' => :'convenienceStore',
        :'currency_exchange' => :'currencyExchange',
        :'custom_keywords' => :'customKeywords',
        :'description' => :'description',
        :'display_coordinate' => :'displayCoordinate',
        :'doctor_on_call' => :'doctorOnCall',
        :'dogs_allowed' => :'dogsAllowed',
        :'dropoff_coordinate' => :'dropoffCoordinate',
        :'electric_charging_station' => :'electricChargingStation',
        :'elevator' => :'elevator',
        :'elliptical_machine' => :'ellipticalMachine',
        :'emails' => :'emails',
        :'facebook_call_to_action' => :'facebookCallToAction',
        :'facebook_cover_photo' => :'facebookCoverPhoto',
        :'facebook_descriptor' => :'facebookDescriptor',
        :'facebook_name' => :'facebookName',
        :'facebook_override_city' => :'facebookOverrideCity',
        :'facebook_page_url' => :'facebookPageUrl',
        :'facebook_profile_photo' => :'facebookProfilePhoto',
        :'facebook_vanity_url' => :'facebookVanityUrl',
        :'fax' => :'fax',
        :'featured_message' => :'featuredMessage',
        :'first_party_review_page' => :'firstPartyReviewPage',
        :'fitness_center' => :'fitnessCenter',
        :'floor_count' => :'floorCount',
        :'free_weights' => :'freeWeights',
        :'frequently_asked_questions' => :'frequentlyAskedQuestions',
        :'front_desk' => :'frontDesk',
        :'fully_vaccinated_staff' => :'fullyVaccinatedStaff',
        :'game_room' => :'gameRoom',
        :'geomodifier' => :'geomodifier',
        :'gift_shop' => :'giftShop',
        :'golf' => :'golf',
        :'google_attributes' => :'googleAttributes',
        :'google_cover_photo' => :'googleCoverPhoto',
        :'google_my_business_labels' => :'googleMyBusinessLabels',
        :'google_place_id' => :'googlePlaceId',
        :'google_profile_photo' => :'googleProfilePhoto',
        :'google_website_override' => :'googleWebsiteOverride',
        :'happy_hours' => :'happyHours',
        :'holiday_hours_conversation_enabled' => :'holidayHoursConversationEnabled',
        :'horseback_riding' => :'horsebackRiding',
        :'hot_tub' => :'hotTub',
        :'hours' => :'hours',
        :'housekeeping' => :'housekeeping',
        :'impressum' => :'impressum',
        :'indoor_pool_count' => :'indoorPoolCount',
        :'instagram_handle' => :'instagramHandle',
        :'ios_app_url' => :'iosAppUrl',
        :'iso_region_code' => :'isoRegionCode',
        :'keywords' => :'keywords',
        :'kid_friendly' => :'kidFriendly',
        :'kids_club' => :'kidsClub',
        :'kids_stay_free' => :'kidsStayFree',
        :'kitchen_hours' => :'kitchenHours',
        :'labels' => :'labels',
        :'landing_page_url' => :'landingPageUrl',
        :'languages' => :'languages',
        :'laundry' => :'laundry',
        :'lazy_river' => :'lazyRiver',
        :'lifeguard' => :'lifeguard',
        :'local_phone' => :'localPhone',
        :'local_shuttle' => :'localShuttle',
        :'location_type' => :'locationType',
        :'logo' => :'logo',
        :'main_phone' => :'mainPhone',
        :'massage' => :'massage',
        :'max_age_of_kids_stay_free' => :'maxAgeOfKidsStayFree',
        :'max_number_of_kids_stay_free' => :'maxNumberOfKidsStayFree',
        :'meeting_room_count' => :'meetingRoomCount',
        :'menu_url' => :'menuUrl',
        :'menus' => :'menus',
        :'mobile_phone' => :'mobilePhone',
        :'mobility_accessible' => :'mobilityAccessible',
        :'nightclub' => :'nightclub',
        :'nudge_enabled' => :'nudgeEnabled',
        :'order_url' => :'orderUrl',
        :'outdoor_pool_count' => :'outdoorPoolCount',
        :'parking' => :'parking',
        :'payment_options' => :'paymentOptions',
        :'pets_allowed' => :'petsAllowed',
        :'photo_gallery' => :'photoGallery',
        :'pickup_coordinate' => :'pickupCoordinate',
        :'primary_conversation_contact' => :'primaryConversationContact',
        :'private_beach' => :'privateBeach',
        :'private_car_service' => :'privateCarService',
        :'product_lists' => :'productLists',
        :'questions_and_answers' => :'questionsAndAnswers',
        :'rank_tracking_competitors' => :'rankTrackingCompetitors',
        :'rank_tracking_enabled' => :'rankTrackingEnabled',
        :'rank_tracking_frequency' => :'rankTrackingFrequency',
        :'rank_tracking_query_templates' => :'rankTrackingQueryTemplates',
        :'rank_tracking_sites' => :'rankTrackingSites',
        :'reservation_url' => :'reservationUrl',
        :'restaurant_count' => :'restaurantCount',
        :'review_generation_url' => :'reviewGenerationUrl',
        :'review_response_conversation_enabled' => :'reviewResponseConversationEnabled',
        :'room_count' => :'roomCount',
        :'room_service' => :'roomService',
        :'routable_coordinate' => :'routableCoordinate',
        :'salon' => :'salon',
        :'sauna' => :'sauna',
        :'scuba' => :'scuba',
        :'self_parking' => :'selfParking',
        :'service_area' => :'serviceArea',
        :'service_area_places' => :'serviceAreaPlaces',
        :'services' => :'services',
        :'smoke_free_property' => :'smokeFreeProperty',
        :'snorkeling' => :'snorkeling',
        :'social_hour' => :'socialHour',
        :'spa' => :'spa',
        :'table_service' => :'tableService',
        :'tennis' => :'tennis',
        :'thermal_pool' => :'thermalPool',
        :'timezone' => :'timezone',
        :'toll_free_phone' => :'tollFreePhone',
        :'treadmill' => :'treadmill',
        :'tty_phone' => :'ttyPhone',
        :'turndown_service' => :'turndownService',
        :'twitter_handle' => :'twitterHandle',
        :'uber_link' => :'uberLink',
        :'uber_trip_branding' => :'uberTripBranding',
        :'valet_parking' => :'valetParking',
        :'vending_machine' => :'vendingMachine',
        :'videos' => :'videos',
        :'wading_pool' => :'wadingPool',
        :'wake_up_calls' => :'wakeUpCalls',
        :'walkable_coordinate' => :'walkableCoordinate',
        :'water_park' => :'waterPark',
        :'water_skiing' => :'waterSkiing',
        :'watercraft' => :'watercraft',
        :'waterslide' => :'waterslide',
        :'wave_pool' => :'wavePool',
        :'website_url' => :'websiteUrl',
        :'weight_machine' => :'weightMachine',
        :'wheelchair_accessible' => :'wheelchairAccessible',
        :'wifi_available' => :'wifiAvailable',
        :'year_established' => :'yearEstablished',
        :'year_last_renovated' => :'yearLastRenovated'
      }
    end

    # Returns all the JSON keys this model knows about, including the ones defined in its parent(s)
    def self.acceptable_attributes
      attribute_map.values.concat(superclass.acceptable_attributes)
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'meta' => :'AtmWriteAllOfMeta',
        :'name' => :'String',
        :'address' => :'AtmWriteAllOfAddress',
        :'access_hours' => :'HotelWriteAllOfAccessHours',
        :'additional_hours_text' => :'String',
        :'address_hidden' => :'Boolean',
        :'adult_pool' => :'String',
        :'airport_shuttle' => :'String',
        :'airport_transfer' => :'String',
        :'all_inclusive' => :'String',
        :'alternate_names' => :'Array<String>',
        :'alternate_phone' => :'String',
        :'alternate_websites' => :'Array<String>',
        :'android_app_url' => :'String',
        :'associations' => :'Array<String>',
        :'babysitting_offered' => :'String',
        :'baggage_storage' => :'String',
        :'bar' => :'String',
        :'beach_access' => :'String',
        :'beach_front_property' => :'String',
        :'bicycles' => :'String',
        :'bios' => :'HealthcareFacilityWriteAllOfBios',
        :'boutique_stores' => :'String',
        :'brands' => :'Array<String>',
        :'breakfast' => :'String',
        :'brunch_hours' => :'HotelWriteAllOfBrunchHours',
        :'business_center' => :'String',
        :'calendars' => :'HealthcareFacilityWriteAllOfCalendars',
        :'car_rental' => :'String',
        :'casino' => :'String',
        :'category_ids' => :'Array<String>',
        :'cats_allowed' => :'String',
        :'check_in_time' => :'String',
        :'check_out_time' => :'String',
        :'classification_rating' => :'String',
        :'closed' => :'Boolean',
        :'concierge' => :'String',
        :'convenience_store' => :'String',
        :'currency_exchange' => :'String',
        :'custom_keywords' => :'Array<String>',
        :'description' => :'String',
        :'display_coordinate' => :'AtmWriteAllOfDisplayCoordinate',
        :'doctor_on_call' => :'String',
        :'dogs_allowed' => :'String',
        :'dropoff_coordinate' => :'AtmWriteAllOfDropoffCoordinate',
        :'electric_charging_station' => :'String',
        :'elevator' => :'String',
        :'elliptical_machine' => :'String',
        :'emails' => :'Array<String>',
        :'facebook_call_to_action' => :'AtmWriteAllOfFacebookCallToAction',
        :'facebook_cover_photo' => :'AtmWriteAllOfFacebookCoverPhoto',
        :'facebook_descriptor' => :'String',
        :'facebook_name' => :'String',
        :'facebook_override_city' => :'String',
        :'facebook_page_url' => :'String',
        :'facebook_profile_photo' => :'AtmWriteAllOfFacebookProfilePhoto',
        :'facebook_vanity_url' => :'String',
        :'fax' => :'String',
        :'featured_message' => :'AtmWriteAllOfFeaturedMessage',
        :'first_party_review_page' => :'String',
        :'fitness_center' => :'String',
        :'floor_count' => :'Float',
        :'free_weights' => :'String',
        :'frequently_asked_questions' => :'Array<AtmWriteAllOfFrequentlyAskedQuestions>',
        :'front_desk' => :'String',
        :'fully_vaccinated_staff' => :'Boolean',
        :'game_room' => :'String',
        :'geomodifier' => :'String',
        :'gift_shop' => :'String',
        :'golf' => :'String',
        :'google_attributes' => :'Object',
        :'google_cover_photo' => :'AtmWriteAllOfGoogleCoverPhoto',
        :'google_my_business_labels' => :'Array<String>',
        :'google_place_id' => :'String',
        :'google_profile_photo' => :'AtmWriteAllOfGoogleProfilePhoto',
        :'google_website_override' => :'String',
        :'happy_hours' => :'HotelWriteAllOfHappyHours',
        :'holiday_hours_conversation_enabled' => :'Boolean',
        :'horseback_riding' => :'String',
        :'hot_tub' => :'String',
        :'hours' => :'HotelWriteAllOfHours',
        :'housekeeping' => :'String',
        :'impressum' => :'String',
        :'indoor_pool_count' => :'Float',
        :'instagram_handle' => :'String',
        :'ios_app_url' => :'String',
        :'iso_region_code' => :'String',
        :'keywords' => :'Array<String>',
        :'kid_friendly' => :'String',
        :'kids_club' => :'String',
        :'kids_stay_free' => :'String',
        :'kitchen_hours' => :'HotelWriteAllOfKitchenHours',
        :'labels' => :'Array<String>',
        :'landing_page_url' => :'String',
        :'languages' => :'Array<String>',
        :'laundry' => :'String',
        :'lazy_river' => :'String',
        :'lifeguard' => :'String',
        :'local_phone' => :'String',
        :'local_shuttle' => :'String',
        :'location_type' => :'String',
        :'logo' => :'AtmWriteAllOfLogo',
        :'main_phone' => :'String',
        :'massage' => :'String',
        :'max_age_of_kids_stay_free' => :'Float',
        :'max_number_of_kids_stay_free' => :'Float',
        :'meeting_room_count' => :'Float',
        :'menu_url' => :'HealthcareFacilityWriteAllOfMenuUrl',
        :'menus' => :'HotelWriteAllOfMenus',
        :'mobile_phone' => :'String',
        :'mobility_accessible' => :'String',
        :'nightclub' => :'String',
        :'nudge_enabled' => :'Boolean',
        :'order_url' => :'HealthcareFacilityWriteAllOfOrderUrl',
        :'outdoor_pool_count' => :'Float',
        :'parking' => :'String',
        :'payment_options' => :'Array<String>',
        :'pets_allowed' => :'String',
        :'photo_gallery' => :'Array<EventWriteAllOfPhotoGallery>',
        :'pickup_coordinate' => :'AtmWriteAllOfPickupCoordinate',
        :'primary_conversation_contact' => :'String',
        :'private_beach' => :'String',
        :'private_car_service' => :'String',
        :'product_lists' => :'HealthcareFacilityWriteAllOfProductLists',
        :'questions_and_answers' => :'Boolean',
        :'rank_tracking_competitors' => :'Array<AtmWriteAllOfRankTrackingCompetitors>',
        :'rank_tracking_enabled' => :'Boolean',
        :'rank_tracking_frequency' => :'String',
        :'rank_tracking_query_templates' => :'Array<String>',
        :'rank_tracking_sites' => :'Array<String>',
        :'reservation_url' => :'HealthcareFacilityWriteAllOfReservationUrl',
        :'restaurant_count' => :'Float',
        :'review_generation_url' => :'String',
        :'review_response_conversation_enabled' => :'Boolean',
        :'room_count' => :'Float',
        :'room_service' => :'String',
        :'routable_coordinate' => :'AtmWriteAllOfRoutableCoordinate',
        :'salon' => :'String',
        :'sauna' => :'String',
        :'scuba' => :'String',
        :'self_parking' => :'String',
        :'service_area' => :'HotelWriteAllOfServiceArea',
        :'service_area_places' => :'Array<HealthcareFacilityWriteAllOfServiceAreaPlaces>',
        :'services' => :'Array<String>',
        :'smoke_free_property' => :'String',
        :'snorkeling' => :'String',
        :'social_hour' => :'String',
        :'spa' => :'String',
        :'table_service' => :'String',
        :'tennis' => :'String',
        :'thermal_pool' => :'String',
        :'timezone' => :'String',
        :'toll_free_phone' => :'String',
        :'treadmill' => :'String',
        :'tty_phone' => :'String',
        :'turndown_service' => :'String',
        :'twitter_handle' => :'String',
        :'uber_link' => :'HealthcareFacilityWriteAllOfUberLink',
        :'uber_trip_branding' => :'HealthcareFacilityWriteAllOfUberTripBranding',
        :'valet_parking' => :'String',
        :'vending_machine' => :'String',
        :'videos' => :'Array<HealthcareFacilityWriteAllOfVideos>',
        :'wading_pool' => :'String',
        :'wake_up_calls' => :'String',
        :'walkable_coordinate' => :'AtmWriteAllOfWalkableCoordinate',
        :'water_park' => :'String',
        :'water_skiing' => :'String',
        :'watercraft' => :'String',
        :'waterslide' => :'String',
        :'wave_pool' => :'String',
        :'website_url' => :'AtmWriteAllOfWebsiteUrl',
        :'weight_machine' => :'String',
        :'wheelchair_accessible' => :'String',
        :'wifi_available' => :'String',
        :'year_established' => :'Float',
        :'year_last_renovated' => :'Float'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
      :'EntityWrite',
      :'HotelWriteAllOf'
      ]
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::HotelWrite` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::HotelWrite`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      # call parent's initialize
      super(attributes)

      if attributes.key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'access_hours')
        self.access_hours = attributes[:'access_hours']
      end

      if attributes.key?(:'additional_hours_text')
        self.additional_hours_text = attributes[:'additional_hours_text']
      end

      if attributes.key?(:'address_hidden')
        self.address_hidden = attributes[:'address_hidden']
      end

      if attributes.key?(:'adult_pool')
        self.adult_pool = attributes[:'adult_pool']
      end

      if attributes.key?(:'airport_shuttle')
        self.airport_shuttle = attributes[:'airport_shuttle']
      end

      if attributes.key?(:'airport_transfer')
        self.airport_transfer = attributes[:'airport_transfer']
      end

      if attributes.key?(:'all_inclusive')
        self.all_inclusive = attributes[:'all_inclusive']
      end

      if attributes.key?(:'alternate_names')
        if (value = attributes[:'alternate_names']).is_a?(Array)
          self.alternate_names = value
        end
      end

      if attributes.key?(:'alternate_phone')
        self.alternate_phone = attributes[:'alternate_phone']
      end

      if attributes.key?(:'alternate_websites')
        if (value = attributes[:'alternate_websites']).is_a?(Array)
          self.alternate_websites = value
        end
      end

      if attributes.key?(:'android_app_url')
        self.android_app_url = attributes[:'android_app_url']
      end

      if attributes.key?(:'associations')
        if (value = attributes[:'associations']).is_a?(Array)
          self.associations = value
        end
      end

      if attributes.key?(:'babysitting_offered')
        self.babysitting_offered = attributes[:'babysitting_offered']
      end

      if attributes.key?(:'baggage_storage')
        self.baggage_storage = attributes[:'baggage_storage']
      end

      if attributes.key?(:'bar')
        self.bar = attributes[:'bar']
      end

      if attributes.key?(:'beach_access')
        self.beach_access = attributes[:'beach_access']
      end

      if attributes.key?(:'beach_front_property')
        self.beach_front_property = attributes[:'beach_front_property']
      end

      if attributes.key?(:'bicycles')
        self.bicycles = attributes[:'bicycles']
      end

      if attributes.key?(:'bios')
        self.bios = attributes[:'bios']
      end

      if attributes.key?(:'boutique_stores')
        self.boutique_stores = attributes[:'boutique_stores']
      end

      if attributes.key?(:'brands')
        if (value = attributes[:'brands']).is_a?(Array)
          self.brands = value
        end
      end

      if attributes.key?(:'breakfast')
        self.breakfast = attributes[:'breakfast']
      end

      if attributes.key?(:'brunch_hours')
        self.brunch_hours = attributes[:'brunch_hours']
      end

      if attributes.key?(:'business_center')
        self.business_center = attributes[:'business_center']
      end

      if attributes.key?(:'calendars')
        self.calendars = attributes[:'calendars']
      end

      if attributes.key?(:'car_rental')
        self.car_rental = attributes[:'car_rental']
      end

      if attributes.key?(:'casino')
        self.casino = attributes[:'casino']
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.key?(:'cats_allowed')
        self.cats_allowed = attributes[:'cats_allowed']
      end

      if attributes.key?(:'check_in_time')
        self.check_in_time = attributes[:'check_in_time']
      end

      if attributes.key?(:'check_out_time')
        self.check_out_time = attributes[:'check_out_time']
      end

      if attributes.key?(:'classification_rating')
        self.classification_rating = attributes[:'classification_rating']
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.key?(:'concierge')
        self.concierge = attributes[:'concierge']
      end

      if attributes.key?(:'convenience_store')
        self.convenience_store = attributes[:'convenience_store']
      end

      if attributes.key?(:'currency_exchange')
        self.currency_exchange = attributes[:'currency_exchange']
      end

      if attributes.key?(:'custom_keywords')
        if (value = attributes[:'custom_keywords']).is_a?(Array)
          self.custom_keywords = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_coordinate')
        self.display_coordinate = attributes[:'display_coordinate']
      end

      if attributes.key?(:'doctor_on_call')
        self.doctor_on_call = attributes[:'doctor_on_call']
      end

      if attributes.key?(:'dogs_allowed')
        self.dogs_allowed = attributes[:'dogs_allowed']
      end

      if attributes.key?(:'dropoff_coordinate')
        self.dropoff_coordinate = attributes[:'dropoff_coordinate']
      end

      if attributes.key?(:'electric_charging_station')
        self.electric_charging_station = attributes[:'electric_charging_station']
      end

      if attributes.key?(:'elevator')
        self.elevator = attributes[:'elevator']
      end

      if attributes.key?(:'elliptical_machine')
        self.elliptical_machine = attributes[:'elliptical_machine']
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'facebook_call_to_action')
        self.facebook_call_to_action = attributes[:'facebook_call_to_action']
      end

      if attributes.key?(:'facebook_cover_photo')
        self.facebook_cover_photo = attributes[:'facebook_cover_photo']
      end

      if attributes.key?(:'facebook_descriptor')
        self.facebook_descriptor = attributes[:'facebook_descriptor']
      end

      if attributes.key?(:'facebook_name')
        self.facebook_name = attributes[:'facebook_name']
      end

      if attributes.key?(:'facebook_override_city')
        self.facebook_override_city = attributes[:'facebook_override_city']
      end

      if attributes.key?(:'facebook_page_url')
        self.facebook_page_url = attributes[:'facebook_page_url']
      end

      if attributes.key?(:'facebook_profile_photo')
        self.facebook_profile_photo = attributes[:'facebook_profile_photo']
      end

      if attributes.key?(:'facebook_vanity_url')
        self.facebook_vanity_url = attributes[:'facebook_vanity_url']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'featured_message')
        self.featured_message = attributes[:'featured_message']
      end

      if attributes.key?(:'first_party_review_page')
        self.first_party_review_page = attributes[:'first_party_review_page']
      end

      if attributes.key?(:'fitness_center')
        self.fitness_center = attributes[:'fitness_center']
      end

      if attributes.key?(:'floor_count')
        self.floor_count = attributes[:'floor_count']
      end

      if attributes.key?(:'free_weights')
        self.free_weights = attributes[:'free_weights']
      end

      if attributes.key?(:'frequently_asked_questions')
        if (value = attributes[:'frequently_asked_questions']).is_a?(Array)
          self.frequently_asked_questions = value
        end
      end

      if attributes.key?(:'front_desk')
        self.front_desk = attributes[:'front_desk']
      end

      if attributes.key?(:'fully_vaccinated_staff')
        self.fully_vaccinated_staff = attributes[:'fully_vaccinated_staff']
      end

      if attributes.key?(:'game_room')
        self.game_room = attributes[:'game_room']
      end

      if attributes.key?(:'geomodifier')
        self.geomodifier = attributes[:'geomodifier']
      end

      if attributes.key?(:'gift_shop')
        self.gift_shop = attributes[:'gift_shop']
      end

      if attributes.key?(:'golf')
        self.golf = attributes[:'golf']
      end

      if attributes.key?(:'google_attributes')
        self.google_attributes = attributes[:'google_attributes']
      end

      if attributes.key?(:'google_cover_photo')
        self.google_cover_photo = attributes[:'google_cover_photo']
      end

      if attributes.key?(:'google_my_business_labels')
        if (value = attributes[:'google_my_business_labels']).is_a?(Array)
          self.google_my_business_labels = value
        end
      end

      if attributes.key?(:'google_place_id')
        self.google_place_id = attributes[:'google_place_id']
      end

      if attributes.key?(:'google_profile_photo')
        self.google_profile_photo = attributes[:'google_profile_photo']
      end

      if attributes.key?(:'google_website_override')
        self.google_website_override = attributes[:'google_website_override']
      end

      if attributes.key?(:'happy_hours')
        self.happy_hours = attributes[:'happy_hours']
      end

      if attributes.key?(:'holiday_hours_conversation_enabled')
        self.holiday_hours_conversation_enabled = attributes[:'holiday_hours_conversation_enabled']
      end

      if attributes.key?(:'horseback_riding')
        self.horseback_riding = attributes[:'horseback_riding']
      end

      if attributes.key?(:'hot_tub')
        self.hot_tub = attributes[:'hot_tub']
      end

      if attributes.key?(:'hours')
        self.hours = attributes[:'hours']
      end

      if attributes.key?(:'housekeeping')
        self.housekeeping = attributes[:'housekeeping']
      end

      if attributes.key?(:'impressum')
        self.impressum = attributes[:'impressum']
      end

      if attributes.key?(:'indoor_pool_count')
        self.indoor_pool_count = attributes[:'indoor_pool_count']
      end

      if attributes.key?(:'instagram_handle')
        self.instagram_handle = attributes[:'instagram_handle']
      end

      if attributes.key?(:'ios_app_url')
        self.ios_app_url = attributes[:'ios_app_url']
      end

      if attributes.key?(:'iso_region_code')
        self.iso_region_code = attributes[:'iso_region_code']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.key?(:'kid_friendly')
        self.kid_friendly = attributes[:'kid_friendly']
      end

      if attributes.key?(:'kids_club')
        self.kids_club = attributes[:'kids_club']
      end

      if attributes.key?(:'kids_stay_free')
        self.kids_stay_free = attributes[:'kids_stay_free']
      end

      if attributes.key?(:'kitchen_hours')
        self.kitchen_hours = attributes[:'kitchen_hours']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'landing_page_url')
        self.landing_page_url = attributes[:'landing_page_url']
      end

      if attributes.key?(:'languages')
        if (value = attributes[:'languages']).is_a?(Array)
          self.languages = value
        end
      end

      if attributes.key?(:'laundry')
        self.laundry = attributes[:'laundry']
      end

      if attributes.key?(:'lazy_river')
        self.lazy_river = attributes[:'lazy_river']
      end

      if attributes.key?(:'lifeguard')
        self.lifeguard = attributes[:'lifeguard']
      end

      if attributes.key?(:'local_phone')
        self.local_phone = attributes[:'local_phone']
      end

      if attributes.key?(:'local_shuttle')
        self.local_shuttle = attributes[:'local_shuttle']
      end

      if attributes.key?(:'location_type')
        self.location_type = attributes[:'location_type']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'main_phone')
        self.main_phone = attributes[:'main_phone']
      end

      if attributes.key?(:'massage')
        self.massage = attributes[:'massage']
      end

      if attributes.key?(:'max_age_of_kids_stay_free')
        self.max_age_of_kids_stay_free = attributes[:'max_age_of_kids_stay_free']
      end

      if attributes.key?(:'max_number_of_kids_stay_free')
        self.max_number_of_kids_stay_free = attributes[:'max_number_of_kids_stay_free']
      end

      if attributes.key?(:'meeting_room_count')
        self.meeting_room_count = attributes[:'meeting_room_count']
      end

      if attributes.key?(:'menu_url')
        self.menu_url = attributes[:'menu_url']
      end

      if attributes.key?(:'menus')
        self.menus = attributes[:'menus']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'mobility_accessible')
        self.mobility_accessible = attributes[:'mobility_accessible']
      end

      if attributes.key?(:'nightclub')
        self.nightclub = attributes[:'nightclub']
      end

      if attributes.key?(:'nudge_enabled')
        self.nudge_enabled = attributes[:'nudge_enabled']
      end

      if attributes.key?(:'order_url')
        self.order_url = attributes[:'order_url']
      end

      if attributes.key?(:'outdoor_pool_count')
        self.outdoor_pool_count = attributes[:'outdoor_pool_count']
      end

      if attributes.key?(:'parking')
        self.parking = attributes[:'parking']
      end

      if attributes.key?(:'payment_options')
        if (value = attributes[:'payment_options']).is_a?(Array)
          self.payment_options = value
        end
      end

      if attributes.key?(:'pets_allowed')
        self.pets_allowed = attributes[:'pets_allowed']
      end

      if attributes.key?(:'photo_gallery')
        if (value = attributes[:'photo_gallery']).is_a?(Array)
          self.photo_gallery = value
        end
      end

      if attributes.key?(:'pickup_coordinate')
        self.pickup_coordinate = attributes[:'pickup_coordinate']
      end

      if attributes.key?(:'primary_conversation_contact')
        self.primary_conversation_contact = attributes[:'primary_conversation_contact']
      end

      if attributes.key?(:'private_beach')
        self.private_beach = attributes[:'private_beach']
      end

      if attributes.key?(:'private_car_service')
        self.private_car_service = attributes[:'private_car_service']
      end

      if attributes.key?(:'product_lists')
        self.product_lists = attributes[:'product_lists']
      end

      if attributes.key?(:'questions_and_answers')
        self.questions_and_answers = attributes[:'questions_and_answers']
      end

      if attributes.key?(:'rank_tracking_competitors')
        if (value = attributes[:'rank_tracking_competitors']).is_a?(Array)
          self.rank_tracking_competitors = value
        end
      end

      if attributes.key?(:'rank_tracking_enabled')
        self.rank_tracking_enabled = attributes[:'rank_tracking_enabled']
      end

      if attributes.key?(:'rank_tracking_frequency')
        self.rank_tracking_frequency = attributes[:'rank_tracking_frequency']
      end

      if attributes.key?(:'rank_tracking_query_templates')
        if (value = attributes[:'rank_tracking_query_templates']).is_a?(Array)
          self.rank_tracking_query_templates = value
        end
      end

      if attributes.key?(:'rank_tracking_sites')
        if (value = attributes[:'rank_tracking_sites']).is_a?(Array)
          self.rank_tracking_sites = value
        end
      end

      if attributes.key?(:'reservation_url')
        self.reservation_url = attributes[:'reservation_url']
      end

      if attributes.key?(:'restaurant_count')
        self.restaurant_count = attributes[:'restaurant_count']
      end

      if attributes.key?(:'review_generation_url')
        self.review_generation_url = attributes[:'review_generation_url']
      end

      if attributes.key?(:'review_response_conversation_enabled')
        self.review_response_conversation_enabled = attributes[:'review_response_conversation_enabled']
      end

      if attributes.key?(:'room_count')
        self.room_count = attributes[:'room_count']
      end

      if attributes.key?(:'room_service')
        self.room_service = attributes[:'room_service']
      end

      if attributes.key?(:'routable_coordinate')
        self.routable_coordinate = attributes[:'routable_coordinate']
      end

      if attributes.key?(:'salon')
        self.salon = attributes[:'salon']
      end

      if attributes.key?(:'sauna')
        self.sauna = attributes[:'sauna']
      end

      if attributes.key?(:'scuba')
        self.scuba = attributes[:'scuba']
      end

      if attributes.key?(:'self_parking')
        self.self_parking = attributes[:'self_parking']
      end

      if attributes.key?(:'service_area')
        self.service_area = attributes[:'service_area']
      end

      if attributes.key?(:'service_area_places')
        if (value = attributes[:'service_area_places']).is_a?(Array)
          self.service_area_places = value
        end
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'smoke_free_property')
        self.smoke_free_property = attributes[:'smoke_free_property']
      end

      if attributes.key?(:'snorkeling')
        self.snorkeling = attributes[:'snorkeling']
      end

      if attributes.key?(:'social_hour')
        self.social_hour = attributes[:'social_hour']
      end

      if attributes.key?(:'spa')
        self.spa = attributes[:'spa']
      end

      if attributes.key?(:'table_service')
        self.table_service = attributes[:'table_service']
      end

      if attributes.key?(:'tennis')
        self.tennis = attributes[:'tennis']
      end

      if attributes.key?(:'thermal_pool')
        self.thermal_pool = attributes[:'thermal_pool']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'toll_free_phone')
        self.toll_free_phone = attributes[:'toll_free_phone']
      end

      if attributes.key?(:'treadmill')
        self.treadmill = attributes[:'treadmill']
      end

      if attributes.key?(:'tty_phone')
        self.tty_phone = attributes[:'tty_phone']
      end

      if attributes.key?(:'turndown_service')
        self.turndown_service = attributes[:'turndown_service']
      end

      if attributes.key?(:'twitter_handle')
        self.twitter_handle = attributes[:'twitter_handle']
      end

      if attributes.key?(:'uber_link')
        self.uber_link = attributes[:'uber_link']
      end

      if attributes.key?(:'uber_trip_branding')
        self.uber_trip_branding = attributes[:'uber_trip_branding']
      end

      if attributes.key?(:'valet_parking')
        self.valet_parking = attributes[:'valet_parking']
      end

      if attributes.key?(:'vending_machine')
        self.vending_machine = attributes[:'vending_machine']
      end

      if attributes.key?(:'videos')
        if (value = attributes[:'videos']).is_a?(Array)
          self.videos = value
        end
      end

      if attributes.key?(:'wading_pool')
        self.wading_pool = attributes[:'wading_pool']
      end

      if attributes.key?(:'wake_up_calls')
        self.wake_up_calls = attributes[:'wake_up_calls']
      end

      if attributes.key?(:'walkable_coordinate')
        self.walkable_coordinate = attributes[:'walkable_coordinate']
      end

      if attributes.key?(:'water_park')
        self.water_park = attributes[:'water_park']
      end

      if attributes.key?(:'water_skiing')
        self.water_skiing = attributes[:'water_skiing']
      end

      if attributes.key?(:'watercraft')
        self.watercraft = attributes[:'watercraft']
      end

      if attributes.key?(:'waterslide')
        self.waterslide = attributes[:'waterslide']
      end

      if attributes.key?(:'wave_pool')
        self.wave_pool = attributes[:'wave_pool']
      end

      if attributes.key?(:'website_url')
        self.website_url = attributes[:'website_url']
      end

      if attributes.key?(:'weight_machine')
        self.weight_machine = attributes[:'weight_machine']
      end

      if attributes.key?(:'wheelchair_accessible')
        self.wheelchair_accessible = attributes[:'wheelchair_accessible']
      end

      if attributes.key?(:'wifi_available')
        self.wifi_available = attributes[:'wifi_available']
      end

      if attributes.key?(:'year_established')
        self.year_established = attributes[:'year_established']
      end

      if attributes.key?(:'year_last_renovated')
        self.year_last_renovated = attributes[:'year_last_renovated']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = super
      if !@name.nil? && @name.to_s.length > 5000
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 5000.')
      end

      if !@name.nil? && @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be great than or equal to 0.')
      end

      if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
        invalid_properties.push('invalid value for "alternate_phone", the character length must be great than or equal to 0.')
      end

      if !@android_app_url.nil? && @android_app_url.to_s.length < 0
        invalid_properties.push('invalid value for "android_app_url", the character length must be great than or equal to 0.')
      end

      pattern = Regexp.new(/^\d*\.?\d*$/)
      if !@classification_rating.nil? && @classification_rating !~ pattern
        invalid_properties.push("invalid value for \"classification_rating\", must conform to the pattern #{pattern}.")
      end

      if !@description.nil? && @description.to_s.length > 15000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 15000.')
      end

      if !@description.nil? && @description.to_s.length < 10
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 10.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be great than or equal to 3.')
      end

      if !@facebook_name.nil? && @facebook_name.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_name", the character length must be great than or equal to 0.')
      end

      if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_override_city", the character length must be great than or equal to 0.')
      end

      if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_page_url", the character length must be great than or equal to 0.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.')
      end

      if !@fax.nil? && @fax.to_s.length < 0
        invalid_properties.push('invalid value for "fax", the character length must be great than or equal to 0.')
      end

      if !@first_party_review_page.nil? && @first_party_review_page.to_s.length < 0
        invalid_properties.push('invalid value for "first_party_review_page", the character length must be great than or equal to 0.')
      end

      if !@floor_count.nil? && @floor_count < 0
        invalid_properties.push('invalid value for "floor_count", must be greater than or equal to 0.')
      end

      if !@geomodifier.nil? && @geomodifier.to_s.length < 0
        invalid_properties.push('invalid value for "geomodifier", the character length must be great than or equal to 0.')
      end

      if !@google_place_id.nil? && @google_place_id.to_s.length < 0
        invalid_properties.push('invalid value for "google_place_id", the character length must be great than or equal to 0.')
      end

      if !@google_website_override.nil? && @google_website_override.to_s.length < 0
        invalid_properties.push('invalid value for "google_website_override", the character length must be great than or equal to 0.')
      end

      if !@impressum.nil? && @impressum.to_s.length > 2000
        invalid_properties.push('invalid value for "impressum", the character length must be smaller than or equal to 2000.')
      end

      if !@impressum.nil? && @impressum.to_s.length < 0
        invalid_properties.push('invalid value for "impressum", the character length must be great than or equal to 0.')
      end

      if !@indoor_pool_count.nil? && @indoor_pool_count < 0
        invalid_properties.push('invalid value for "indoor_pool_count", must be greater than or equal to 0.')
      end

      if !@instagram_handle.nil? && @instagram_handle.to_s.length > 30
        invalid_properties.push('invalid value for "instagram_handle", the character length must be smaller than or equal to 30.')
      end

      if !@instagram_handle.nil? && @instagram_handle.to_s.length < 0
        invalid_properties.push('invalid value for "instagram_handle", the character length must be great than or equal to 0.')
      end

      if !@ios_app_url.nil? && @ios_app_url.to_s.length < 0
        invalid_properties.push('invalid value for "ios_app_url", the character length must be great than or equal to 0.')
      end

      if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
        invalid_properties.push('invalid value for "iso_region_code", the character length must be great than or equal to 0.')
      end

      if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "landing_page_url", the character length must be great than or equal to 0.')
      end

      if !@local_phone.nil? && @local_phone.to_s.length < 0
        invalid_properties.push('invalid value for "local_phone", the character length must be great than or equal to 0.')
      end

      if !@main_phone.nil? && @main_phone.to_s.length < 0
        invalid_properties.push('invalid value for "main_phone", the character length must be great than or equal to 0.')
      end

      if !@max_age_of_kids_stay_free.nil? && @max_age_of_kids_stay_free < 0
        invalid_properties.push('invalid value for "max_age_of_kids_stay_free", must be greater than or equal to 0.')
      end

      if !@max_number_of_kids_stay_free.nil? && @max_number_of_kids_stay_free < 0
        invalid_properties.push('invalid value for "max_number_of_kids_stay_free", must be greater than or equal to 0.')
      end

      if !@meeting_room_count.nil? && @meeting_room_count < 0
        invalid_properties.push('invalid value for "meeting_room_count", must be greater than or equal to 0.')
      end

      if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
        invalid_properties.push('invalid value for "mobile_phone", the character length must be great than or equal to 0.')
      end

      if !@outdoor_pool_count.nil? && @outdoor_pool_count < 0
        invalid_properties.push('invalid value for "outdoor_pool_count", must be greater than or equal to 0.')
      end

      if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
        invalid_properties.push('invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.')
      end

      if !@restaurant_count.nil? && @restaurant_count < 0
        invalid_properties.push('invalid value for "restaurant_count", must be greater than or equal to 0.')
      end

      if !@review_generation_url.nil? && @review_generation_url.to_s.length < 0
        invalid_properties.push('invalid value for "review_generation_url", the character length must be great than or equal to 0.')
      end

      if !@room_count.nil? && @room_count < 0
        invalid_properties.push('invalid value for "room_count", must be greater than or equal to 0.')
      end

      if !@timezone.nil? && @timezone.to_s.length < 0
        invalid_properties.push('invalid value for "timezone", the character length must be great than or equal to 0.')
      end

      if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
        invalid_properties.push('invalid value for "toll_free_phone", the character length must be great than or equal to 0.')
      end

      if !@tty_phone.nil? && @tty_phone.to_s.length < 0
        invalid_properties.push('invalid value for "tty_phone", the character length must be great than or equal to 0.')
      end

      if !@twitter_handle.nil? && @twitter_handle.to_s.length > 15
        invalid_properties.push('invalid value for "twitter_handle", the character length must be smaller than or equal to 15.')
      end

      if !@twitter_handle.nil? && @twitter_handle.to_s.length < 0
        invalid_properties.push('invalid value for "twitter_handle", the character length must be great than or equal to 0.')
      end

      if !@year_established.nil? && @year_established > 2028
        invalid_properties.push('invalid value for "year_established", must be smaller than or equal to 2028.')
      end

      if !@year_established.nil? && @year_established < 1000
        invalid_properties.push('invalid value for "year_established", must be greater than or equal to 1000.')
      end

      if !@year_last_renovated.nil? && @year_last_renovated > 2028
        invalid_properties.push('invalid value for "year_last_renovated", must be smaller than or equal to 2028.')
      end

      if !@year_last_renovated.nil? && @year_last_renovated < 1000
        invalid_properties.push('invalid value for "year_last_renovated", must be greater than or equal to 1000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 5000
      return false if !@name.nil? && @name.to_s.length < 0
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
      adult_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless adult_pool_validator.valid?(@adult_pool)
      airport_shuttle_validator = EnumAttributeValidator.new('String', ["AIRPORT_SHUTTLE_AVAILABLE", "AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless airport_shuttle_validator.valid?(@airport_shuttle)
      airport_transfer_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless airport_transfer_validator.valid?(@airport_transfer)
      all_inclusive_validator = EnumAttributeValidator.new('String', ["ALL_INCLUSIVE_RATES_AVAILABLE", "ALL_INCLUSIVE_RATES_ONLY", "NOT_APPLICABLE"])
      return false unless all_inclusive_validator.valid?(@all_inclusive)
      return false if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
      return false if !@android_app_url.nil? && @android_app_url.to_s.length < 0
      babysitting_offered_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless babysitting_offered_validator.valid?(@babysitting_offered)
      baggage_storage_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless baggage_storage_validator.valid?(@baggage_storage)
      bar_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless bar_validator.valid?(@bar)
      beach_access_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless beach_access_validator.valid?(@beach_access)
      beach_front_property_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless beach_front_property_validator.valid?(@beach_front_property)
      bicycles_validator = EnumAttributeValidator.new('String', ["BICYCLE_RENTALS", "BICYCLE_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      return false unless bicycles_validator.valid?(@bicycles)
      boutique_stores_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless boutique_stores_validator.valid?(@boutique_stores)
      breakfast_validator = EnumAttributeValidator.new('String', ["BREAKFAST_AVAILABLE", "BREAKFAST_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless breakfast_validator.valid?(@breakfast)
      business_center_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless business_center_validator.valid?(@business_center)
      car_rental_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless car_rental_validator.valid?(@car_rental)
      casino_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless casino_validator.valid?(@casino)
      cats_allowed_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless cats_allowed_validator.valid?(@cats_allowed)
      return false if !@classification_rating.nil? && @classification_rating !~ Regexp.new(/^\d*\.?\d*$/)
      concierge_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless concierge_validator.valid?(@concierge)
      convenience_store_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless convenience_store_validator.valid?(@convenience_store)
      currency_exchange_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless currency_exchange_validator.valid?(@currency_exchange)
      return false if !@description.nil? && @description.to_s.length > 15000
      return false if !@description.nil? && @description.to_s.length < 10
      doctor_on_call_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless doctor_on_call_validator.valid?(@doctor_on_call)
      dogs_allowed_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless dogs_allowed_validator.valid?(@dogs_allowed)
      electric_charging_station_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless electric_charging_station_validator.valid?(@electric_charging_station)
      elevator_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless elevator_validator.valid?(@elevator)
      elliptical_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless elliptical_machine_validator.valid?(@elliptical_machine)
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
      return false if !@facebook_name.nil? && @facebook_name.to_s.length < 0
      return false if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
      return false if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
      return false if !@fax.nil? && @fax.to_s.length < 0
      return false if !@first_party_review_page.nil? && @first_party_review_page.to_s.length < 0
      fitness_center_validator = EnumAttributeValidator.new('String', ["FITNESS_CENTER_AVAILABLE", "FITNESS_CENTER_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless fitness_center_validator.valid?(@fitness_center)
      return false if !@floor_count.nil? && @floor_count < 0
      free_weights_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless free_weights_validator.valid?(@free_weights)
      front_desk_validator = EnumAttributeValidator.new('String', ["FRONT_DESK_AVAILABLE", "FRONT_DESK_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      return false unless front_desk_validator.valid?(@front_desk)
      game_room_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless game_room_validator.valid?(@game_room)
      return false if !@geomodifier.nil? && @geomodifier.to_s.length < 0
      gift_shop_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless gift_shop_validator.valid?(@gift_shop)
      golf_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless golf_validator.valid?(@golf)
      return false if !@google_place_id.nil? && @google_place_id.to_s.length < 0
      return false if !@google_website_override.nil? && @google_website_override.to_s.length < 0
      horseback_riding_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless horseback_riding_validator.valid?(@horseback_riding)
      hot_tub_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless hot_tub_validator.valid?(@hot_tub)
      housekeeping_validator = EnumAttributeValidator.new('String', ["HOUSEKEEPING_AVAILABLE", "HOUSEKEEPING_AVAILABLE_DAILY", "NOT_APPLICABLE"])
      return false unless housekeeping_validator.valid?(@housekeeping)
      return false if !@impressum.nil? && @impressum.to_s.length > 2000
      return false if !@impressum.nil? && @impressum.to_s.length < 0
      return false if !@indoor_pool_count.nil? && @indoor_pool_count < 0
      return false if !@instagram_handle.nil? && @instagram_handle.to_s.length > 30
      return false if !@instagram_handle.nil? && @instagram_handle.to_s.length < 0
      return false if !@ios_app_url.nil? && @ios_app_url.to_s.length < 0
      return false if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
      kid_friendly_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kid_friendly_validator.valid?(@kid_friendly)
      kids_club_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kids_club_validator.valid?(@kids_club)
      kids_stay_free_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kids_stay_free_validator.valid?(@kids_stay_free)
      return false if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
      laundry_validator = EnumAttributeValidator.new('String', ["FULL_SERVICE", "SELF_SERVICE", "NOT_APPLICABLE"])
      return false unless laundry_validator.valid?(@laundry)
      lazy_river_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless lazy_river_validator.valid?(@lazy_river)
      lifeguard_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless lifeguard_validator.valid?(@lifeguard)
      return false if !@local_phone.nil? && @local_phone.to_s.length < 0
      local_shuttle_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless local_shuttle_validator.valid?(@local_shuttle)
      location_type_validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      return false unless location_type_validator.valid?(@location_type)
      return false if !@main_phone.nil? && @main_phone.to_s.length < 0
      massage_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless massage_validator.valid?(@massage)
      return false if !@max_age_of_kids_stay_free.nil? && @max_age_of_kids_stay_free < 0
      return false if !@max_number_of_kids_stay_free.nil? && @max_number_of_kids_stay_free < 0
      return false if !@meeting_room_count.nil? && @meeting_room_count < 0
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
      mobility_accessible_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless mobility_accessible_validator.valid?(@mobility_accessible)
      nightclub_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless nightclub_validator.valid?(@nightclub)
      return false if !@outdoor_pool_count.nil? && @outdoor_pool_count < 0
      parking_validator = EnumAttributeValidator.new('String', ["PARKING_AVAILABLE", "PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless parking_validator.valid?(@parking)
      pets_allowed_validator = EnumAttributeValidator.new('String', ["PETS_WELCOME", "PETS_WELCOME_FOR_FREE", "NOT_APPLICABLE", "NOT_ALLOWED"])
      return false unless pets_allowed_validator.valid?(@pets_allowed)
      return false if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
      private_beach_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless private_beach_validator.valid?(@private_beach)
      private_car_service_validator = EnumAttributeValidator.new('String', ["PRIVATE_CAR_SERVICE", "PRIVATE_CAR_SERVICE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless private_car_service_validator.valid?(@private_car_service)
      rank_tracking_frequency_validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      return false unless rank_tracking_frequency_validator.valid?(@rank_tracking_frequency)
      return false if !@restaurant_count.nil? && @restaurant_count < 0
      return false if !@review_generation_url.nil? && @review_generation_url.to_s.length < 0
      return false if !@room_count.nil? && @room_count < 0
      room_service_validator = EnumAttributeValidator.new('String', ["ROOM_SERVICE_AVAILABLE", "ROOM_SERVICE_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      return false unless room_service_validator.valid?(@room_service)
      salon_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless salon_validator.valid?(@salon)
      sauna_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless sauna_validator.valid?(@sauna)
      scuba_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless scuba_validator.valid?(@scuba)
      self_parking_validator = EnumAttributeValidator.new('String', ["SELF_PARKING_AVAILABLE", "SELF_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless self_parking_validator.valid?(@self_parking)
      smoke_free_property_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless smoke_free_property_validator.valid?(@smoke_free_property)
      snorkeling_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless snorkeling_validator.valid?(@snorkeling)
      social_hour_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless social_hour_validator.valid?(@social_hour)
      spa_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless spa_validator.valid?(@spa)
      table_service_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless table_service_validator.valid?(@table_service)
      tennis_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless tennis_validator.valid?(@tennis)
      thermal_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless thermal_pool_validator.valid?(@thermal_pool)
      return false if !@timezone.nil? && @timezone.to_s.length < 0
      return false if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
      treadmill_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless treadmill_validator.valid?(@treadmill)
      return false if !@tty_phone.nil? && @tty_phone.to_s.length < 0
      turndown_service_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless turndown_service_validator.valid?(@turndown_service)
      return false if !@twitter_handle.nil? && @twitter_handle.to_s.length > 15
      return false if !@twitter_handle.nil? && @twitter_handle.to_s.length < 0
      valet_parking_validator = EnumAttributeValidator.new('String', ["VALET_PARKING_AVAILABLE", "VALET_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless valet_parking_validator.valid?(@valet_parking)
      vending_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless vending_machine_validator.valid?(@vending_machine)
      wading_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wading_pool_validator.valid?(@wading_pool)
      wake_up_calls_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wake_up_calls_validator.valid?(@wake_up_calls)
      water_park_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless water_park_validator.valid?(@water_park)
      water_skiing_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless water_skiing_validator.valid?(@water_skiing)
      watercraft_validator = EnumAttributeValidator.new('String', ["WATERCRAFT_RENTALS", "WATERCRAFT_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      return false unless watercraft_validator.valid?(@watercraft)
      waterslide_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless waterslide_validator.valid?(@waterslide)
      wave_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wave_pool_validator.valid?(@wave_pool)
      weight_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless weight_machine_validator.valid?(@weight_machine)
      wheelchair_accessible_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wheelchair_accessible_validator.valid?(@wheelchair_accessible)
      wifi_available_validator = EnumAttributeValidator.new('String', ["WIFI_AVAILABLE", "WIFI_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless wifi_available_validator.valid?(@wifi_available)
      return false if !@year_established.nil? && @year_established > 2028
      return false if !@year_established.nil? && @year_established < 1000
      return false if !@year_last_renovated.nil? && @year_last_renovated > 2028
      return false if !@year_last_renovated.nil? && @year_last_renovated < 1000
      true && super
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 5000
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 5000.'
      end

      if !name.nil? && name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_hours_text Value to be assigned
    def additional_hours_text=(additional_hours_text)
      if !additional_hours_text.nil? && additional_hours_text.to_s.length > 255
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.'
      end

      if !additional_hours_text.nil? && additional_hours_text.to_s.length < 0
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be great than or equal to 0.'
      end

      @additional_hours_text = additional_hours_text
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adult_pool Object to be assigned
    def adult_pool=(adult_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(adult_pool)
        fail ArgumentError, "invalid value for \"adult_pool\", must be one of #{validator.allowable_values}."
      end
      @adult_pool = adult_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] airport_shuttle Object to be assigned
    def airport_shuttle=(airport_shuttle)
      validator = EnumAttributeValidator.new('String', ["AIRPORT_SHUTTLE_AVAILABLE", "AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(airport_shuttle)
        fail ArgumentError, "invalid value for \"airport_shuttle\", must be one of #{validator.allowable_values}."
      end
      @airport_shuttle = airport_shuttle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] airport_transfer Object to be assigned
    def airport_transfer=(airport_transfer)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(airport_transfer)
        fail ArgumentError, "invalid value for \"airport_transfer\", must be one of #{validator.allowable_values}."
      end
      @airport_transfer = airport_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] all_inclusive Object to be assigned
    def all_inclusive=(all_inclusive)
      validator = EnumAttributeValidator.new('String', ["ALL_INCLUSIVE_RATES_AVAILABLE", "ALL_INCLUSIVE_RATES_ONLY", "NOT_APPLICABLE"])
      unless validator.valid?(all_inclusive)
        fail ArgumentError, "invalid value for \"all_inclusive\", must be one of #{validator.allowable_values}."
      end
      @all_inclusive = all_inclusive
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_names Value to be assigned
    def alternate_names=(alternate_names)
      @alternate_names = alternate_names
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_phone Value to be assigned
    def alternate_phone=(alternate_phone)
      if !alternate_phone.nil? && alternate_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "alternate_phone", the character length must be great than or equal to 0.'
      end

      @alternate_phone = alternate_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_websites Value to be assigned
    def alternate_websites=(alternate_websites)
      @alternate_websites = alternate_websites
    end

    # Custom attribute writer method with validation
    # @param [Object] android_app_url Value to be assigned
    def android_app_url=(android_app_url)
      if !android_app_url.nil? && android_app_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "android_app_url", the character length must be great than or equal to 0.'
      end

      @android_app_url = android_app_url
    end

    # Custom attribute writer method with validation
    # @param [Object] associations Value to be assigned
    def associations=(associations)
      @associations = associations
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] babysitting_offered Object to be assigned
    def babysitting_offered=(babysitting_offered)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(babysitting_offered)
        fail ArgumentError, "invalid value for \"babysitting_offered\", must be one of #{validator.allowable_values}."
      end
      @babysitting_offered = babysitting_offered
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] baggage_storage Object to be assigned
    def baggage_storage=(baggage_storage)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(baggage_storage)
        fail ArgumentError, "invalid value for \"baggage_storage\", must be one of #{validator.allowable_values}."
      end
      @baggage_storage = baggage_storage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bar Object to be assigned
    def bar=(bar)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(bar)
        fail ArgumentError, "invalid value for \"bar\", must be one of #{validator.allowable_values}."
      end
      @bar = bar
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beach_access Object to be assigned
    def beach_access=(beach_access)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(beach_access)
        fail ArgumentError, "invalid value for \"beach_access\", must be one of #{validator.allowable_values}."
      end
      @beach_access = beach_access
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beach_front_property Object to be assigned
    def beach_front_property=(beach_front_property)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(beach_front_property)
        fail ArgumentError, "invalid value for \"beach_front_property\", must be one of #{validator.allowable_values}."
      end
      @beach_front_property = beach_front_property
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bicycles Object to be assigned
    def bicycles=(bicycles)
      validator = EnumAttributeValidator.new('String', ["BICYCLE_RENTALS", "BICYCLE_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(bicycles)
        fail ArgumentError, "invalid value for \"bicycles\", must be one of #{validator.allowable_values}."
      end
      @bicycles = bicycles
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boutique_stores Object to be assigned
    def boutique_stores=(boutique_stores)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(boutique_stores)
        fail ArgumentError, "invalid value for \"boutique_stores\", must be one of #{validator.allowable_values}."
      end
      @boutique_stores = boutique_stores
    end

    # Custom attribute writer method with validation
    # @param [Object] brands Value to be assigned
    def brands=(brands)
      @brands = brands
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] breakfast Object to be assigned
    def breakfast=(breakfast)
      validator = EnumAttributeValidator.new('String', ["BREAKFAST_AVAILABLE", "BREAKFAST_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(breakfast)
        fail ArgumentError, "invalid value for \"breakfast\", must be one of #{validator.allowable_values}."
      end
      @breakfast = breakfast
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_center Object to be assigned
    def business_center=(business_center)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(business_center)
        fail ArgumentError, "invalid value for \"business_center\", must be one of #{validator.allowable_values}."
      end
      @business_center = business_center
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] car_rental Object to be assigned
    def car_rental=(car_rental)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(car_rental)
        fail ArgumentError, "invalid value for \"car_rental\", must be one of #{validator.allowable_values}."
      end
      @car_rental = car_rental
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] casino Object to be assigned
    def casino=(casino)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(casino)
        fail ArgumentError, "invalid value for \"casino\", must be one of #{validator.allowable_values}."
      end
      @casino = casino
    end

    # Custom attribute writer method with validation
    # @param [Object] category_ids Value to be assigned
    def category_ids=(category_ids)
      @category_ids = category_ids
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cats_allowed Object to be assigned
    def cats_allowed=(cats_allowed)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(cats_allowed)
        fail ArgumentError, "invalid value for \"cats_allowed\", must be one of #{validator.allowable_values}."
      end
      @cats_allowed = cats_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] classification_rating Value to be assigned
    def classification_rating=(classification_rating)
      pattern = Regexp.new(/^\d*\.?\d*$/)
      if !classification_rating.nil? && classification_rating !~ pattern
        fail ArgumentError, "invalid value for \"classification_rating\", must conform to the pattern #{pattern}."
      end

      @classification_rating = classification_rating
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] concierge Object to be assigned
    def concierge=(concierge)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(concierge)
        fail ArgumentError, "invalid value for \"concierge\", must be one of #{validator.allowable_values}."
      end
      @concierge = concierge
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] convenience_store Object to be assigned
    def convenience_store=(convenience_store)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(convenience_store)
        fail ArgumentError, "invalid value for \"convenience_store\", must be one of #{validator.allowable_values}."
      end
      @convenience_store = convenience_store
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_exchange Object to be assigned
    def currency_exchange=(currency_exchange)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(currency_exchange)
        fail ArgumentError, "invalid value for \"currency_exchange\", must be one of #{validator.allowable_values}."
      end
      @currency_exchange = currency_exchange
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_keywords Value to be assigned
    def custom_keywords=(custom_keywords)
      @custom_keywords = custom_keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 15000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 15000.'
      end

      if !description.nil? && description.to_s.length < 10
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 10.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doctor_on_call Object to be assigned
    def doctor_on_call=(doctor_on_call)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(doctor_on_call)
        fail ArgumentError, "invalid value for \"doctor_on_call\", must be one of #{validator.allowable_values}."
      end
      @doctor_on_call = doctor_on_call
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dogs_allowed Object to be assigned
    def dogs_allowed=(dogs_allowed)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(dogs_allowed)
        fail ArgumentError, "invalid value for \"dogs_allowed\", must be one of #{validator.allowable_values}."
      end
      @dogs_allowed = dogs_allowed
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] electric_charging_station Object to be assigned
    def electric_charging_station=(electric_charging_station)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(electric_charging_station)
        fail ArgumentError, "invalid value for \"electric_charging_station\", must be one of #{validator.allowable_values}."
      end
      @electric_charging_station = electric_charging_station
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] elevator Object to be assigned
    def elevator=(elevator)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(elevator)
        fail ArgumentError, "invalid value for \"elevator\", must be one of #{validator.allowable_values}."
      end
      @elevator = elevator
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] elliptical_machine Object to be assigned
    def elliptical_machine=(elliptical_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(elliptical_machine)
        fail ArgumentError, "invalid value for \"elliptical_machine\", must be one of #{validator.allowable_values}."
      end
      @elliptical_machine = elliptical_machine
    end

    # Custom attribute writer method with validation
    # @param [Object] emails Value to be assigned
    def emails=(emails)
      @emails = emails
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_descriptor Value to be assigned
    def facebook_descriptor=(facebook_descriptor)
      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length > 75
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.'
      end

      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length < 3
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be great than or equal to 3.'
      end

      @facebook_descriptor = facebook_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_name Value to be assigned
    def facebook_name=(facebook_name)
      if !facebook_name.nil? && facebook_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_name", the character length must be great than or equal to 0.'
      end

      @facebook_name = facebook_name
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_override_city Value to be assigned
    def facebook_override_city=(facebook_override_city)
      if !facebook_override_city.nil? && facebook_override_city.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_override_city", the character length must be great than or equal to 0.'
      end

      @facebook_override_city = facebook_override_city
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_page_url Value to be assigned
    def facebook_page_url=(facebook_page_url)
      if !facebook_page_url.nil? && facebook_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_page_url", the character length must be great than or equal to 0.'
      end

      @facebook_page_url = facebook_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_vanity_url Value to be assigned
    def facebook_vanity_url=(facebook_vanity_url)
      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length > 50
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.'
      end

      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.'
      end

      @facebook_vanity_url = facebook_vanity_url
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length < 0
        fail ArgumentError, 'invalid value for "fax", the character length must be great than or equal to 0.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] first_party_review_page Value to be assigned
    def first_party_review_page=(first_party_review_page)
      if !first_party_review_page.nil? && first_party_review_page.to_s.length < 0
        fail ArgumentError, 'invalid value for "first_party_review_page", the character length must be great than or equal to 0.'
      end

      @first_party_review_page = first_party_review_page
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fitness_center Object to be assigned
    def fitness_center=(fitness_center)
      validator = EnumAttributeValidator.new('String', ["FITNESS_CENTER_AVAILABLE", "FITNESS_CENTER_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(fitness_center)
        fail ArgumentError, "invalid value for \"fitness_center\", must be one of #{validator.allowable_values}."
      end
      @fitness_center = fitness_center
    end

    # Custom attribute writer method with validation
    # @param [Object] floor_count Value to be assigned
    def floor_count=(floor_count)
      if !floor_count.nil? && floor_count < 0
        fail ArgumentError, 'invalid value for "floor_count", must be greater than or equal to 0.'
      end

      @floor_count = floor_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] free_weights Object to be assigned
    def free_weights=(free_weights)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(free_weights)
        fail ArgumentError, "invalid value for \"free_weights\", must be one of #{validator.allowable_values}."
      end
      @free_weights = free_weights
    end

    # Custom attribute writer method with validation
    # @param [Object] frequently_asked_questions Value to be assigned
    def frequently_asked_questions=(frequently_asked_questions)
      @frequently_asked_questions = frequently_asked_questions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] front_desk Object to be assigned
    def front_desk=(front_desk)
      validator = EnumAttributeValidator.new('String', ["FRONT_DESK_AVAILABLE", "FRONT_DESK_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      unless validator.valid?(front_desk)
        fail ArgumentError, "invalid value for \"front_desk\", must be one of #{validator.allowable_values}."
      end
      @front_desk = front_desk
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] game_room Object to be assigned
    def game_room=(game_room)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(game_room)
        fail ArgumentError, "invalid value for \"game_room\", must be one of #{validator.allowable_values}."
      end
      @game_room = game_room
    end

    # Custom attribute writer method with validation
    # @param [Object] geomodifier Value to be assigned
    def geomodifier=(geomodifier)
      if !geomodifier.nil? && geomodifier.to_s.length < 0
        fail ArgumentError, 'invalid value for "geomodifier", the character length must be great than or equal to 0.'
      end

      @geomodifier = geomodifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gift_shop Object to be assigned
    def gift_shop=(gift_shop)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(gift_shop)
        fail ArgumentError, "invalid value for \"gift_shop\", must be one of #{validator.allowable_values}."
      end
      @gift_shop = gift_shop
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] golf Object to be assigned
    def golf=(golf)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(golf)
        fail ArgumentError, "invalid value for \"golf\", must be one of #{validator.allowable_values}."
      end
      @golf = golf
    end

    # Custom attribute writer method with validation
    # @param [Object] google_my_business_labels Value to be assigned
    def google_my_business_labels=(google_my_business_labels)
      @google_my_business_labels = google_my_business_labels
    end

    # Custom attribute writer method with validation
    # @param [Object] google_place_id Value to be assigned
    def google_place_id=(google_place_id)
      if !google_place_id.nil? && google_place_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_place_id", the character length must be great than or equal to 0.'
      end

      @google_place_id = google_place_id
    end

    # Custom attribute writer method with validation
    # @param [Object] google_website_override Value to be assigned
    def google_website_override=(google_website_override)
      if !google_website_override.nil? && google_website_override.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_website_override", the character length must be great than or equal to 0.'
      end

      @google_website_override = google_website_override
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] horseback_riding Object to be assigned
    def horseback_riding=(horseback_riding)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(horseback_riding)
        fail ArgumentError, "invalid value for \"horseback_riding\", must be one of #{validator.allowable_values}."
      end
      @horseback_riding = horseback_riding
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hot_tub Object to be assigned
    def hot_tub=(hot_tub)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(hot_tub)
        fail ArgumentError, "invalid value for \"hot_tub\", must be one of #{validator.allowable_values}."
      end
      @hot_tub = hot_tub
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] housekeeping Object to be assigned
    def housekeeping=(housekeeping)
      validator = EnumAttributeValidator.new('String', ["HOUSEKEEPING_AVAILABLE", "HOUSEKEEPING_AVAILABLE_DAILY", "NOT_APPLICABLE"])
      unless validator.valid?(housekeeping)
        fail ArgumentError, "invalid value for \"housekeeping\", must be one of #{validator.allowable_values}."
      end
      @housekeeping = housekeeping
    end

    # Custom attribute writer method with validation
    # @param [Object] impressum Value to be assigned
    def impressum=(impressum)
      if !impressum.nil? && impressum.to_s.length > 2000
        fail ArgumentError, 'invalid value for "impressum", the character length must be smaller than or equal to 2000.'
      end

      if !impressum.nil? && impressum.to_s.length < 0
        fail ArgumentError, 'invalid value for "impressum", the character length must be great than or equal to 0.'
      end

      @impressum = impressum
    end

    # Custom attribute writer method with validation
    # @param [Object] indoor_pool_count Value to be assigned
    def indoor_pool_count=(indoor_pool_count)
      if !indoor_pool_count.nil? && indoor_pool_count < 0
        fail ArgumentError, 'invalid value for "indoor_pool_count", must be greater than or equal to 0.'
      end

      @indoor_pool_count = indoor_pool_count
    end

    # Custom attribute writer method with validation
    # @param [Object] instagram_handle Value to be assigned
    def instagram_handle=(instagram_handle)
      if !instagram_handle.nil? && instagram_handle.to_s.length > 30
        fail ArgumentError, 'invalid value for "instagram_handle", the character length must be smaller than or equal to 30.'
      end

      if !instagram_handle.nil? && instagram_handle.to_s.length < 0
        fail ArgumentError, 'invalid value for "instagram_handle", the character length must be great than or equal to 0.'
      end

      @instagram_handle = instagram_handle
    end

    # Custom attribute writer method with validation
    # @param [Object] ios_app_url Value to be assigned
    def ios_app_url=(ios_app_url)
      if !ios_app_url.nil? && ios_app_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "ios_app_url", the character length must be great than or equal to 0.'
      end

      @ios_app_url = ios_app_url
    end

    # Custom attribute writer method with validation
    # @param [Object] iso_region_code Value to be assigned
    def iso_region_code=(iso_region_code)
      if !iso_region_code.nil? && iso_region_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "iso_region_code", the character length must be great than or equal to 0.'
      end

      @iso_region_code = iso_region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] keywords Value to be assigned
    def keywords=(keywords)
      @keywords = keywords
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kid_friendly Object to be assigned
    def kid_friendly=(kid_friendly)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kid_friendly)
        fail ArgumentError, "invalid value for \"kid_friendly\", must be one of #{validator.allowable_values}."
      end
      @kid_friendly = kid_friendly
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kids_club Object to be assigned
    def kids_club=(kids_club)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kids_club)
        fail ArgumentError, "invalid value for \"kids_club\", must be one of #{validator.allowable_values}."
      end
      @kids_club = kids_club
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kids_stay_free Object to be assigned
    def kids_stay_free=(kids_stay_free)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kids_stay_free)
        fail ArgumentError, "invalid value for \"kids_stay_free\", must be one of #{validator.allowable_values}."
      end
      @kids_stay_free = kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] labels Value to be assigned
    def labels=(labels)
      @labels = labels
    end

    # Custom attribute writer method with validation
    # @param [Object] landing_page_url Value to be assigned
    def landing_page_url=(landing_page_url)
      if !landing_page_url.nil? && landing_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "landing_page_url", the character length must be great than or equal to 0.'
      end

      @landing_page_url = landing_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] languages Value to be assigned
    def languages=(languages)
      @languages = languages
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] laundry Object to be assigned
    def laundry=(laundry)
      validator = EnumAttributeValidator.new('String', ["FULL_SERVICE", "SELF_SERVICE", "NOT_APPLICABLE"])
      unless validator.valid?(laundry)
        fail ArgumentError, "invalid value for \"laundry\", must be one of #{validator.allowable_values}."
      end
      @laundry = laundry
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lazy_river Object to be assigned
    def lazy_river=(lazy_river)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(lazy_river)
        fail ArgumentError, "invalid value for \"lazy_river\", must be one of #{validator.allowable_values}."
      end
      @lazy_river = lazy_river
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifeguard Object to be assigned
    def lifeguard=(lifeguard)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(lifeguard)
        fail ArgumentError, "invalid value for \"lifeguard\", must be one of #{validator.allowable_values}."
      end
      @lifeguard = lifeguard
    end

    # Custom attribute writer method with validation
    # @param [Object] local_phone Value to be assigned
    def local_phone=(local_phone)
      if !local_phone.nil? && local_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "local_phone", the character length must be great than or equal to 0.'
      end

      @local_phone = local_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] local_shuttle Object to be assigned
    def local_shuttle=(local_shuttle)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(local_shuttle)
        fail ArgumentError, "invalid value for \"local_shuttle\", must be one of #{validator.allowable_values}."
      end
      @local_shuttle = local_shuttle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_type Object to be assigned
    def location_type=(location_type)
      validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      unless validator.valid?(location_type)
        fail ArgumentError, "invalid value for \"location_type\", must be one of #{validator.allowable_values}."
      end
      @location_type = location_type
    end

    # Custom attribute writer method with validation
    # @param [Object] main_phone Value to be assigned
    def main_phone=(main_phone)
      if !main_phone.nil? && main_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "main_phone", the character length must be great than or equal to 0.'
      end

      @main_phone = main_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] massage Object to be assigned
    def massage=(massage)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(massage)
        fail ArgumentError, "invalid value for \"massage\", must be one of #{validator.allowable_values}."
      end
      @massage = massage
    end

    # Custom attribute writer method with validation
    # @param [Object] max_age_of_kids_stay_free Value to be assigned
    def max_age_of_kids_stay_free=(max_age_of_kids_stay_free)
      if !max_age_of_kids_stay_free.nil? && max_age_of_kids_stay_free < 0
        fail ArgumentError, 'invalid value for "max_age_of_kids_stay_free", must be greater than or equal to 0.'
      end

      @max_age_of_kids_stay_free = max_age_of_kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] max_number_of_kids_stay_free Value to be assigned
    def max_number_of_kids_stay_free=(max_number_of_kids_stay_free)
      if !max_number_of_kids_stay_free.nil? && max_number_of_kids_stay_free < 0
        fail ArgumentError, 'invalid value for "max_number_of_kids_stay_free", must be greater than or equal to 0.'
      end

      @max_number_of_kids_stay_free = max_number_of_kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] meeting_room_count Value to be assigned
    def meeting_room_count=(meeting_room_count)
      if !meeting_room_count.nil? && meeting_room_count < 0
        fail ArgumentError, 'invalid value for "meeting_room_count", must be greater than or equal to 0.'
      end

      @meeting_room_count = meeting_room_count
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)
      if !mobile_phone.nil? && mobile_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "mobile_phone", the character length must be great than or equal to 0.'
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobility_accessible Object to be assigned
    def mobility_accessible=(mobility_accessible)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(mobility_accessible)
        fail ArgumentError, "invalid value for \"mobility_accessible\", must be one of #{validator.allowable_values}."
      end
      @mobility_accessible = mobility_accessible
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nightclub Object to be assigned
    def nightclub=(nightclub)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(nightclub)
        fail ArgumentError, "invalid value for \"nightclub\", must be one of #{validator.allowable_values}."
      end
      @nightclub = nightclub
    end

    # Custom attribute writer method with validation
    # @param [Object] outdoor_pool_count Value to be assigned
    def outdoor_pool_count=(outdoor_pool_count)
      if !outdoor_pool_count.nil? && outdoor_pool_count < 0
        fail ArgumentError, 'invalid value for "outdoor_pool_count", must be greater than or equal to 0.'
      end

      @outdoor_pool_count = outdoor_pool_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parking Object to be assigned
    def parking=(parking)
      validator = EnumAttributeValidator.new('String', ["PARKING_AVAILABLE", "PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(parking)
        fail ArgumentError, "invalid value for \"parking\", must be one of #{validator.allowable_values}."
      end
      @parking = parking
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pets_allowed Object to be assigned
    def pets_allowed=(pets_allowed)
      validator = EnumAttributeValidator.new('String', ["PETS_WELCOME", "PETS_WELCOME_FOR_FREE", "NOT_APPLICABLE", "NOT_ALLOWED"])
      unless validator.valid?(pets_allowed)
        fail ArgumentError, "invalid value for \"pets_allowed\", must be one of #{validator.allowable_values}."
      end
      @pets_allowed = pets_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] photo_gallery Value to be assigned
    def photo_gallery=(photo_gallery)
      @photo_gallery = photo_gallery
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_conversation_contact Value to be assigned
    def primary_conversation_contact=(primary_conversation_contact)
      if !primary_conversation_contact.nil? && primary_conversation_contact.to_s.length < 0
        fail ArgumentError, 'invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.'
      end

      @primary_conversation_contact = primary_conversation_contact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] private_beach Object to be assigned
    def private_beach=(private_beach)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(private_beach)
        fail ArgumentError, "invalid value for \"private_beach\", must be one of #{validator.allowable_values}."
      end
      @private_beach = private_beach
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] private_car_service Object to be assigned
    def private_car_service=(private_car_service)
      validator = EnumAttributeValidator.new('String', ["PRIVATE_CAR_SERVICE", "PRIVATE_CAR_SERVICE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(private_car_service)
        fail ArgumentError, "invalid value for \"private_car_service\", must be one of #{validator.allowable_values}."
      end
      @private_car_service = private_car_service
    end

    # Custom attribute writer method with validation
    # @param [Object] rank_tracking_competitors Value to be assigned
    def rank_tracking_competitors=(rank_tracking_competitors)
      @rank_tracking_competitors = rank_tracking_competitors
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rank_tracking_frequency Object to be assigned
    def rank_tracking_frequency=(rank_tracking_frequency)
      validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      unless validator.valid?(rank_tracking_frequency)
        fail ArgumentError, "invalid value for \"rank_tracking_frequency\", must be one of #{validator.allowable_values}."
      end
      @rank_tracking_frequency = rank_tracking_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] restaurant_count Value to be assigned
    def restaurant_count=(restaurant_count)
      if !restaurant_count.nil? && restaurant_count < 0
        fail ArgumentError, 'invalid value for "restaurant_count", must be greater than or equal to 0.'
      end

      @restaurant_count = restaurant_count
    end

    # Custom attribute writer method with validation
    # @param [Object] review_generation_url Value to be assigned
    def review_generation_url=(review_generation_url)
      if !review_generation_url.nil? && review_generation_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "review_generation_url", the character length must be great than or equal to 0.'
      end

      @review_generation_url = review_generation_url
    end

    # Custom attribute writer method with validation
    # @param [Object] room_count Value to be assigned
    def room_count=(room_count)
      if !room_count.nil? && room_count < 0
        fail ArgumentError, 'invalid value for "room_count", must be greater than or equal to 0.'
      end

      @room_count = room_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] room_service Object to be assigned
    def room_service=(room_service)
      validator = EnumAttributeValidator.new('String', ["ROOM_SERVICE_AVAILABLE", "ROOM_SERVICE_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      unless validator.valid?(room_service)
        fail ArgumentError, "invalid value for \"room_service\", must be one of #{validator.allowable_values}."
      end
      @room_service = room_service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] salon Object to be assigned
    def salon=(salon)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(salon)
        fail ArgumentError, "invalid value for \"salon\", must be one of #{validator.allowable_values}."
      end
      @salon = salon
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sauna Object to be assigned
    def sauna=(sauna)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(sauna)
        fail ArgumentError, "invalid value for \"sauna\", must be one of #{validator.allowable_values}."
      end
      @sauna = sauna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scuba Object to be assigned
    def scuba=(scuba)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(scuba)
        fail ArgumentError, "invalid value for \"scuba\", must be one of #{validator.allowable_values}."
      end
      @scuba = scuba
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_parking Object to be assigned
    def self_parking=(self_parking)
      validator = EnumAttributeValidator.new('String', ["SELF_PARKING_AVAILABLE", "SELF_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(self_parking)
        fail ArgumentError, "invalid value for \"self_parking\", must be one of #{validator.allowable_values}."
      end
      @self_parking = self_parking
    end

    # Custom attribute writer method with validation
    # @param [Object] service_area_places Value to be assigned
    def service_area_places=(service_area_places)
      @service_area_places = service_area_places
    end

    # Custom attribute writer method with validation
    # @param [Object] services Value to be assigned
    def services=(services)
      @services = services
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smoke_free_property Object to be assigned
    def smoke_free_property=(smoke_free_property)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(smoke_free_property)
        fail ArgumentError, "invalid value for \"smoke_free_property\", must be one of #{validator.allowable_values}."
      end
      @smoke_free_property = smoke_free_property
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] snorkeling Object to be assigned
    def snorkeling=(snorkeling)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(snorkeling)
        fail ArgumentError, "invalid value for \"snorkeling\", must be one of #{validator.allowable_values}."
      end
      @snorkeling = snorkeling
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] social_hour Object to be assigned
    def social_hour=(social_hour)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(social_hour)
        fail ArgumentError, "invalid value for \"social_hour\", must be one of #{validator.allowable_values}."
      end
      @social_hour = social_hour
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] spa Object to be assigned
    def spa=(spa)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(spa)
        fail ArgumentError, "invalid value for \"spa\", must be one of #{validator.allowable_values}."
      end
      @spa = spa
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] table_service Object to be assigned
    def table_service=(table_service)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(table_service)
        fail ArgumentError, "invalid value for \"table_service\", must be one of #{validator.allowable_values}."
      end
      @table_service = table_service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tennis Object to be assigned
    def tennis=(tennis)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(tennis)
        fail ArgumentError, "invalid value for \"tennis\", must be one of #{validator.allowable_values}."
      end
      @tennis = tennis
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] thermal_pool Object to be assigned
    def thermal_pool=(thermal_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(thermal_pool)
        fail ArgumentError, "invalid value for \"thermal_pool\", must be one of #{validator.allowable_values}."
      end
      @thermal_pool = thermal_pool
    end

    # Custom attribute writer method with validation
    # @param [Object] timezone Value to be assigned
    def timezone=(timezone)
      if !timezone.nil? && timezone.to_s.length < 0
        fail ArgumentError, 'invalid value for "timezone", the character length must be great than or equal to 0.'
      end

      @timezone = timezone
    end

    # Custom attribute writer method with validation
    # @param [Object] toll_free_phone Value to be assigned
    def toll_free_phone=(toll_free_phone)
      if !toll_free_phone.nil? && toll_free_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "toll_free_phone", the character length must be great than or equal to 0.'
      end

      @toll_free_phone = toll_free_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treadmill Object to be assigned
    def treadmill=(treadmill)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(treadmill)
        fail ArgumentError, "invalid value for \"treadmill\", must be one of #{validator.allowable_values}."
      end
      @treadmill = treadmill
    end

    # Custom attribute writer method with validation
    # @param [Object] tty_phone Value to be assigned
    def tty_phone=(tty_phone)
      if !tty_phone.nil? && tty_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "tty_phone", the character length must be great than or equal to 0.'
      end

      @tty_phone = tty_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] turndown_service Object to be assigned
    def turndown_service=(turndown_service)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(turndown_service)
        fail ArgumentError, "invalid value for \"turndown_service\", must be one of #{validator.allowable_values}."
      end
      @turndown_service = turndown_service
    end

    # Custom attribute writer method with validation
    # @param [Object] twitter_handle Value to be assigned
    def twitter_handle=(twitter_handle)
      if !twitter_handle.nil? && twitter_handle.to_s.length > 15
        fail ArgumentError, 'invalid value for "twitter_handle", the character length must be smaller than or equal to 15.'
      end

      if !twitter_handle.nil? && twitter_handle.to_s.length < 0
        fail ArgumentError, 'invalid value for "twitter_handle", the character length must be great than or equal to 0.'
      end

      @twitter_handle = twitter_handle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valet_parking Object to be assigned
    def valet_parking=(valet_parking)
      validator = EnumAttributeValidator.new('String', ["VALET_PARKING_AVAILABLE", "VALET_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(valet_parking)
        fail ArgumentError, "invalid value for \"valet_parking\", must be one of #{validator.allowable_values}."
      end
      @valet_parking = valet_parking
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vending_machine Object to be assigned
    def vending_machine=(vending_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(vending_machine)
        fail ArgumentError, "invalid value for \"vending_machine\", must be one of #{validator.allowable_values}."
      end
      @vending_machine = vending_machine
    end

    # Custom attribute writer method with validation
    # @param [Object] videos Value to be assigned
    def videos=(videos)
      @videos = videos
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wading_pool Object to be assigned
    def wading_pool=(wading_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wading_pool)
        fail ArgumentError, "invalid value for \"wading_pool\", must be one of #{validator.allowable_values}."
      end
      @wading_pool = wading_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wake_up_calls Object to be assigned
    def wake_up_calls=(wake_up_calls)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wake_up_calls)
        fail ArgumentError, "invalid value for \"wake_up_calls\", must be one of #{validator.allowable_values}."
      end
      @wake_up_calls = wake_up_calls
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] water_park Object to be assigned
    def water_park=(water_park)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(water_park)
        fail ArgumentError, "invalid value for \"water_park\", must be one of #{validator.allowable_values}."
      end
      @water_park = water_park
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] water_skiing Object to be assigned
    def water_skiing=(water_skiing)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(water_skiing)
        fail ArgumentError, "invalid value for \"water_skiing\", must be one of #{validator.allowable_values}."
      end
      @water_skiing = water_skiing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] watercraft Object to be assigned
    def watercraft=(watercraft)
      validator = EnumAttributeValidator.new('String', ["WATERCRAFT_RENTALS", "WATERCRAFT_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(watercraft)
        fail ArgumentError, "invalid value for \"watercraft\", must be one of #{validator.allowable_values}."
      end
      @watercraft = watercraft
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] waterslide Object to be assigned
    def waterslide=(waterslide)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(waterslide)
        fail ArgumentError, "invalid value for \"waterslide\", must be one of #{validator.allowable_values}."
      end
      @waterslide = waterslide
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wave_pool Object to be assigned
    def wave_pool=(wave_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wave_pool)
        fail ArgumentError, "invalid value for \"wave_pool\", must be one of #{validator.allowable_values}."
      end
      @wave_pool = wave_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weight_machine Object to be assigned
    def weight_machine=(weight_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(weight_machine)
        fail ArgumentError, "invalid value for \"weight_machine\", must be one of #{validator.allowable_values}."
      end
      @weight_machine = weight_machine
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wheelchair_accessible Object to be assigned
    def wheelchair_accessible=(wheelchair_accessible)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wheelchair_accessible)
        fail ArgumentError, "invalid value for \"wheelchair_accessible\", must be one of #{validator.allowable_values}."
      end
      @wheelchair_accessible = wheelchair_accessible
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wifi_available Object to be assigned
    def wifi_available=(wifi_available)
      validator = EnumAttributeValidator.new('String', ["WIFI_AVAILABLE", "WIFI_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(wifi_available)
        fail ArgumentError, "invalid value for \"wifi_available\", must be one of #{validator.allowable_values}."
      end
      @wifi_available = wifi_available
    end

    # Custom attribute writer method with validation
    # @param [Object] year_established Value to be assigned
    def year_established=(year_established)
      if !year_established.nil? && year_established > 2028
        fail ArgumentError, 'invalid value for "year_established", must be smaller than or equal to 2028.'
      end

      if !year_established.nil? && year_established < 1000
        fail ArgumentError, 'invalid value for "year_established", must be greater than or equal to 1000.'
      end

      @year_established = year_established
    end

    # Custom attribute writer method with validation
    # @param [Object] year_last_renovated Value to be assigned
    def year_last_renovated=(year_last_renovated)
      if !year_last_renovated.nil? && year_last_renovated > 2028
        fail ArgumentError, 'invalid value for "year_last_renovated", must be smaller than or equal to 2028.'
      end

      if !year_last_renovated.nil? && year_last_renovated < 1000
        fail ArgumentError, 'invalid value for "year_last_renovated", must be greater than or equal to 1000.'
      end

      @year_last_renovated = year_last_renovated
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          meta == o.meta &&
          name == o.name &&
          address == o.address &&
          access_hours == o.access_hours &&
          additional_hours_text == o.additional_hours_text &&
          address_hidden == o.address_hidden &&
          adult_pool == o.adult_pool &&
          airport_shuttle == o.airport_shuttle &&
          airport_transfer == o.airport_transfer &&
          all_inclusive == o.all_inclusive &&
          alternate_names == o.alternate_names &&
          alternate_phone == o.alternate_phone &&
          alternate_websites == o.alternate_websites &&
          android_app_url == o.android_app_url &&
          associations == o.associations &&
          babysitting_offered == o.babysitting_offered &&
          baggage_storage == o.baggage_storage &&
          bar == o.bar &&
          beach_access == o.beach_access &&
          beach_front_property == o.beach_front_property &&
          bicycles == o.bicycles &&
          bios == o.bios &&
          boutique_stores == o.boutique_stores &&
          brands == o.brands &&
          breakfast == o.breakfast &&
          brunch_hours == o.brunch_hours &&
          business_center == o.business_center &&
          calendars == o.calendars &&
          car_rental == o.car_rental &&
          casino == o.casino &&
          category_ids == o.category_ids &&
          cats_allowed == o.cats_allowed &&
          check_in_time == o.check_in_time &&
          check_out_time == o.check_out_time &&
          classification_rating == o.classification_rating &&
          closed == o.closed &&
          concierge == o.concierge &&
          convenience_store == o.convenience_store &&
          currency_exchange == o.currency_exchange &&
          custom_keywords == o.custom_keywords &&
          description == o.description &&
          display_coordinate == o.display_coordinate &&
          doctor_on_call == o.doctor_on_call &&
          dogs_allowed == o.dogs_allowed &&
          dropoff_coordinate == o.dropoff_coordinate &&
          electric_charging_station == o.electric_charging_station &&
          elevator == o.elevator &&
          elliptical_machine == o.elliptical_machine &&
          emails == o.emails &&
          facebook_call_to_action == o.facebook_call_to_action &&
          facebook_cover_photo == o.facebook_cover_photo &&
          facebook_descriptor == o.facebook_descriptor &&
          facebook_name == o.facebook_name &&
          facebook_override_city == o.facebook_override_city &&
          facebook_page_url == o.facebook_page_url &&
          facebook_profile_photo == o.facebook_profile_photo &&
          facebook_vanity_url == o.facebook_vanity_url &&
          fax == o.fax &&
          featured_message == o.featured_message &&
          first_party_review_page == o.first_party_review_page &&
          fitness_center == o.fitness_center &&
          floor_count == o.floor_count &&
          free_weights == o.free_weights &&
          frequently_asked_questions == o.frequently_asked_questions &&
          front_desk == o.front_desk &&
          fully_vaccinated_staff == o.fully_vaccinated_staff &&
          game_room == o.game_room &&
          geomodifier == o.geomodifier &&
          gift_shop == o.gift_shop &&
          golf == o.golf &&
          google_attributes == o.google_attributes &&
          google_cover_photo == o.google_cover_photo &&
          google_my_business_labels == o.google_my_business_labels &&
          google_place_id == o.google_place_id &&
          google_profile_photo == o.google_profile_photo &&
          google_website_override == o.google_website_override &&
          happy_hours == o.happy_hours &&
          holiday_hours_conversation_enabled == o.holiday_hours_conversation_enabled &&
          horseback_riding == o.horseback_riding &&
          hot_tub == o.hot_tub &&
          hours == o.hours &&
          housekeeping == o.housekeeping &&
          impressum == o.impressum &&
          indoor_pool_count == o.indoor_pool_count &&
          instagram_handle == o.instagram_handle &&
          ios_app_url == o.ios_app_url &&
          iso_region_code == o.iso_region_code &&
          keywords == o.keywords &&
          kid_friendly == o.kid_friendly &&
          kids_club == o.kids_club &&
          kids_stay_free == o.kids_stay_free &&
          kitchen_hours == o.kitchen_hours &&
          labels == o.labels &&
          landing_page_url == o.landing_page_url &&
          languages == o.languages &&
          laundry == o.laundry &&
          lazy_river == o.lazy_river &&
          lifeguard == o.lifeguard &&
          local_phone == o.local_phone &&
          local_shuttle == o.local_shuttle &&
          location_type == o.location_type &&
          logo == o.logo &&
          main_phone == o.main_phone &&
          massage == o.massage &&
          max_age_of_kids_stay_free == o.max_age_of_kids_stay_free &&
          max_number_of_kids_stay_free == o.max_number_of_kids_stay_free &&
          meeting_room_count == o.meeting_room_count &&
          menu_url == o.menu_url &&
          menus == o.menus &&
          mobile_phone == o.mobile_phone &&
          mobility_accessible == o.mobility_accessible &&
          nightclub == o.nightclub &&
          nudge_enabled == o.nudge_enabled &&
          order_url == o.order_url &&
          outdoor_pool_count == o.outdoor_pool_count &&
          parking == o.parking &&
          payment_options == o.payment_options &&
          pets_allowed == o.pets_allowed &&
          photo_gallery == o.photo_gallery &&
          pickup_coordinate == o.pickup_coordinate &&
          primary_conversation_contact == o.primary_conversation_contact &&
          private_beach == o.private_beach &&
          private_car_service == o.private_car_service &&
          product_lists == o.product_lists &&
          questions_and_answers == o.questions_and_answers &&
          rank_tracking_competitors == o.rank_tracking_competitors &&
          rank_tracking_enabled == o.rank_tracking_enabled &&
          rank_tracking_frequency == o.rank_tracking_frequency &&
          rank_tracking_query_templates == o.rank_tracking_query_templates &&
          rank_tracking_sites == o.rank_tracking_sites &&
          reservation_url == o.reservation_url &&
          restaurant_count == o.restaurant_count &&
          review_generation_url == o.review_generation_url &&
          review_response_conversation_enabled == o.review_response_conversation_enabled &&
          room_count == o.room_count &&
          room_service == o.room_service &&
          routable_coordinate == o.routable_coordinate &&
          salon == o.salon &&
          sauna == o.sauna &&
          scuba == o.scuba &&
          self_parking == o.self_parking &&
          service_area == o.service_area &&
          service_area_places == o.service_area_places &&
          services == o.services &&
          smoke_free_property == o.smoke_free_property &&
          snorkeling == o.snorkeling &&
          social_hour == o.social_hour &&
          spa == o.spa &&
          table_service == o.table_service &&
          tennis == o.tennis &&
          thermal_pool == o.thermal_pool &&
          timezone == o.timezone &&
          toll_free_phone == o.toll_free_phone &&
          treadmill == o.treadmill &&
          tty_phone == o.tty_phone &&
          turndown_service == o.turndown_service &&
          twitter_handle == o.twitter_handle &&
          uber_link == o.uber_link &&
          uber_trip_branding == o.uber_trip_branding &&
          valet_parking == o.valet_parking &&
          vending_machine == o.vending_machine &&
          videos == o.videos &&
          wading_pool == o.wading_pool &&
          wake_up_calls == o.wake_up_calls &&
          walkable_coordinate == o.walkable_coordinate &&
          water_park == o.water_park &&
          water_skiing == o.water_skiing &&
          watercraft == o.watercraft &&
          waterslide == o.waterslide &&
          wave_pool == o.wave_pool &&
          website_url == o.website_url &&
          weight_machine == o.weight_machine &&
          wheelchair_accessible == o.wheelchair_accessible &&
          wifi_available == o.wifi_available &&
          year_established == o.year_established &&
          year_last_renovated == o.year_last_renovated && super(o)
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [meta, name, address, access_hours, additional_hours_text, address_hidden, adult_pool, airport_shuttle, airport_transfer, all_inclusive, alternate_names, alternate_phone, alternate_websites, android_app_url, associations, babysitting_offered, baggage_storage, bar, beach_access, beach_front_property, bicycles, bios, boutique_stores, brands, breakfast, brunch_hours, business_center, calendars, car_rental, casino, category_ids, cats_allowed, check_in_time, check_out_time, classification_rating, closed, concierge, convenience_store, currency_exchange, custom_keywords, description, display_coordinate, doctor_on_call, dogs_allowed, dropoff_coordinate, electric_charging_station, elevator, elliptical_machine, emails, facebook_call_to_action, facebook_cover_photo, facebook_descriptor, facebook_name, facebook_override_city, facebook_page_url, facebook_profile_photo, facebook_vanity_url, fax, featured_message, first_party_review_page, fitness_center, floor_count, free_weights, frequently_asked_questions, front_desk, fully_vaccinated_staff, game_room, geomodifier, gift_shop, golf, google_attributes, google_cover_photo, google_my_business_labels, google_place_id, google_profile_photo, google_website_override, happy_hours, holiday_hours_conversation_enabled, horseback_riding, hot_tub, hours, housekeeping, impressum, indoor_pool_count, instagram_handle, ios_app_url, iso_region_code, keywords, kid_friendly, kids_club, kids_stay_free, kitchen_hours, labels, landing_page_url, languages, laundry, lazy_river, lifeguard, local_phone, local_shuttle, location_type, logo, main_phone, massage, max_age_of_kids_stay_free, max_number_of_kids_stay_free, meeting_room_count, menu_url, menus, mobile_phone, mobility_accessible, nightclub, nudge_enabled, order_url, outdoor_pool_count, parking, payment_options, pets_allowed, photo_gallery, pickup_coordinate, primary_conversation_contact, private_beach, private_car_service, product_lists, questions_and_answers, rank_tracking_competitors, rank_tracking_enabled, rank_tracking_frequency, rank_tracking_query_templates, rank_tracking_sites, reservation_url, restaurant_count, review_generation_url, review_response_conversation_enabled, room_count, room_service, routable_coordinate, salon, sauna, scuba, self_parking, service_area, service_area_places, services, smoke_free_property, snorkeling, social_hour, spa, table_service, tennis, thermal_pool, timezone, toll_free_phone, treadmill, tty_phone, turndown_service, twitter_handle, uber_link, uber_trip_branding, valet_parking, vending_machine, videos, wading_pool, wake_up_calls, walkable_coordinate, water_park, water_skiing, watercraft, waterslide, wave_pool, website_url, weight_machine, wheelchair_accessible, wifi_available, year_established, year_last_renovated].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      super(attributes)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = super
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
