=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class JobWriteAllOf
    attr_accessor :meta

    #    Cannot Include: * HTML markup
    attr_accessor :name

    # The application URL
    attr_accessor :application_url

    # Yext Category IDs.  IDs must be valid and selectable (i.e., cannot be parent categories).  NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings. 
    attr_accessor :category_ids

    # The date this entity was posted
    attr_accessor :date_posted

    # A description of the entity   Cannot Include: * HTML markup
    attr_accessor :description

    attr_accessor :display_coordinate

    # The employment type for the open job. Indicates whether the job is full-time, part-time, temporary, etc.
    attr_accessor :employment_type

    # The unique IDs of the entity's Google My Business keywords, as well as the unique IDs of any values selected for each keyword.  Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.  Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).  * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ \"id\": \"has_wheelchair_accessible_entrance\", \"values\": [ \"true\" ] }]`) * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ \"has_wheelchair_accessible_entrance\": [ \"true\" ]}`)  **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.
    attr_accessor :google_attributes

    # The organization that is hiring for the open job
    attr_accessor :hiring_organization

    # Keywords that describe the entity.  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup
    attr_accessor :keywords

    # The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.
    attr_accessor :labels

    # The URL of this entity's Landing Page that was created with Yext Pages
    attr_accessor :landing_page_url

    attr_accessor :location

    attr_accessor :logo

    # Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity
    attr_accessor :nudge_enabled

    # ID of the user who is the primary Knowledge Assistant contact for the entity
    attr_accessor :primary_conversation_contact

    # The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `\"America/New_York\"`
    attr_accessor :timezone

    # The date this entity is valid through.
    attr_accessor :valid_through

    # Indicates whether the job is remote.
    attr_accessor :work_remote

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'meta' => :'meta',
        :'name' => :'name',
        :'application_url' => :'applicationUrl',
        :'category_ids' => :'categoryIds',
        :'date_posted' => :'datePosted',
        :'description' => :'description',
        :'display_coordinate' => :'displayCoordinate',
        :'employment_type' => :'employmentType',
        :'google_attributes' => :'googleAttributes',
        :'hiring_organization' => :'hiringOrganization',
        :'keywords' => :'keywords',
        :'labels' => :'labels',
        :'landing_page_url' => :'landingPageUrl',
        :'location' => :'location',
        :'logo' => :'logo',
        :'nudge_enabled' => :'nudgeEnabled',
        :'primary_conversation_contact' => :'primaryConversationContact',
        :'timezone' => :'timezone',
        :'valid_through' => :'validThrough',
        :'work_remote' => :'workRemote'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'meta' => :'AtmWriteAllOfMeta',
        :'name' => :'String',
        :'application_url' => :'String',
        :'category_ids' => :'Array<String>',
        :'date_posted' => :'Date',
        :'description' => :'String',
        :'display_coordinate' => :'AtmWriteAllOfDisplayCoordinate',
        :'employment_type' => :'String',
        :'google_attributes' => :'Object',
        :'hiring_organization' => :'String',
        :'keywords' => :'Array<String>',
        :'labels' => :'Array<String>',
        :'landing_page_url' => :'String',
        :'location' => :'JobWriteAllOfLocation',
        :'logo' => :'AtmWriteAllOfLogo',
        :'nudge_enabled' => :'Boolean',
        :'primary_conversation_contact' => :'String',
        :'timezone' => :'String',
        :'valid_through' => :'Time',
        :'work_remote' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::JobWriteAllOf` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::JobWriteAllOf`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'application_url')
        self.application_url = attributes[:'application_url']
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.key?(:'date_posted')
        self.date_posted = attributes[:'date_posted']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_coordinate')
        self.display_coordinate = attributes[:'display_coordinate']
      end

      if attributes.key?(:'employment_type')
        self.employment_type = attributes[:'employment_type']
      end

      if attributes.key?(:'google_attributes')
        self.google_attributes = attributes[:'google_attributes']
      end

      if attributes.key?(:'hiring_organization')
        self.hiring_organization = attributes[:'hiring_organization']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'landing_page_url')
        self.landing_page_url = attributes[:'landing_page_url']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'nudge_enabled')
        self.nudge_enabled = attributes[:'nudge_enabled']
      end

      if attributes.key?(:'primary_conversation_contact')
        self.primary_conversation_contact = attributes[:'primary_conversation_contact']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'valid_through')
        self.valid_through = attributes[:'valid_through']
      end

      if attributes.key?(:'work_remote')
        self.work_remote = attributes[:'work_remote']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 5000
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 5000.')
      end

      if !@name.nil? && @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@application_url.nil? && @application_url.to_s.length < 0
        invalid_properties.push('invalid value for "application_url", the character length must be great than or equal to 0.')
      end

      if !@description.nil? && @description.to_s.length > 15000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 15000.')
      end

      if !@description.nil? && @description.to_s.length < 10
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 10.')
      end

      if !@hiring_organization.nil? && @hiring_organization.to_s.length < 0
        invalid_properties.push('invalid value for "hiring_organization", the character length must be great than or equal to 0.')
      end

      if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "landing_page_url", the character length must be great than or equal to 0.')
      end

      if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
        invalid_properties.push('invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.')
      end

      if !@timezone.nil? && @timezone.to_s.length < 0
        invalid_properties.push('invalid value for "timezone", the character length must be great than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 5000
      return false if !@name.nil? && @name.to_s.length < 0
      return false if !@application_url.nil? && @application_url.to_s.length < 0
      return false if !@description.nil? && @description.to_s.length > 15000
      return false if !@description.nil? && @description.to_s.length < 10
      employment_type_validator = EnumAttributeValidator.new('String', ["FULL_TIME", "PART_TIME", "CONTRACTOR", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "OTHER"])
      return false unless employment_type_validator.valid?(@employment_type)
      return false if !@hiring_organization.nil? && @hiring_organization.to_s.length < 0
      return false if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
      return false if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
      return false if !@timezone.nil? && @timezone.to_s.length < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 5000
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 5000.'
      end

      if !name.nil? && name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] application_url Value to be assigned
    def application_url=(application_url)
      if !application_url.nil? && application_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "application_url", the character length must be great than or equal to 0.'
      end

      @application_url = application_url
    end

    # Custom attribute writer method with validation
    # @param [Object] category_ids Value to be assigned
    def category_ids=(category_ids)
      @category_ids = category_ids
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 15000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 15000.'
      end

      if !description.nil? && description.to_s.length < 10
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 10.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_type Object to be assigned
    def employment_type=(employment_type)
      validator = EnumAttributeValidator.new('String', ["FULL_TIME", "PART_TIME", "CONTRACTOR", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "OTHER"])
      unless validator.valid?(employment_type)
        fail ArgumentError, "invalid value for \"employment_type\", must be one of #{validator.allowable_values}."
      end
      @employment_type = employment_type
    end

    # Custom attribute writer method with validation
    # @param [Object] hiring_organization Value to be assigned
    def hiring_organization=(hiring_organization)
      if !hiring_organization.nil? && hiring_organization.to_s.length < 0
        fail ArgumentError, 'invalid value for "hiring_organization", the character length must be great than or equal to 0.'
      end

      @hiring_organization = hiring_organization
    end

    # Custom attribute writer method with validation
    # @param [Object] keywords Value to be assigned
    def keywords=(keywords)
      @keywords = keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] labels Value to be assigned
    def labels=(labels)
      @labels = labels
    end

    # Custom attribute writer method with validation
    # @param [Object] landing_page_url Value to be assigned
    def landing_page_url=(landing_page_url)
      if !landing_page_url.nil? && landing_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "landing_page_url", the character length must be great than or equal to 0.'
      end

      @landing_page_url = landing_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_conversation_contact Value to be assigned
    def primary_conversation_contact=(primary_conversation_contact)
      if !primary_conversation_contact.nil? && primary_conversation_contact.to_s.length < 0
        fail ArgumentError, 'invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.'
      end

      @primary_conversation_contact = primary_conversation_contact
    end

    # Custom attribute writer method with validation
    # @param [Object] timezone Value to be assigned
    def timezone=(timezone)
      if !timezone.nil? && timezone.to_s.length < 0
        fail ArgumentError, 'invalid value for "timezone", the character length must be great than or equal to 0.'
      end

      @timezone = timezone
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          meta == o.meta &&
          name == o.name &&
          application_url == o.application_url &&
          category_ids == o.category_ids &&
          date_posted == o.date_posted &&
          description == o.description &&
          display_coordinate == o.display_coordinate &&
          employment_type == o.employment_type &&
          google_attributes == o.google_attributes &&
          hiring_organization == o.hiring_organization &&
          keywords == o.keywords &&
          labels == o.labels &&
          landing_page_url == o.landing_page_url &&
          location == o.location &&
          logo == o.logo &&
          nudge_enabled == o.nudge_enabled &&
          primary_conversation_contact == o.primary_conversation_contact &&
          timezone == o.timezone &&
          valid_through == o.valid_through &&
          work_remote == o.work_remote
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [meta, name, application_url, category_ids, date_posted, description, display_coordinate, employment_type, google_attributes, hiring_organization, keywords, labels, landing_page_url, location, logo, nudge_enabled, primary_conversation_contact, timezone, valid_through, work_remote].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
