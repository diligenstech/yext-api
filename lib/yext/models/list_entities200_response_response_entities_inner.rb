=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  class ListEntities200ResponseResponseEntitiesInner
    attr_accessor :meta

    #    Cannot Include: * HTML markup  Filtering Type: `text`  ``` Eligible For:     * atm    * contactCard    * event    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :name

    attr_accessor :address

    # Indicates whether the healthcare provider is accepting new patients.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional ```
    attr_accessor :accepting_new_patients

    # Indicates whether the entity accepts reservations.  Filtering Type: `boolean`  ``` Eligible For:     * restaurant ```
    attr_accessor :accepts_reservations

    attr_accessor :access_hours

    # Additional information about hours that does not fit in **`hours`** (e.g., `\"Closed during the winter\"`)  Filtering Type: `text`  ``` Eligible For:     * atm    * contactCard    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :additional_hours_text

    # If other locations are promoting this event, a list of those locations' **`id`**s in the Yext Knowledge Manager   Array must be ordered.   Filtering Type: `list of entityId`  ``` Eligible For:     * event ```
    attr_accessor :additional_promoting_locations

    # If `true`, the entity's street address will not be shown on listings. Defaults to `false`.  Filtering Type: `boolean`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :address_hidden

    # A list of hospitals where the healthcare professional admits patients   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :admitting_hospitals

    # Indicates whether the entity has a pool for adults only.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :adult_pool

    attr_accessor :age_range

    # Indicates whether the entity offers a shuttle to/from the airport.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :airport_shuttle

    # Indicates whether the entity offers a shuttle service of car service to/from nearby airports or train stations.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :airport_transfer

    # Indicates whether the entity offers all-inclusive rates.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :all_inclusive

    # Other names for your business that you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :alternate_names

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :alternate_phone

    # Other websites for your business that we should search for when tracking your search performance   Array must be ordered.  Array may have a maximum of 3 elements.  Array item description:  >Cannot Include: >* common domain names, e.g., google.com, youtube.com, etc.  Filtering Type: `list of text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :alternate_websites

    # The URL where consumers can download the entity's Android app  Filtering Type: `text`  ``` Eligible For:     * financialProfessional    * hotel    * location    * restaurant ```
    attr_accessor :android_app_url

    # The answer to the frequently asked question represented by this entity   Character limit: 0 .. 15000  Supported formats include: * BOLD * ITALICS * UNDERLINE * BULLETED_LIST * NUMBERED_LIST * HYPERLINK * IMAGE * CODE_SPAN * HEADINGS  ``` Eligible For:     * faq ```
    attr_accessor :answer

    # The application URL  Filtering Type: `text`  ``` Eligible For:     * job ```
    attr_accessor :application_url

    # Association memberships relevant to the entity (e.g., `\"New York Doctors Association\"`) All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :associations

    attr_accessor :attendance

    # The formality of clothing typically worn at this restaurant  Filtering Type: `option`  ``` Eligible For:     * restaurant ```
    attr_accessor :attire

    # Indicates whether the entity offers babysitting.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :babysitting_offered

    # Indicates whether the entity offers baggage storage pre check-in and post check-out.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :baggage_storage

    # Indicates whether the entity has an indoor or outdoor bar onsite.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :bar

    # Indicates whether the entity has access to a beach.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :beach_access

    # Indicates whether the entity is physically located next to a beach.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :beach_front_property

    # Indicates whether the entity offers bicycles for rent or for free.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :bicycles

    attr_accessor :bios

    # Indicates whether the entity has a boutique store. Gift shop or convenience store are not eligible.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :boutique_stores

    # Brands sold by this entity All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :brands

    # Indicates whether the entity offers breakfast.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :breakfast

    attr_accessor :brunch_hours

    # Indicates whether the entity has a business center.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :business_center

    attr_accessor :calendars

    # Indicates whether the entity offers car rental.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :car_rental

    # Indicates whether the entity has a casino on premise or nearby.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :casino

    # Yext Category IDs.  IDs must be valid and selectable (i.e., cannot be parent categories).  NOTE: The list of category IDs that you send us must be comprehensive. For example, if you send us a list of IDs that does not include IDs that you sent in your last update, Yext considers the missing categories to be deleted, and we remove them from your listings.   Filtering Type: `list of text`  ``` Eligible For:     * atm    * event    * faq    * healthcareFacility    * healthcareProfessional    * hotel    * job    * location    * restaurant ```
    attr_accessor :category_ids

    # Indicates if the entity is cat friendly.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :cats_allowed

    # A list of the certifications held by the healthcare professional **NOTE:** This field is only available to locations whose **`entityType`** is `healthcareProfessional`.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * healthcareProfessional ```
    attr_accessor :certifications

    # The check-in time  Filtering Type: `time`  ``` Eligible For:     * hotel ```
    attr_accessor :check_in_time

    # The check-out time  Filtering Type: `time`  ``` Eligible For:     * hotel ```
    attr_accessor :check_out_time

    # The 1 to 5 star rating of the entitiy based on its services and facilities.  Filtering Type: `decimal`  ``` Eligible For:     * hotel ```
    attr_accessor :classification_rating

    # Indicates whether the entity is closed  Filtering Type: `boolean`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :closed

    # Indicates whether the entity offers concierge service.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :concierge

    # A list of the conditions treated by the healthcare provider   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional ```
    attr_accessor :conditions_treated

    # Indicates whether the entity has a convenience store.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :convenience_store

    # Information or messaging related to COVID-19.  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional    * location ```
    attr_accessor :covid_messaging

    # An appointment URL for scheduling a COVID-19 test.  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_test_appointment_url

    # Indicates whether an appointment is required for a COVID-19 test.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_appointment_required

    # Indicates whether location is a drive-through site for COVID-19 tests.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_drive_through_site

    # Indicates whether location offers free COVID-19 testing.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_is_free

    # Indicates whether there are patient restrictions for COVID-19 testing.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_patient_restrictions

    # Indicates whether a referral is required for COVID-19 testing.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_referral_required

    # Information or instructions for the COVID-19 testing site.  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_testing_site_instructions

    # Indicates whether an appointment is required for a COVID-19 vaccine.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_appointment_required

    # Indicates whether location is a drive-through site for COVID-19 vaccines.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_drive_through_site

    # An information URL for more information about COVID-19 vaccines.  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_information_url

    # Indicates whether there are patient restrictions for a COVID-19 vaccine.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_patient_restrictions

    # Indicates whether a referral is required for a COVID-19 vaccine.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_referral_required

    # Information or instructions for the COVID-19 vaccination site.  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccine_site_instructions

    # Indicates which COVID-19 vaccines the location offers.  Filtering Type: `list of option`  ``` Eligible For:     * healthcareFacility    * location ```
    attr_accessor :covid_vaccines_offered

    # Indicates whether the entity offers currency exchange services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :currency_exchange

    # Additional keywords you would like us to use when tracking your search performance   Array must be ordered.  Array may have a maximum of 5 elements.   Filtering Type: `list of text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :custom_keywords

    # The date this entity was posted  Filtering Type: `date`  ``` Eligible For:     * job ```
    attr_accessor :date_posted

    # A list of the degrees earned by the healthcare professional   Array must be ordered.   Filtering Type: `list of option`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :degrees

    attr_accessor :delivery_hours

    # A description of the entity   Cannot Include: * HTML markup  Filtering Type: `text`  ``` Eligible For:     * atm    * contactCard    * event    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * job    * location    * restaurant ```
    attr_accessor :description

    attr_accessor :display_coordinate

    # Indicates whether the entity has a doctor on premise or on call.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :doctor_on_call

    # Indicates if the entity is dog friendly.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :dogs_allowed

    attr_accessor :drive_through_hours

    attr_accessor :dropoff_coordinate

    # Information about the education or training completed by the healthcare professional   Array must be ordered.   Filtering Type: `list of object`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :education_list

    # Indicates whether the entity has electric car chargine stations on premise.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :electric_charging_station

    # Indicates whether the entity has an elevator.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :elevator

    # Indicates whether the entity has an elliptical machine.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :elliptical_machine

    # Emails addresses for this entity's point of contact  Must be valid email addresses    Array must be ordered.  Array may have a maximum of 5 elements.   Filtering Type: `list of text`  ``` Eligible For:     * contactCard    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :emails

    # The employment type for the open job. Indicates whether the job is full-time, part-time, temporary, etc.  Filtering Type: `option`  ``` Eligible For:     * job ```
    attr_accessor :employment_type

    # Information on whether the event will take place as scheduled  Filtering Type: `option`  ``` Eligible For:     * event ```
    attr_accessor :event_status

    attr_accessor :facebook_call_to_action

    attr_accessor :facebook_cover_photo

    # Location Descriptors are used for Enterprise businesses that sync Facebook listings using brand page location structure. The Location Descriptor is typically an additional geographic description (e.g. geomodifier) that will appear in parentheses after the name on the Facebook listing.   Cannot Include: * HTML markup  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :facebook_descriptor

    # The name for this entity's Facebook profile.  A separate name may be specified to send only to Facebook in order to comply with any specific Facebook rules or naming conventions.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :facebook_name

    # The city to be displayed on this entity's Facebook profile  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :facebook_override_city

    # URL for the entity's Facebook Page.  Valid formats:  - facebook.com/profile.php?id=[numId] - facebook.com/group.php?gid=[numId] - facebook.com/groups/[numId] - facebook.com/[Name] - facebook.com/pages/[Name]/[numId]  where [Name] is a String and [numId] is an Integer  If you submit a URL that is not in one of the valid formats, it will be ignored. The success response will contain a warning message explaining why the URL wasn't stored in the system.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :facebook_page_url

    attr_accessor :facebook_profile_photo

    # The username that appear's in the Facebook listing URL to help customers find and remember a brand’s Facebook page.  The username is also be used for tagging the Facebook page in other users’ posts, and searching for the Facebook page.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :facebook_vanity_url

    # Must be a valid fax number.  If the fax number's calling code is for a country other than the one given in the entity's **`countryCode`**, the fax number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :fax

    attr_accessor :featured_message

    # The first name of the healthcare professional   Cannot Include: * a URL or domain name * HTML markup  Filtering Type: `text`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :first_name

    # Link to the review-collection page, where consumers can leave first-party reviews  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :first_party_review_page

    # Indicates whether the entity has a fitness center.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :fitness_center

    # The number of floors the entity has from ground floor to top floor.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :floor_count

    # Indicates whether the entity has free weights.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :free_weights

    # A list of questions that are frequently asked about this entity   Array must be ordered.  Array may have a maximum of 100 elements.   Filtering Type: `list of object`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :frequently_asked_questions

    # Indicates whether the entity has a front desk.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :front_desk

    # Indicates whether the staff is vaccinated against COVID-19.  Filtering Type: `boolean`  ``` Eligible For:     * healthcareFacility    * hotel    * location    * restaurant ```
    attr_accessor :fully_vaccinated_staff

    # Indicates whether the entity has a game room.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :game_room

    # The gender of the healthcare professional  Filtering Type: `option`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :gender

    # Provides additional information on where the entity can be found (e.g., `Times Square`, `Global Center Mall`)  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :geomodifier

    # Indicates whether the entity has a gift shop.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :gift_shop

    # Indicates whether the entity has a golf couse on premise or nearby. The golf course may be independently run.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :golf

    # The unique IDs of the entity's Google Business Profile keywords, as well as the unique IDs of any values selected for each keyword.  Valid keywords (e.g., `has_drive_through`, `has_fitting_room`, `kitchen_in_room`) are determined by the entity's primary category. A full list of keywords can be retrieved with the Google Fields: List endpoint.  Keyword values provide more details on how the keyword applies to the entity (e.g., if the keyword is `has_drive_through`, its values may be `true` or `false`).  * If the **`v`** parameter is before `20181204`: **`googleAttributes`** is formatted as a map of key-value pairs (e.g., `[{ \"id\": \"has_wheelchair_accessible_entrance\", \"values\": [ \"true\" ] }]`) * If the **`v`** parameter is on or after `20181204`: the contents are formatted as a list of objects (e.g., `{ \"has_wheelchair_accessible_entrance\": [ \"true\" ]}`)  **NOTE:** The latest Google Attributes are available via the Google Fields: List endpoint. Google Attributes are managed by Google and are subject to change without notice. To prevent errors, make sure your API implementation is not dependent on the presence of specific attributes.  Filtering Type: `object`  ``` Eligible For:     * atm    * event    * faq    * healthcareFacility    * healthcareProfessional    * hotel    * job    * location    * restaurant ```
    attr_accessor :google_attributes

    attr_accessor :google_cover_photo

    # Google Business Profile Labels help users organize their locations into groups within GBP.   Array must be ordered.  Array may have a maximum of 10 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :google_my_business_labels

    # The unique identifier of this entity on Google Maps.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :google_place_id

    attr_accessor :google_profile_photo

    # The URL you would like to submit to Google Business Profile in place of the one given in **`websiteUrl`** (if applicable).  For example, if you want to analyze the traffic driven by your Google listings separately from other traffic, enter the alternate URL that you will use for tracking in this field.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :google_website_override

    attr_accessor :happy_hours

    attr_accessor :headshot

    # The organization that is hiring for the open job  Filtering Type: `text`  ``` Eligible For:     * job ```
    attr_accessor :hiring_organization

    # Indicates whether holiday-hour confirmation alerts are enabled for the Yext Knowledge Assistant for this entity  Filtering Type: `boolean`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :holiday_hours_conversation_enabled

    # Indicates whether the entity offers horseback riding.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :horseback_riding

    # Indicates whether the entity has a hot tub.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :hot_tub

    attr_accessor :hours

    # Indicates whether the entity offers housekeeping services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :housekeeping

    # A statement of the ownership and authorship of a document. Individuals or organizations based in many German-speaking countries are required by law to include an Impressum in published media.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :impressum

    # A count of the number of indoor pools  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :indoor_pool_count

    # Valid Instagram username for the entity without the leading \"@\" (e.g., `NewCityAuto`)  Filtering Type: `text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :instagram_handle

    # A list of insurance policies accepted by the healthcare provider   Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional ```
    attr_accessor :insurance_accepted

    # The URL where consumers can download the entity's app to their iPhone or iPad  Filtering Type: `text`  ``` Eligible For:     * financialProfessional    * hotel    * location    * restaurant ```
    attr_accessor :ios_app_url

    # Indicates whether the healthcare entity is the primary entity in its group  Filtering Type: `boolean`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :is_cluster_primary

    # Indicates whether or not the event is free  Filtering Type: `boolean`  ``` Eligible For:     * event ```
    attr_accessor :is_free_event

    # The ISO 3166-2 region code for the entity  Yext will determine the entity's code and update **`isoRegionCode`** with that value. If Yext is unable to determine the code for the entity, the entity'ss ISO 3166-1 alpha-2 country code will be used.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :iso_region_code

    # Keywords that describe the entity.  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * atm    * event    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :keywords

    # Indicates if the entity is kid friendly.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :kid_friendly

    # Indicates if the property has a Kids Club.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :kids_club

    # Indicates whether the entity allows kids to stay free.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :kids_stay_free

    attr_accessor :kitchen_hours

    # The IDs of the entity labels that have been added to this entity. Entity labels help you identify entities that share a certain characteristic; they do not appear on your entity's listings.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API.  Filtering Type: `opaque`  ``` Eligible For:     * atm    * contactCard    * event    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :labels

    # The URL of this entity's Landing Page that was created with Yext Pages  Filtering Type: `text`  ``` Eligible For:     * atm    * event    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :landing_page_url

    # The langauges in which consumers can commicate with this entity or its staff members All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :languages

    # The last name of the healthcare professional   Cannot Include: * a URL or domain name * HTML markup  Filtering Type: `text`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :last_name

    # Indicates whether the entity offers laundry services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :laundry

    # Indicates if the property has a lazy river  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :lazy_river

    # Indicates if the property has a lifeguard on duty  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :lifeguard

    # location ID of the event location, if the event is held at a location managed in the Yext Knowledge Manager  Filtering Type: `entityId`  ``` Eligible For:     * contactCard    * event ```
    attr_accessor :linked_location

    # Must be a valid, non-toll-free phone number, based on the country specified in **`address.region`**. Phone numbers for US entities must contain 10 digits.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :local_phone

    # Indicates whether the entity offers local shuttle services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :local_shuttle

    # For atms, the external ID of the entity that the atm is installed in. The entity must be in the same business account as the atm.  Filtering Type: `entityId`  ``` Eligible For:     * atm ```
    attr_accessor :located_in

    attr_accessor :location

    # Indicates the entity's type, if it is not an event  Filtering Type: `option`  ``` Eligible For:     * atm    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :location_type

    attr_accessor :logo

    # The main phone number of the entity's point of contact  Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * contactCard    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :main_phone

    # Indicates whether the entity offers massage services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :massage

    # The maximum age specified by the property for children to stay in the room/suite of a parent or adult without an additional fee  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :max_age_of_kids_stay_free

    # The maximum number of children who can stay in the room/suite of a parent or adult without an additional fee  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :max_number_of_kids_stay_free

    # Types of meals served at this restaurant  Filtering Type: `list of option`  ``` Eligible For:     * restaurant ```
    attr_accessor :meals_served

    # The number of meeting rooms the entity has.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :meeting_room_count

    attr_accessor :menu_url

    attr_accessor :menus

    # The middle name of the healthcare professional   Cannot Include: * a URL or domain name * HTML markup  Filtering Type: `text`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :middle_name

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :mobile_phone

    # Indicates whether the entity is mobility/wheelchair accessible  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :mobility_accessible

    # Indicates whether the entity has a nightclub.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :nightclub

    # The National Provider Identifier (NPI) of the healthcare provider  Filtering Type: `text`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional ```
    attr_accessor :npi

    # Indicates whether Knowledge Nudge is enabled for the Yext Knowledge Assistant for this entity  Filtering Type: `boolean`  ``` Eligible For:     * atm    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :nudge_enabled

    # The name of the office where the healthcare professional works, if different from **`name`**  Filtering Type: `text`  ``` Eligible For:     * healthcareProfessional ```
    attr_accessor :office_name

    attr_accessor :online_service_hours

    attr_accessor :order_url

    # Point of contact for the event organizer (not to be published publicly)  Filtering Type: `text`  ``` Eligible For:     * event ```
    attr_accessor :organizer_email

    # Point of contact for the event organizer (not to be published publicly)  Filtering Type: `text`  ``` Eligible For:     * event ```
    attr_accessor :organizer_name

    # Point of contact for the event organizer (not to be published publicly)  Filtering Type: `text`  ``` Eligible For:     * event ```
    attr_accessor :organizer_phone

    # The number of outdoor pools the entity has.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :outdoor_pool_count

    # Indicates whether the entity offers parking services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :parking

    # The payment methods accepted by this entity  Valid elements depend on the entity's country.   Filtering Type: `list of option`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :payment_options

    # Performers at the event   Array must be ordered.  Array may have a maximum of 100 elements.   Filtering Type: `list of text`  ``` Eligible For:     * event ```
    attr_accessor :performers

    # Indicates if the entity is pet friendly.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :pets_allowed

    #  **NOTE:** The list of photos that you send us must be comprehensive. For example, if you send us a list of photos that does not include photos that you sent in your last update, Yext considers the missing photos to be deleted, and we remove them from your listings.    Array must be ordered.  Array may have a maximum of 500 elements.  Array item description:  >Supported Aspect Ratios: >* 1 x 1 >* 4 x 3 >* 3 x 2 >* 5 x 3 >* 16 x 9 >* 3 x 1 >* 2 x 3 >* 5 x 7 >* 4 x 5 >* 4 x 1 > >**NOTE**: Maximum image size is 5mb after normalization and padding (if applicable). As well, there is a 6 second download limit from the image host. >  Filtering Type: `list of object`  ``` Eligible For:     * atm    * event    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * product    * restaurant ```
    attr_accessor :photo_gallery

    attr_accessor :pickup_coordinate

    attr_accessor :pickup_hours

    # he typical price of products sold by this location, on a scale of 1 (low) to 4 (high)  Filtering Type: `option`  ``` Eligible For:     * atm    * healthcareFacility    * healthcareProfessional    * location    * restaurant ```
    attr_accessor :price_range

    # ID of the user who is the primary Knowledge Assistant contact for the entity  Filtering Type: `option`  ``` Eligible For:     * atm    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :primary_conversation_contact

    # Indicates whether the entity has access to a private beach.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :private_beach

    # Indicates whether the entity offers private car services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :private_car_service

    attr_accessor :product_lists

    # Products sold by this entity  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * location ```
    attr_accessor :products

    # Indicates whether Yext Knowledge Assistant question-and-answer conversations are enabled for this entity  Filtering Type: `boolean`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :questions_and_answers

    # Information about the competitors whose search performance you would like to compare to your own   Array must be ordered.  Array may have a maximum of 5 elements.   Filtering Type: `list of object`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :rank_tracking_competitors

    # Indicates whether Rank Tracking is enabled  Filtering Type: `boolean`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :rank_tracking_enabled

    # How often we send search queries to track your search performance  Filtering Type: `option`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :rank_tracking_frequency

    # The ways in which your keywords will be arranged in the search queries we use to track your performance   Array must have a minimum of 2 elements.  Array may have a maximum of 4 elements.   Filtering Type: `list of option`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :rank_tracking_query_templates

    # The search engines that we will use to track your performance  Filtering Type: `list of option`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :rank_tracking_sites

    attr_accessor :reservation_url

    # The number of restaurants the entity has.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :restaurant_count

    # The URL given Review Invitation emails where consumers can leave a review about the entity  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :review_generation_url

    # Indicates whether Yext Knowledge Assistant review-response conversations are enabled for this entity  Filtering Type: `boolean`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :review_response_conversation_enabled

    # The number of rooms the entity has.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :room_count

    # Indicates whether the entity offers room service.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :room_service

    attr_accessor :routable_coordinate

    # Indicates whether the entity has a salon.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :salon

    # Indicates whether the entity has a sauna.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :sauna

    # Indicates whether the entity offers scuba diving.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :scuba

    # Indicates whether the entity offers self parking services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :self_parking

    attr_accessor :senior_hours

    attr_accessor :service_area

    # Information about the area that is served by this entity. It is specified as a list of service area names and their associated types. **Only for Google Business Profile and Bing:** Currently, **serviceArea** is only supported by Google Business Profile and Bing and will not affect your listings on other sites.   Array may have a maximum of 200 elements.   Filtering Type: `list of object`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :service_area_places

    # Services offered by this entity  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :services

    # Indicates if the entity is smoke free.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :smoke_free_property

    # Indicates whether the entity offers snorkeling.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :snorkeling

    # Indicates whether the entity offers a social hour.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :social_hour

    # Indicates whether the entity has a spa.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :spa

    # Up to 100 of this entity's specialities (e.g., for food and dining: `Chicago style`)  All strings must be non-empty when trimmed of whitespace.    Array must be ordered.  Array may have a maximum of 100 elements.  Array item description:  >Cannot Include: >* HTML markup  Filtering Type: `list of text`  ``` Eligible For:     * financialProfessional    * location    * restaurant ```
    attr_accessor :specialities

    # Indicates whether the entity has a sit-down restaurant.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :table_service

    attr_accessor :takeout_hours

    # Indicates whether the entity has tennis courts.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :tennis

    # Indicates whether the entity has a thermal pool.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :thermal_pool

    # Information about the availability of tickets for the event  Filtering Type: `option`  ``` Eligible For:     * event ```
    attr_accessor :ticket_availability

    attr_accessor :ticket_price_range

    # The date/time tickets are available for sale (local time)  Filtering Type: `datetime`  ``` Eligible For:     * event ```
    attr_accessor :ticket_sale_date_time

    # URL to purchase tickets for the event (if ticketed)  Filtering Type: `text`  ``` Eligible For:     * event ```
    attr_accessor :ticket_url

    attr_accessor :time

    # Represents the time zone offset of the entity from UTC, in `±hh:mm` format.  For example, if the entity is 4 hours ahead of UTC time, the offset will be `+04:00`.  If the entity is 15.5 hours behind UTC time, the offset will be `-15:30`.  If the entity is in UTC time, the offset will be `+00:00`.   ``` Eligible For:     * atm    * event    * faq    * healthcareFacility    * healthcareProfessional    * hotel    * job    * location    * restaurant ```
    attr_accessor :time_zone_utc_offset

    # The timezone of the entity, in the standard `IANA time zone database` format (tz database). e.g. `\"America/New_York\"`  Filtering Type: `option`  ``` Eligible For:     * atm    * contactCard    * event    * faq    * financialProfessional    * healthcareFacility    * healthcareProfessional    * helpArticle    * hotel    * job    * location    * product    * restaurant ```
    attr_accessor :timezone

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :toll_free_phone

    # Indicates whether the entity has a treadmill.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :treadmill

    # Must be a valid phone number.  If the phone number's calling code is for a country other than the one given in the entity's **`countryCode`**, the phone number provided must contain the calling code (e.g., `+44` in `+442038083831`). Otherwise, the calling code is optional.  Filtering Type: `text`  ``` Eligible For:     * atm    * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :tty_phone

    # Indicates whether the entity offers turndown service.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :turndown_service

    # Valid Twitter handle for the entity without the leading \"@\" (e.g., `JohnSmith`)  If you submit an invalid Twitter handle, it will be ignored. The success response will contain a warning message explaining why your Twitter handle wasn't stored in the system.  Filtering Type: `text`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :twitter_handle

    attr_accessor :uber_link

    attr_accessor :uber_trip_branding

    # Indicates whether the entity offers valet parking services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :valet_parking

    # The date this entity is valid through.  Filtering Type: `datetime`  ``` Eligible For:     * job ```
    attr_accessor :valid_through

    # Indicates whether the entity has a vending machine.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :vending_machine

    # Name of the venue where the event is being held  Filtering Type: `text`  ``` Eligible For:     * event ```
    attr_accessor :venue_name

    # Valid YouTube URLs for embedding a video on some publisher sites  **NOTE:** Currently, only the first URL in the Array appears in your listings.    Array must be ordered.   Filtering Type: `list of object`  ``` Eligible For:     * financialProfessional    * healthcareFacility    * healthcareProfessional    * hotel    * location    * product    * restaurant ```
    attr_accessor :videos

    # Indicates whether the entity has a wading pool.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :wading_pool

    # Indicates whether the entity offers wake up call services.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :wake_up_calls

    attr_accessor :walkable_coordinate

    # Indicates whether the entity has a water park.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :water_park

    # Indicates whether the entity offers water skiing.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :water_skiing

    # Indicates whether the entity offers any kind of watercrafts.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :watercraft

    # Indicates whether the entity has a water slide.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :waterslide

    # Indicates whether the entity has a wave pool.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :wave_pool

    attr_accessor :website_url

    # Indicates whether the entity has a weight machine.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :weight_machine

    # Indicates if the entity is wheelchair accessible.  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :wheelchair_accessible

    # Indicates whether the entity has WiFi available  Filtering Type: `option`  ``` Eligible For:     * hotel ```
    attr_accessor :wifi_available

    # Indicates whether the job is remote.  Filtering Type: `boolean`  ``` Eligible For:     * job ```
    attr_accessor :work_remote

    # The year the entity was established.  Filtering Type: `integer`  ``` Eligible For:     * healthcareFacility    * healthcareProfessional    * hotel    * location    * restaurant ```
    attr_accessor :year_established

    # The most recent year the entity was partially or completely renovated.  Filtering Type: `integer`  ``` Eligible For:     * hotel ```
    attr_accessor :year_last_renovated

    attr_accessor :yext_display_coordinate

    attr_accessor :yext_dropoff_coordinate

    attr_accessor :yext_pickup_coordinate

    attr_accessor :yext_routable_coordinate

    attr_accessor :yext_walkable_coordinate

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'meta' => :'meta',
        :'name' => :'name',
        :'address' => :'address',
        :'accepting_new_patients' => :'acceptingNewPatients',
        :'accepts_reservations' => :'acceptsReservations',
        :'access_hours' => :'accessHours',
        :'additional_hours_text' => :'additionalHoursText',
        :'additional_promoting_locations' => :'additionalPromotingLocations',
        :'address_hidden' => :'addressHidden',
        :'admitting_hospitals' => :'admittingHospitals',
        :'adult_pool' => :'adultPool',
        :'age_range' => :'ageRange',
        :'airport_shuttle' => :'airportShuttle',
        :'airport_transfer' => :'airportTransfer',
        :'all_inclusive' => :'allInclusive',
        :'alternate_names' => :'alternateNames',
        :'alternate_phone' => :'alternatePhone',
        :'alternate_websites' => :'alternateWebsites',
        :'android_app_url' => :'androidAppUrl',
        :'answer' => :'answer',
        :'application_url' => :'applicationUrl',
        :'associations' => :'associations',
        :'attendance' => :'attendance',
        :'attire' => :'attire',
        :'babysitting_offered' => :'babysittingOffered',
        :'baggage_storage' => :'baggageStorage',
        :'bar' => :'bar',
        :'beach_access' => :'beachAccess',
        :'beach_front_property' => :'beachFrontProperty',
        :'bicycles' => :'bicycles',
        :'bios' => :'bios',
        :'boutique_stores' => :'boutiqueStores',
        :'brands' => :'brands',
        :'breakfast' => :'breakfast',
        :'brunch_hours' => :'brunchHours',
        :'business_center' => :'businessCenter',
        :'calendars' => :'calendars',
        :'car_rental' => :'carRental',
        :'casino' => :'casino',
        :'category_ids' => :'categoryIds',
        :'cats_allowed' => :'catsAllowed',
        :'certifications' => :'certifications',
        :'check_in_time' => :'checkInTime',
        :'check_out_time' => :'checkOutTime',
        :'classification_rating' => :'classificationRating',
        :'closed' => :'closed',
        :'concierge' => :'concierge',
        :'conditions_treated' => :'conditionsTreated',
        :'convenience_store' => :'convenienceStore',
        :'covid_messaging' => :'covidMessaging',
        :'covid_test_appointment_url' => :'covidTestAppointmentUrl',
        :'covid_testing_appointment_required' => :'covidTestingAppointmentRequired',
        :'covid_testing_drive_through_site' => :'covidTestingDriveThroughSite',
        :'covid_testing_is_free' => :'covidTestingIsFree',
        :'covid_testing_patient_restrictions' => :'covidTestingPatientRestrictions',
        :'covid_testing_referral_required' => :'covidTestingReferralRequired',
        :'covid_testing_site_instructions' => :'covidTestingSiteInstructions',
        :'covid_vaccine_appointment_required' => :'covidVaccineAppointmentRequired',
        :'covid_vaccine_drive_through_site' => :'covidVaccineDriveThroughSite',
        :'covid_vaccine_information_url' => :'covidVaccineInformationUrl',
        :'covid_vaccine_patient_restrictions' => :'covidVaccinePatientRestrictions',
        :'covid_vaccine_referral_required' => :'covidVaccineReferralRequired',
        :'covid_vaccine_site_instructions' => :'covidVaccineSiteInstructions',
        :'covid_vaccines_offered' => :'covidVaccinesOffered',
        :'currency_exchange' => :'currencyExchange',
        :'custom_keywords' => :'customKeywords',
        :'date_posted' => :'datePosted',
        :'degrees' => :'degrees',
        :'delivery_hours' => :'deliveryHours',
        :'description' => :'description',
        :'display_coordinate' => :'displayCoordinate',
        :'doctor_on_call' => :'doctorOnCall',
        :'dogs_allowed' => :'dogsAllowed',
        :'drive_through_hours' => :'driveThroughHours',
        :'dropoff_coordinate' => :'dropoffCoordinate',
        :'education_list' => :'educationList',
        :'electric_charging_station' => :'electricChargingStation',
        :'elevator' => :'elevator',
        :'elliptical_machine' => :'ellipticalMachine',
        :'emails' => :'emails',
        :'employment_type' => :'employmentType',
        :'event_status' => :'eventStatus',
        :'facebook_call_to_action' => :'facebookCallToAction',
        :'facebook_cover_photo' => :'facebookCoverPhoto',
        :'facebook_descriptor' => :'facebookDescriptor',
        :'facebook_name' => :'facebookName',
        :'facebook_override_city' => :'facebookOverrideCity',
        :'facebook_page_url' => :'facebookPageUrl',
        :'facebook_profile_photo' => :'facebookProfilePhoto',
        :'facebook_vanity_url' => :'facebookVanityUrl',
        :'fax' => :'fax',
        :'featured_message' => :'featuredMessage',
        :'first_name' => :'firstName',
        :'first_party_review_page' => :'firstPartyReviewPage',
        :'fitness_center' => :'fitnessCenter',
        :'floor_count' => :'floorCount',
        :'free_weights' => :'freeWeights',
        :'frequently_asked_questions' => :'frequentlyAskedQuestions',
        :'front_desk' => :'frontDesk',
        :'fully_vaccinated_staff' => :'fullyVaccinatedStaff',
        :'game_room' => :'gameRoom',
        :'gender' => :'gender',
        :'geomodifier' => :'geomodifier',
        :'gift_shop' => :'giftShop',
        :'golf' => :'golf',
        :'google_attributes' => :'googleAttributes',
        :'google_cover_photo' => :'googleCoverPhoto',
        :'google_my_business_labels' => :'googleMyBusinessLabels',
        :'google_place_id' => :'googlePlaceId',
        :'google_profile_photo' => :'googleProfilePhoto',
        :'google_website_override' => :'googleWebsiteOverride',
        :'happy_hours' => :'happyHours',
        :'headshot' => :'headshot',
        :'hiring_organization' => :'hiringOrganization',
        :'holiday_hours_conversation_enabled' => :'holidayHoursConversationEnabled',
        :'horseback_riding' => :'horsebackRiding',
        :'hot_tub' => :'hotTub',
        :'hours' => :'hours',
        :'housekeeping' => :'housekeeping',
        :'impressum' => :'impressum',
        :'indoor_pool_count' => :'indoorPoolCount',
        :'instagram_handle' => :'instagramHandle',
        :'insurance_accepted' => :'insuranceAccepted',
        :'ios_app_url' => :'iosAppUrl',
        :'is_cluster_primary' => :'isClusterPrimary',
        :'is_free_event' => :'isFreeEvent',
        :'iso_region_code' => :'isoRegionCode',
        :'keywords' => :'keywords',
        :'kid_friendly' => :'kidFriendly',
        :'kids_club' => :'kidsClub',
        :'kids_stay_free' => :'kidsStayFree',
        :'kitchen_hours' => :'kitchenHours',
        :'labels' => :'labels',
        :'landing_page_url' => :'landingPageUrl',
        :'languages' => :'languages',
        :'last_name' => :'lastName',
        :'laundry' => :'laundry',
        :'lazy_river' => :'lazyRiver',
        :'lifeguard' => :'lifeguard',
        :'linked_location' => :'linkedLocation',
        :'local_phone' => :'localPhone',
        :'local_shuttle' => :'localShuttle',
        :'located_in' => :'locatedIn',
        :'location' => :'location',
        :'location_type' => :'locationType',
        :'logo' => :'logo',
        :'main_phone' => :'mainPhone',
        :'massage' => :'massage',
        :'max_age_of_kids_stay_free' => :'maxAgeOfKidsStayFree',
        :'max_number_of_kids_stay_free' => :'maxNumberOfKidsStayFree',
        :'meals_served' => :'mealsServed',
        :'meeting_room_count' => :'meetingRoomCount',
        :'menu_url' => :'menuUrl',
        :'menus' => :'menus',
        :'middle_name' => :'middleName',
        :'mobile_phone' => :'mobilePhone',
        :'mobility_accessible' => :'mobilityAccessible',
        :'nightclub' => :'nightclub',
        :'npi' => :'npi',
        :'nudge_enabled' => :'nudgeEnabled',
        :'office_name' => :'officeName',
        :'online_service_hours' => :'onlineServiceHours',
        :'order_url' => :'orderUrl',
        :'organizer_email' => :'organizerEmail',
        :'organizer_name' => :'organizerName',
        :'organizer_phone' => :'organizerPhone',
        :'outdoor_pool_count' => :'outdoorPoolCount',
        :'parking' => :'parking',
        :'payment_options' => :'paymentOptions',
        :'performers' => :'performers',
        :'pets_allowed' => :'petsAllowed',
        :'photo_gallery' => :'photoGallery',
        :'pickup_coordinate' => :'pickupCoordinate',
        :'pickup_hours' => :'pickupHours',
        :'price_range' => :'priceRange',
        :'primary_conversation_contact' => :'primaryConversationContact',
        :'private_beach' => :'privateBeach',
        :'private_car_service' => :'privateCarService',
        :'product_lists' => :'productLists',
        :'products' => :'products',
        :'questions_and_answers' => :'questionsAndAnswers',
        :'rank_tracking_competitors' => :'rankTrackingCompetitors',
        :'rank_tracking_enabled' => :'rankTrackingEnabled',
        :'rank_tracking_frequency' => :'rankTrackingFrequency',
        :'rank_tracking_query_templates' => :'rankTrackingQueryTemplates',
        :'rank_tracking_sites' => :'rankTrackingSites',
        :'reservation_url' => :'reservationUrl',
        :'restaurant_count' => :'restaurantCount',
        :'review_generation_url' => :'reviewGenerationUrl',
        :'review_response_conversation_enabled' => :'reviewResponseConversationEnabled',
        :'room_count' => :'roomCount',
        :'room_service' => :'roomService',
        :'routable_coordinate' => :'routableCoordinate',
        :'salon' => :'salon',
        :'sauna' => :'sauna',
        :'scuba' => :'scuba',
        :'self_parking' => :'selfParking',
        :'senior_hours' => :'seniorHours',
        :'service_area' => :'serviceArea',
        :'service_area_places' => :'serviceAreaPlaces',
        :'services' => :'services',
        :'smoke_free_property' => :'smokeFreeProperty',
        :'snorkeling' => :'snorkeling',
        :'social_hour' => :'socialHour',
        :'spa' => :'spa',
        :'specialities' => :'specialities',
        :'table_service' => :'tableService',
        :'takeout_hours' => :'takeoutHours',
        :'tennis' => :'tennis',
        :'thermal_pool' => :'thermalPool',
        :'ticket_availability' => :'ticketAvailability',
        :'ticket_price_range' => :'ticketPriceRange',
        :'ticket_sale_date_time' => :'ticketSaleDateTime',
        :'ticket_url' => :'ticketUrl',
        :'time' => :'time',
        :'time_zone_utc_offset' => :'timeZoneUtcOffset',
        :'timezone' => :'timezone',
        :'toll_free_phone' => :'tollFreePhone',
        :'treadmill' => :'treadmill',
        :'tty_phone' => :'ttyPhone',
        :'turndown_service' => :'turndownService',
        :'twitter_handle' => :'twitterHandle',
        :'uber_link' => :'uberLink',
        :'uber_trip_branding' => :'uberTripBranding',
        :'valet_parking' => :'valetParking',
        :'valid_through' => :'validThrough',
        :'vending_machine' => :'vendingMachine',
        :'venue_name' => :'venueName',
        :'videos' => :'videos',
        :'wading_pool' => :'wadingPool',
        :'wake_up_calls' => :'wakeUpCalls',
        :'walkable_coordinate' => :'walkableCoordinate',
        :'water_park' => :'waterPark',
        :'water_skiing' => :'waterSkiing',
        :'watercraft' => :'watercraft',
        :'waterslide' => :'waterslide',
        :'wave_pool' => :'wavePool',
        :'website_url' => :'websiteUrl',
        :'weight_machine' => :'weightMachine',
        :'wheelchair_accessible' => :'wheelchairAccessible',
        :'wifi_available' => :'wifiAvailable',
        :'work_remote' => :'workRemote',
        :'year_established' => :'yearEstablished',
        :'year_last_renovated' => :'yearLastRenovated',
        :'yext_display_coordinate' => :'yextDisplayCoordinate',
        :'yext_dropoff_coordinate' => :'yextDropoffCoordinate',
        :'yext_pickup_coordinate' => :'yextPickupCoordinate',
        :'yext_routable_coordinate' => :'yextRoutableCoordinate',
        :'yext_walkable_coordinate' => :'yextWalkableCoordinate'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'meta' => :'ListEntities200ResponseResponseEntitiesInnerMeta',
        :'name' => :'String',
        :'address' => :'ListEntities200ResponseResponseEntitiesInnerAddress',
        :'accepting_new_patients' => :'Boolean',
        :'accepts_reservations' => :'Boolean',
        :'access_hours' => :'ListEntities200ResponseResponseEntitiesInnerAccessHours',
        :'additional_hours_text' => :'String',
        :'additional_promoting_locations' => :'Array<String>',
        :'address_hidden' => :'Boolean',
        :'admitting_hospitals' => :'Array<String>',
        :'adult_pool' => :'String',
        :'age_range' => :'ListEntities200ResponseResponseEntitiesInnerAgeRange',
        :'airport_shuttle' => :'String',
        :'airport_transfer' => :'String',
        :'all_inclusive' => :'String',
        :'alternate_names' => :'Array<String>',
        :'alternate_phone' => :'String',
        :'alternate_websites' => :'Array<String>',
        :'android_app_url' => :'String',
        :'answer' => :'String',
        :'application_url' => :'String',
        :'associations' => :'Array<String>',
        :'attendance' => :'ListEntities200ResponseResponseEntitiesInnerAttendance',
        :'attire' => :'String',
        :'babysitting_offered' => :'String',
        :'baggage_storage' => :'String',
        :'bar' => :'String',
        :'beach_access' => :'String',
        :'beach_front_property' => :'String',
        :'bicycles' => :'String',
        :'bios' => :'ListEntities200ResponseResponseEntitiesInnerBios',
        :'boutique_stores' => :'String',
        :'brands' => :'Array<String>',
        :'breakfast' => :'String',
        :'brunch_hours' => :'ListEntities200ResponseResponseEntitiesInnerBrunchHours',
        :'business_center' => :'String',
        :'calendars' => :'ListEntities200ResponseResponseEntitiesInnerCalendars',
        :'car_rental' => :'String',
        :'casino' => :'String',
        :'category_ids' => :'Array<String>',
        :'cats_allowed' => :'String',
        :'certifications' => :'Array<String>',
        :'check_in_time' => :'String',
        :'check_out_time' => :'String',
        :'classification_rating' => :'String',
        :'closed' => :'Boolean',
        :'concierge' => :'String',
        :'conditions_treated' => :'Array<String>',
        :'convenience_store' => :'String',
        :'covid_messaging' => :'String',
        :'covid_test_appointment_url' => :'String',
        :'covid_testing_appointment_required' => :'Boolean',
        :'covid_testing_drive_through_site' => :'Boolean',
        :'covid_testing_is_free' => :'Boolean',
        :'covid_testing_patient_restrictions' => :'Boolean',
        :'covid_testing_referral_required' => :'Boolean',
        :'covid_testing_site_instructions' => :'String',
        :'covid_vaccine_appointment_required' => :'Boolean',
        :'covid_vaccine_drive_through_site' => :'Boolean',
        :'covid_vaccine_information_url' => :'String',
        :'covid_vaccine_patient_restrictions' => :'Boolean',
        :'covid_vaccine_referral_required' => :'Boolean',
        :'covid_vaccine_site_instructions' => :'String',
        :'covid_vaccines_offered' => :'Array<String>',
        :'currency_exchange' => :'String',
        :'custom_keywords' => :'Array<String>',
        :'date_posted' => :'Date',
        :'degrees' => :'Array<String>',
        :'delivery_hours' => :'ListEntities200ResponseResponseEntitiesInnerDeliveryHours',
        :'description' => :'String',
        :'display_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerDisplayCoordinate',
        :'doctor_on_call' => :'String',
        :'dogs_allowed' => :'String',
        :'drive_through_hours' => :'ListEntities200ResponseResponseEntitiesInnerDriveThroughHours',
        :'dropoff_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerDropoffCoordinate',
        :'education_list' => :'Array<ListEntities200ResponseResponseEntitiesInnerEducationListInner>',
        :'electric_charging_station' => :'String',
        :'elevator' => :'String',
        :'elliptical_machine' => :'String',
        :'emails' => :'Array<String>',
        :'employment_type' => :'String',
        :'event_status' => :'String',
        :'facebook_call_to_action' => :'ListEntities200ResponseResponseEntitiesInnerFacebookCallToAction',
        :'facebook_cover_photo' => :'ListEntities200ResponseResponseEntitiesInnerFacebookCoverPhoto',
        :'facebook_descriptor' => :'String',
        :'facebook_name' => :'String',
        :'facebook_override_city' => :'String',
        :'facebook_page_url' => :'String',
        :'facebook_profile_photo' => :'ListEntities200ResponseResponseEntitiesInnerFacebookProfilePhoto',
        :'facebook_vanity_url' => :'String',
        :'fax' => :'String',
        :'featured_message' => :'ListEntities200ResponseResponseEntitiesInnerFeaturedMessage',
        :'first_name' => :'String',
        :'first_party_review_page' => :'String',
        :'fitness_center' => :'String',
        :'floor_count' => :'Float',
        :'free_weights' => :'String',
        :'frequently_asked_questions' => :'Array<ListEntities200ResponseResponseEntitiesInnerFrequentlyAskedQuestionsInner>',
        :'front_desk' => :'String',
        :'fully_vaccinated_staff' => :'Boolean',
        :'game_room' => :'String',
        :'gender' => :'String',
        :'geomodifier' => :'String',
        :'gift_shop' => :'String',
        :'golf' => :'String',
        :'google_attributes' => :'Object',
        :'google_cover_photo' => :'ListEntities200ResponseResponseEntitiesInnerGoogleCoverPhoto',
        :'google_my_business_labels' => :'Array<String>',
        :'google_place_id' => :'String',
        :'google_profile_photo' => :'ListEntities200ResponseResponseEntitiesInnerGoogleProfilePhoto',
        :'google_website_override' => :'String',
        :'happy_hours' => :'ListEntities200ResponseResponseEntitiesInnerHappyHours',
        :'headshot' => :'ListEntities200ResponseResponseEntitiesInnerHeadshot',
        :'hiring_organization' => :'String',
        :'holiday_hours_conversation_enabled' => :'Boolean',
        :'horseback_riding' => :'String',
        :'hot_tub' => :'String',
        :'hours' => :'ListEntities200ResponseResponseEntitiesInnerHours',
        :'housekeeping' => :'String',
        :'impressum' => :'String',
        :'indoor_pool_count' => :'Float',
        :'instagram_handle' => :'String',
        :'insurance_accepted' => :'Array<String>',
        :'ios_app_url' => :'String',
        :'is_cluster_primary' => :'Boolean',
        :'is_free_event' => :'Boolean',
        :'iso_region_code' => :'String',
        :'keywords' => :'Array<String>',
        :'kid_friendly' => :'String',
        :'kids_club' => :'String',
        :'kids_stay_free' => :'String',
        :'kitchen_hours' => :'ListEntities200ResponseResponseEntitiesInnerKitchenHours',
        :'labels' => :'Array<String>',
        :'landing_page_url' => :'String',
        :'languages' => :'Array<String>',
        :'last_name' => :'String',
        :'laundry' => :'String',
        :'lazy_river' => :'String',
        :'lifeguard' => :'String',
        :'linked_location' => :'String',
        :'local_phone' => :'String',
        :'local_shuttle' => :'String',
        :'located_in' => :'String',
        :'location' => :'ListEntities200ResponseResponseEntitiesInnerLocation',
        :'location_type' => :'String',
        :'logo' => :'ListEntities200ResponseResponseEntitiesInnerLogo',
        :'main_phone' => :'String',
        :'massage' => :'String',
        :'max_age_of_kids_stay_free' => :'Float',
        :'max_number_of_kids_stay_free' => :'Float',
        :'meals_served' => :'Array<String>',
        :'meeting_room_count' => :'Float',
        :'menu_url' => :'ListEntities200ResponseResponseEntitiesInnerMenuUrl',
        :'menus' => :'ListEntities200ResponseResponseEntitiesInnerMenus',
        :'middle_name' => :'String',
        :'mobile_phone' => :'String',
        :'mobility_accessible' => :'String',
        :'nightclub' => :'String',
        :'npi' => :'String',
        :'nudge_enabled' => :'Boolean',
        :'office_name' => :'String',
        :'online_service_hours' => :'ListEntities200ResponseResponseEntitiesInnerOnlineServiceHours',
        :'order_url' => :'ListEntities200ResponseResponseEntitiesInnerOrderUrl',
        :'organizer_email' => :'String',
        :'organizer_name' => :'String',
        :'organizer_phone' => :'String',
        :'outdoor_pool_count' => :'Float',
        :'parking' => :'String',
        :'payment_options' => :'Array<String>',
        :'performers' => :'Array<String>',
        :'pets_allowed' => :'String',
        :'photo_gallery' => :'Array<ListEntities200ResponseResponseEntitiesInnerPhotoGalleryInner>',
        :'pickup_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerPickupCoordinate',
        :'pickup_hours' => :'ListEntities200ResponseResponseEntitiesInnerPickupHours',
        :'price_range' => :'String',
        :'primary_conversation_contact' => :'String',
        :'private_beach' => :'String',
        :'private_car_service' => :'String',
        :'product_lists' => :'ListEntities200ResponseResponseEntitiesInnerProductLists',
        :'products' => :'Array<String>',
        :'questions_and_answers' => :'Boolean',
        :'rank_tracking_competitors' => :'Array<ListEntities200ResponseResponseEntitiesInnerRankTrackingCompetitorsInner>',
        :'rank_tracking_enabled' => :'Boolean',
        :'rank_tracking_frequency' => :'String',
        :'rank_tracking_query_templates' => :'Array<String>',
        :'rank_tracking_sites' => :'Array<String>',
        :'reservation_url' => :'ListEntities200ResponseResponseEntitiesInnerReservationUrl',
        :'restaurant_count' => :'Float',
        :'review_generation_url' => :'String',
        :'review_response_conversation_enabled' => :'Boolean',
        :'room_count' => :'Float',
        :'room_service' => :'String',
        :'routable_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerRoutableCoordinate',
        :'salon' => :'String',
        :'sauna' => :'String',
        :'scuba' => :'String',
        :'self_parking' => :'String',
        :'senior_hours' => :'ListEntities200ResponseResponseEntitiesInnerSeniorHours',
        :'service_area' => :'ListEntities200ResponseResponseEntitiesInnerServiceArea',
        :'service_area_places' => :'Array<ListEntities200ResponseResponseEntitiesInnerServiceAreaPlacesInner>',
        :'services' => :'Array<String>',
        :'smoke_free_property' => :'String',
        :'snorkeling' => :'String',
        :'social_hour' => :'String',
        :'spa' => :'String',
        :'specialities' => :'Array<String>',
        :'table_service' => :'String',
        :'takeout_hours' => :'ListEntities200ResponseResponseEntitiesInnerTakeoutHours',
        :'tennis' => :'String',
        :'thermal_pool' => :'String',
        :'ticket_availability' => :'String',
        :'ticket_price_range' => :'ListEntities200ResponseResponseEntitiesInnerTicketPriceRange',
        :'ticket_sale_date_time' => :'Time',
        :'ticket_url' => :'String',
        :'time' => :'ListEntities200ResponseResponseEntitiesInnerTime',
        :'time_zone_utc_offset' => :'String',
        :'timezone' => :'String',
        :'toll_free_phone' => :'String',
        :'treadmill' => :'String',
        :'tty_phone' => :'String',
        :'turndown_service' => :'String',
        :'twitter_handle' => :'String',
        :'uber_link' => :'ListEntities200ResponseResponseEntitiesInnerUberLink',
        :'uber_trip_branding' => :'ListEntities200ResponseResponseEntitiesInnerUberTripBranding',
        :'valet_parking' => :'String',
        :'valid_through' => :'Time',
        :'vending_machine' => :'String',
        :'venue_name' => :'String',
        :'videos' => :'Array<ListEntities200ResponseResponseEntitiesInnerVideosInner>',
        :'wading_pool' => :'String',
        :'wake_up_calls' => :'String',
        :'walkable_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerWalkableCoordinate',
        :'water_park' => :'String',
        :'water_skiing' => :'String',
        :'watercraft' => :'String',
        :'waterslide' => :'String',
        :'wave_pool' => :'String',
        :'website_url' => :'ListEntities200ResponseResponseEntitiesInnerWebsiteUrl',
        :'weight_machine' => :'String',
        :'wheelchair_accessible' => :'String',
        :'wifi_available' => :'String',
        :'work_remote' => :'Boolean',
        :'year_established' => :'Float',
        :'year_last_renovated' => :'Float',
        :'yext_display_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerYextDisplayCoordinate',
        :'yext_dropoff_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerYextDropoffCoordinate',
        :'yext_pickup_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerYextPickupCoordinate',
        :'yext_routable_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerYextRoutableCoordinate',
        :'yext_walkable_coordinate' => :'ListEntities200ResponseResponseEntitiesInnerYextWalkableCoordinate'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::ListEntities200ResponseResponseEntitiesInner` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::ListEntities200ResponseResponseEntitiesInner`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'meta')
        self.meta = attributes[:'meta']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'address')
        self.address = attributes[:'address']
      end

      if attributes.key?(:'accepting_new_patients')
        self.accepting_new_patients = attributes[:'accepting_new_patients']
      end

      if attributes.key?(:'accepts_reservations')
        self.accepts_reservations = attributes[:'accepts_reservations']
      end

      if attributes.key?(:'access_hours')
        self.access_hours = attributes[:'access_hours']
      end

      if attributes.key?(:'additional_hours_text')
        self.additional_hours_text = attributes[:'additional_hours_text']
      end

      if attributes.key?(:'additional_promoting_locations')
        if (value = attributes[:'additional_promoting_locations']).is_a?(Array)
          self.additional_promoting_locations = value
        end
      end

      if attributes.key?(:'address_hidden')
        self.address_hidden = attributes[:'address_hidden']
      end

      if attributes.key?(:'admitting_hospitals')
        if (value = attributes[:'admitting_hospitals']).is_a?(Array)
          self.admitting_hospitals = value
        end
      end

      if attributes.key?(:'adult_pool')
        self.adult_pool = attributes[:'adult_pool']
      end

      if attributes.key?(:'age_range')
        self.age_range = attributes[:'age_range']
      end

      if attributes.key?(:'airport_shuttle')
        self.airport_shuttle = attributes[:'airport_shuttle']
      end

      if attributes.key?(:'airport_transfer')
        self.airport_transfer = attributes[:'airport_transfer']
      end

      if attributes.key?(:'all_inclusive')
        self.all_inclusive = attributes[:'all_inclusive']
      end

      if attributes.key?(:'alternate_names')
        if (value = attributes[:'alternate_names']).is_a?(Array)
          self.alternate_names = value
        end
      end

      if attributes.key?(:'alternate_phone')
        self.alternate_phone = attributes[:'alternate_phone']
      end

      if attributes.key?(:'alternate_websites')
        if (value = attributes[:'alternate_websites']).is_a?(Array)
          self.alternate_websites = value
        end
      end

      if attributes.key?(:'android_app_url')
        self.android_app_url = attributes[:'android_app_url']
      end

      if attributes.key?(:'answer')
        self.answer = attributes[:'answer']
      end

      if attributes.key?(:'application_url')
        self.application_url = attributes[:'application_url']
      end

      if attributes.key?(:'associations')
        if (value = attributes[:'associations']).is_a?(Array)
          self.associations = value
        end
      end

      if attributes.key?(:'attendance')
        self.attendance = attributes[:'attendance']
      end

      if attributes.key?(:'attire')
        self.attire = attributes[:'attire']
      end

      if attributes.key?(:'babysitting_offered')
        self.babysitting_offered = attributes[:'babysitting_offered']
      end

      if attributes.key?(:'baggage_storage')
        self.baggage_storage = attributes[:'baggage_storage']
      end

      if attributes.key?(:'bar')
        self.bar = attributes[:'bar']
      end

      if attributes.key?(:'beach_access')
        self.beach_access = attributes[:'beach_access']
      end

      if attributes.key?(:'beach_front_property')
        self.beach_front_property = attributes[:'beach_front_property']
      end

      if attributes.key?(:'bicycles')
        self.bicycles = attributes[:'bicycles']
      end

      if attributes.key?(:'bios')
        self.bios = attributes[:'bios']
      end

      if attributes.key?(:'boutique_stores')
        self.boutique_stores = attributes[:'boutique_stores']
      end

      if attributes.key?(:'brands')
        if (value = attributes[:'brands']).is_a?(Array)
          self.brands = value
        end
      end

      if attributes.key?(:'breakfast')
        self.breakfast = attributes[:'breakfast']
      end

      if attributes.key?(:'brunch_hours')
        self.brunch_hours = attributes[:'brunch_hours']
      end

      if attributes.key?(:'business_center')
        self.business_center = attributes[:'business_center']
      end

      if attributes.key?(:'calendars')
        self.calendars = attributes[:'calendars']
      end

      if attributes.key?(:'car_rental')
        self.car_rental = attributes[:'car_rental']
      end

      if attributes.key?(:'casino')
        self.casino = attributes[:'casino']
      end

      if attributes.key?(:'category_ids')
        if (value = attributes[:'category_ids']).is_a?(Array)
          self.category_ids = value
        end
      end

      if attributes.key?(:'cats_allowed')
        self.cats_allowed = attributes[:'cats_allowed']
      end

      if attributes.key?(:'certifications')
        if (value = attributes[:'certifications']).is_a?(Array)
          self.certifications = value
        end
      end

      if attributes.key?(:'check_in_time')
        self.check_in_time = attributes[:'check_in_time']
      end

      if attributes.key?(:'check_out_time')
        self.check_out_time = attributes[:'check_out_time']
      end

      if attributes.key?(:'classification_rating')
        self.classification_rating = attributes[:'classification_rating']
      end

      if attributes.key?(:'closed')
        self.closed = attributes[:'closed']
      end

      if attributes.key?(:'concierge')
        self.concierge = attributes[:'concierge']
      end

      if attributes.key?(:'conditions_treated')
        if (value = attributes[:'conditions_treated']).is_a?(Array)
          self.conditions_treated = value
        end
      end

      if attributes.key?(:'convenience_store')
        self.convenience_store = attributes[:'convenience_store']
      end

      if attributes.key?(:'covid_messaging')
        self.covid_messaging = attributes[:'covid_messaging']
      end

      if attributes.key?(:'covid_test_appointment_url')
        self.covid_test_appointment_url = attributes[:'covid_test_appointment_url']
      end

      if attributes.key?(:'covid_testing_appointment_required')
        self.covid_testing_appointment_required = attributes[:'covid_testing_appointment_required']
      end

      if attributes.key?(:'covid_testing_drive_through_site')
        self.covid_testing_drive_through_site = attributes[:'covid_testing_drive_through_site']
      end

      if attributes.key?(:'covid_testing_is_free')
        self.covid_testing_is_free = attributes[:'covid_testing_is_free']
      end

      if attributes.key?(:'covid_testing_patient_restrictions')
        self.covid_testing_patient_restrictions = attributes[:'covid_testing_patient_restrictions']
      end

      if attributes.key?(:'covid_testing_referral_required')
        self.covid_testing_referral_required = attributes[:'covid_testing_referral_required']
      end

      if attributes.key?(:'covid_testing_site_instructions')
        self.covid_testing_site_instructions = attributes[:'covid_testing_site_instructions']
      end

      if attributes.key?(:'covid_vaccine_appointment_required')
        self.covid_vaccine_appointment_required = attributes[:'covid_vaccine_appointment_required']
      end

      if attributes.key?(:'covid_vaccine_drive_through_site')
        self.covid_vaccine_drive_through_site = attributes[:'covid_vaccine_drive_through_site']
      end

      if attributes.key?(:'covid_vaccine_information_url')
        self.covid_vaccine_information_url = attributes[:'covid_vaccine_information_url']
      end

      if attributes.key?(:'covid_vaccine_patient_restrictions')
        self.covid_vaccine_patient_restrictions = attributes[:'covid_vaccine_patient_restrictions']
      end

      if attributes.key?(:'covid_vaccine_referral_required')
        self.covid_vaccine_referral_required = attributes[:'covid_vaccine_referral_required']
      end

      if attributes.key?(:'covid_vaccine_site_instructions')
        self.covid_vaccine_site_instructions = attributes[:'covid_vaccine_site_instructions']
      end

      if attributes.key?(:'covid_vaccines_offered')
        if (value = attributes[:'covid_vaccines_offered']).is_a?(Array)
          self.covid_vaccines_offered = value
        end
      end

      if attributes.key?(:'currency_exchange')
        self.currency_exchange = attributes[:'currency_exchange']
      end

      if attributes.key?(:'custom_keywords')
        if (value = attributes[:'custom_keywords']).is_a?(Array)
          self.custom_keywords = value
        end
      end

      if attributes.key?(:'date_posted')
        self.date_posted = attributes[:'date_posted']
      end

      if attributes.key?(:'degrees')
        if (value = attributes[:'degrees']).is_a?(Array)
          self.degrees = value
        end
      end

      if attributes.key?(:'delivery_hours')
        self.delivery_hours = attributes[:'delivery_hours']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'display_coordinate')
        self.display_coordinate = attributes[:'display_coordinate']
      end

      if attributes.key?(:'doctor_on_call')
        self.doctor_on_call = attributes[:'doctor_on_call']
      end

      if attributes.key?(:'dogs_allowed')
        self.dogs_allowed = attributes[:'dogs_allowed']
      end

      if attributes.key?(:'drive_through_hours')
        self.drive_through_hours = attributes[:'drive_through_hours']
      end

      if attributes.key?(:'dropoff_coordinate')
        self.dropoff_coordinate = attributes[:'dropoff_coordinate']
      end

      if attributes.key?(:'education_list')
        if (value = attributes[:'education_list']).is_a?(Array)
          self.education_list = value
        end
      end

      if attributes.key?(:'electric_charging_station')
        self.electric_charging_station = attributes[:'electric_charging_station']
      end

      if attributes.key?(:'elevator')
        self.elevator = attributes[:'elevator']
      end

      if attributes.key?(:'elliptical_machine')
        self.elliptical_machine = attributes[:'elliptical_machine']
      end

      if attributes.key?(:'emails')
        if (value = attributes[:'emails']).is_a?(Array)
          self.emails = value
        end
      end

      if attributes.key?(:'employment_type')
        self.employment_type = attributes[:'employment_type']
      end

      if attributes.key?(:'event_status')
        self.event_status = attributes[:'event_status']
      end

      if attributes.key?(:'facebook_call_to_action')
        self.facebook_call_to_action = attributes[:'facebook_call_to_action']
      end

      if attributes.key?(:'facebook_cover_photo')
        self.facebook_cover_photo = attributes[:'facebook_cover_photo']
      end

      if attributes.key?(:'facebook_descriptor')
        self.facebook_descriptor = attributes[:'facebook_descriptor']
      end

      if attributes.key?(:'facebook_name')
        self.facebook_name = attributes[:'facebook_name']
      end

      if attributes.key?(:'facebook_override_city')
        self.facebook_override_city = attributes[:'facebook_override_city']
      end

      if attributes.key?(:'facebook_page_url')
        self.facebook_page_url = attributes[:'facebook_page_url']
      end

      if attributes.key?(:'facebook_profile_photo')
        self.facebook_profile_photo = attributes[:'facebook_profile_photo']
      end

      if attributes.key?(:'facebook_vanity_url')
        self.facebook_vanity_url = attributes[:'facebook_vanity_url']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'featured_message')
        self.featured_message = attributes[:'featured_message']
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      end

      if attributes.key?(:'first_party_review_page')
        self.first_party_review_page = attributes[:'first_party_review_page']
      end

      if attributes.key?(:'fitness_center')
        self.fitness_center = attributes[:'fitness_center']
      end

      if attributes.key?(:'floor_count')
        self.floor_count = attributes[:'floor_count']
      end

      if attributes.key?(:'free_weights')
        self.free_weights = attributes[:'free_weights']
      end

      if attributes.key?(:'frequently_asked_questions')
        if (value = attributes[:'frequently_asked_questions']).is_a?(Array)
          self.frequently_asked_questions = value
        end
      end

      if attributes.key?(:'front_desk')
        self.front_desk = attributes[:'front_desk']
      end

      if attributes.key?(:'fully_vaccinated_staff')
        self.fully_vaccinated_staff = attributes[:'fully_vaccinated_staff']
      end

      if attributes.key?(:'game_room')
        self.game_room = attributes[:'game_room']
      end

      if attributes.key?(:'gender')
        self.gender = attributes[:'gender']
      end

      if attributes.key?(:'geomodifier')
        self.geomodifier = attributes[:'geomodifier']
      end

      if attributes.key?(:'gift_shop')
        self.gift_shop = attributes[:'gift_shop']
      end

      if attributes.key?(:'golf')
        self.golf = attributes[:'golf']
      end

      if attributes.key?(:'google_attributes')
        self.google_attributes = attributes[:'google_attributes']
      end

      if attributes.key?(:'google_cover_photo')
        self.google_cover_photo = attributes[:'google_cover_photo']
      end

      if attributes.key?(:'google_my_business_labels')
        if (value = attributes[:'google_my_business_labels']).is_a?(Array)
          self.google_my_business_labels = value
        end
      end

      if attributes.key?(:'google_place_id')
        self.google_place_id = attributes[:'google_place_id']
      end

      if attributes.key?(:'google_profile_photo')
        self.google_profile_photo = attributes[:'google_profile_photo']
      end

      if attributes.key?(:'google_website_override')
        self.google_website_override = attributes[:'google_website_override']
      end

      if attributes.key?(:'happy_hours')
        self.happy_hours = attributes[:'happy_hours']
      end

      if attributes.key?(:'headshot')
        self.headshot = attributes[:'headshot']
      end

      if attributes.key?(:'hiring_organization')
        self.hiring_organization = attributes[:'hiring_organization']
      end

      if attributes.key?(:'holiday_hours_conversation_enabled')
        self.holiday_hours_conversation_enabled = attributes[:'holiday_hours_conversation_enabled']
      end

      if attributes.key?(:'horseback_riding')
        self.horseback_riding = attributes[:'horseback_riding']
      end

      if attributes.key?(:'hot_tub')
        self.hot_tub = attributes[:'hot_tub']
      end

      if attributes.key?(:'hours')
        self.hours = attributes[:'hours']
      end

      if attributes.key?(:'housekeeping')
        self.housekeeping = attributes[:'housekeeping']
      end

      if attributes.key?(:'impressum')
        self.impressum = attributes[:'impressum']
      end

      if attributes.key?(:'indoor_pool_count')
        self.indoor_pool_count = attributes[:'indoor_pool_count']
      end

      if attributes.key?(:'instagram_handle')
        self.instagram_handle = attributes[:'instagram_handle']
      end

      if attributes.key?(:'insurance_accepted')
        if (value = attributes[:'insurance_accepted']).is_a?(Array)
          self.insurance_accepted = value
        end
      end

      if attributes.key?(:'ios_app_url')
        self.ios_app_url = attributes[:'ios_app_url']
      end

      if attributes.key?(:'is_cluster_primary')
        self.is_cluster_primary = attributes[:'is_cluster_primary']
      end

      if attributes.key?(:'is_free_event')
        self.is_free_event = attributes[:'is_free_event']
      end

      if attributes.key?(:'iso_region_code')
        self.iso_region_code = attributes[:'iso_region_code']
      end

      if attributes.key?(:'keywords')
        if (value = attributes[:'keywords']).is_a?(Array)
          self.keywords = value
        end
      end

      if attributes.key?(:'kid_friendly')
        self.kid_friendly = attributes[:'kid_friendly']
      end

      if attributes.key?(:'kids_club')
        self.kids_club = attributes[:'kids_club']
      end

      if attributes.key?(:'kids_stay_free')
        self.kids_stay_free = attributes[:'kids_stay_free']
      end

      if attributes.key?(:'kitchen_hours')
        self.kitchen_hours = attributes[:'kitchen_hours']
      end

      if attributes.key?(:'labels')
        if (value = attributes[:'labels']).is_a?(Array)
          self.labels = value
        end
      end

      if attributes.key?(:'landing_page_url')
        self.landing_page_url = attributes[:'landing_page_url']
      end

      if attributes.key?(:'languages')
        if (value = attributes[:'languages']).is_a?(Array)
          self.languages = value
        end
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      end

      if attributes.key?(:'laundry')
        self.laundry = attributes[:'laundry']
      end

      if attributes.key?(:'lazy_river')
        self.lazy_river = attributes[:'lazy_river']
      end

      if attributes.key?(:'lifeguard')
        self.lifeguard = attributes[:'lifeguard']
      end

      if attributes.key?(:'linked_location')
        self.linked_location = attributes[:'linked_location']
      end

      if attributes.key?(:'local_phone')
        self.local_phone = attributes[:'local_phone']
      end

      if attributes.key?(:'local_shuttle')
        self.local_shuttle = attributes[:'local_shuttle']
      end

      if attributes.key?(:'located_in')
        self.located_in = attributes[:'located_in']
      end

      if attributes.key?(:'location')
        self.location = attributes[:'location']
      end

      if attributes.key?(:'location_type')
        self.location_type = attributes[:'location_type']
      end

      if attributes.key?(:'logo')
        self.logo = attributes[:'logo']
      end

      if attributes.key?(:'main_phone')
        self.main_phone = attributes[:'main_phone']
      end

      if attributes.key?(:'massage')
        self.massage = attributes[:'massage']
      end

      if attributes.key?(:'max_age_of_kids_stay_free')
        self.max_age_of_kids_stay_free = attributes[:'max_age_of_kids_stay_free']
      end

      if attributes.key?(:'max_number_of_kids_stay_free')
        self.max_number_of_kids_stay_free = attributes[:'max_number_of_kids_stay_free']
      end

      if attributes.key?(:'meals_served')
        if (value = attributes[:'meals_served']).is_a?(Array)
          self.meals_served = value
        end
      end

      if attributes.key?(:'meeting_room_count')
        self.meeting_room_count = attributes[:'meeting_room_count']
      end

      if attributes.key?(:'menu_url')
        self.menu_url = attributes[:'menu_url']
      end

      if attributes.key?(:'menus')
        self.menus = attributes[:'menus']
      end

      if attributes.key?(:'middle_name')
        self.middle_name = attributes[:'middle_name']
      end

      if attributes.key?(:'mobile_phone')
        self.mobile_phone = attributes[:'mobile_phone']
      end

      if attributes.key?(:'mobility_accessible')
        self.mobility_accessible = attributes[:'mobility_accessible']
      end

      if attributes.key?(:'nightclub')
        self.nightclub = attributes[:'nightclub']
      end

      if attributes.key?(:'npi')
        self.npi = attributes[:'npi']
      end

      if attributes.key?(:'nudge_enabled')
        self.nudge_enabled = attributes[:'nudge_enabled']
      end

      if attributes.key?(:'office_name')
        self.office_name = attributes[:'office_name']
      end

      if attributes.key?(:'online_service_hours')
        self.online_service_hours = attributes[:'online_service_hours']
      end

      if attributes.key?(:'order_url')
        self.order_url = attributes[:'order_url']
      end

      if attributes.key?(:'organizer_email')
        self.organizer_email = attributes[:'organizer_email']
      end

      if attributes.key?(:'organizer_name')
        self.organizer_name = attributes[:'organizer_name']
      end

      if attributes.key?(:'organizer_phone')
        self.organizer_phone = attributes[:'organizer_phone']
      end

      if attributes.key?(:'outdoor_pool_count')
        self.outdoor_pool_count = attributes[:'outdoor_pool_count']
      end

      if attributes.key?(:'parking')
        self.parking = attributes[:'parking']
      end

      if attributes.key?(:'payment_options')
        if (value = attributes[:'payment_options']).is_a?(Array)
          self.payment_options = value
        end
      end

      if attributes.key?(:'performers')
        if (value = attributes[:'performers']).is_a?(Array)
          self.performers = value
        end
      end

      if attributes.key?(:'pets_allowed')
        self.pets_allowed = attributes[:'pets_allowed']
      end

      if attributes.key?(:'photo_gallery')
        if (value = attributes[:'photo_gallery']).is_a?(Array)
          self.photo_gallery = value
        end
      end

      if attributes.key?(:'pickup_coordinate')
        self.pickup_coordinate = attributes[:'pickup_coordinate']
      end

      if attributes.key?(:'pickup_hours')
        self.pickup_hours = attributes[:'pickup_hours']
      end

      if attributes.key?(:'price_range')
        self.price_range = attributes[:'price_range']
      end

      if attributes.key?(:'primary_conversation_contact')
        self.primary_conversation_contact = attributes[:'primary_conversation_contact']
      end

      if attributes.key?(:'private_beach')
        self.private_beach = attributes[:'private_beach']
      end

      if attributes.key?(:'private_car_service')
        self.private_car_service = attributes[:'private_car_service']
      end

      if attributes.key?(:'product_lists')
        self.product_lists = attributes[:'product_lists']
      end

      if attributes.key?(:'products')
        if (value = attributes[:'products']).is_a?(Array)
          self.products = value
        end
      end

      if attributes.key?(:'questions_and_answers')
        self.questions_and_answers = attributes[:'questions_and_answers']
      end

      if attributes.key?(:'rank_tracking_competitors')
        if (value = attributes[:'rank_tracking_competitors']).is_a?(Array)
          self.rank_tracking_competitors = value
        end
      end

      if attributes.key?(:'rank_tracking_enabled')
        self.rank_tracking_enabled = attributes[:'rank_tracking_enabled']
      end

      if attributes.key?(:'rank_tracking_frequency')
        self.rank_tracking_frequency = attributes[:'rank_tracking_frequency']
      end

      if attributes.key?(:'rank_tracking_query_templates')
        if (value = attributes[:'rank_tracking_query_templates']).is_a?(Array)
          self.rank_tracking_query_templates = value
        end
      end

      if attributes.key?(:'rank_tracking_sites')
        if (value = attributes[:'rank_tracking_sites']).is_a?(Array)
          self.rank_tracking_sites = value
        end
      end

      if attributes.key?(:'reservation_url')
        self.reservation_url = attributes[:'reservation_url']
      end

      if attributes.key?(:'restaurant_count')
        self.restaurant_count = attributes[:'restaurant_count']
      end

      if attributes.key?(:'review_generation_url')
        self.review_generation_url = attributes[:'review_generation_url']
      end

      if attributes.key?(:'review_response_conversation_enabled')
        self.review_response_conversation_enabled = attributes[:'review_response_conversation_enabled']
      end

      if attributes.key?(:'room_count')
        self.room_count = attributes[:'room_count']
      end

      if attributes.key?(:'room_service')
        self.room_service = attributes[:'room_service']
      end

      if attributes.key?(:'routable_coordinate')
        self.routable_coordinate = attributes[:'routable_coordinate']
      end

      if attributes.key?(:'salon')
        self.salon = attributes[:'salon']
      end

      if attributes.key?(:'sauna')
        self.sauna = attributes[:'sauna']
      end

      if attributes.key?(:'scuba')
        self.scuba = attributes[:'scuba']
      end

      if attributes.key?(:'self_parking')
        self.self_parking = attributes[:'self_parking']
      end

      if attributes.key?(:'senior_hours')
        self.senior_hours = attributes[:'senior_hours']
      end

      if attributes.key?(:'service_area')
        self.service_area = attributes[:'service_area']
      end

      if attributes.key?(:'service_area_places')
        if (value = attributes[:'service_area_places']).is_a?(Array)
          self.service_area_places = value
        end
      end

      if attributes.key?(:'services')
        if (value = attributes[:'services']).is_a?(Array)
          self.services = value
        end
      end

      if attributes.key?(:'smoke_free_property')
        self.smoke_free_property = attributes[:'smoke_free_property']
      end

      if attributes.key?(:'snorkeling')
        self.snorkeling = attributes[:'snorkeling']
      end

      if attributes.key?(:'social_hour')
        self.social_hour = attributes[:'social_hour']
      end

      if attributes.key?(:'spa')
        self.spa = attributes[:'spa']
      end

      if attributes.key?(:'specialities')
        if (value = attributes[:'specialities']).is_a?(Array)
          self.specialities = value
        end
      end

      if attributes.key?(:'table_service')
        self.table_service = attributes[:'table_service']
      end

      if attributes.key?(:'takeout_hours')
        self.takeout_hours = attributes[:'takeout_hours']
      end

      if attributes.key?(:'tennis')
        self.tennis = attributes[:'tennis']
      end

      if attributes.key?(:'thermal_pool')
        self.thermal_pool = attributes[:'thermal_pool']
      end

      if attributes.key?(:'ticket_availability')
        self.ticket_availability = attributes[:'ticket_availability']
      end

      if attributes.key?(:'ticket_price_range')
        self.ticket_price_range = attributes[:'ticket_price_range']
      end

      if attributes.key?(:'ticket_sale_date_time')
        self.ticket_sale_date_time = attributes[:'ticket_sale_date_time']
      end

      if attributes.key?(:'ticket_url')
        self.ticket_url = attributes[:'ticket_url']
      end

      if attributes.key?(:'time')
        self.time = attributes[:'time']
      end

      if attributes.key?(:'time_zone_utc_offset')
        self.time_zone_utc_offset = attributes[:'time_zone_utc_offset']
      end

      if attributes.key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

      if attributes.key?(:'toll_free_phone')
        self.toll_free_phone = attributes[:'toll_free_phone']
      end

      if attributes.key?(:'treadmill')
        self.treadmill = attributes[:'treadmill']
      end

      if attributes.key?(:'tty_phone')
        self.tty_phone = attributes[:'tty_phone']
      end

      if attributes.key?(:'turndown_service')
        self.turndown_service = attributes[:'turndown_service']
      end

      if attributes.key?(:'twitter_handle')
        self.twitter_handle = attributes[:'twitter_handle']
      end

      if attributes.key?(:'uber_link')
        self.uber_link = attributes[:'uber_link']
      end

      if attributes.key?(:'uber_trip_branding')
        self.uber_trip_branding = attributes[:'uber_trip_branding']
      end

      if attributes.key?(:'valet_parking')
        self.valet_parking = attributes[:'valet_parking']
      end

      if attributes.key?(:'valid_through')
        self.valid_through = attributes[:'valid_through']
      end

      if attributes.key?(:'vending_machine')
        self.vending_machine = attributes[:'vending_machine']
      end

      if attributes.key?(:'venue_name')
        self.venue_name = attributes[:'venue_name']
      end

      if attributes.key?(:'videos')
        if (value = attributes[:'videos']).is_a?(Array)
          self.videos = value
        end
      end

      if attributes.key?(:'wading_pool')
        self.wading_pool = attributes[:'wading_pool']
      end

      if attributes.key?(:'wake_up_calls')
        self.wake_up_calls = attributes[:'wake_up_calls']
      end

      if attributes.key?(:'walkable_coordinate')
        self.walkable_coordinate = attributes[:'walkable_coordinate']
      end

      if attributes.key?(:'water_park')
        self.water_park = attributes[:'water_park']
      end

      if attributes.key?(:'water_skiing')
        self.water_skiing = attributes[:'water_skiing']
      end

      if attributes.key?(:'watercraft')
        self.watercraft = attributes[:'watercraft']
      end

      if attributes.key?(:'waterslide')
        self.waterslide = attributes[:'waterslide']
      end

      if attributes.key?(:'wave_pool')
        self.wave_pool = attributes[:'wave_pool']
      end

      if attributes.key?(:'website_url')
        self.website_url = attributes[:'website_url']
      end

      if attributes.key?(:'weight_machine')
        self.weight_machine = attributes[:'weight_machine']
      end

      if attributes.key?(:'wheelchair_accessible')
        self.wheelchair_accessible = attributes[:'wheelchair_accessible']
      end

      if attributes.key?(:'wifi_available')
        self.wifi_available = attributes[:'wifi_available']
      end

      if attributes.key?(:'work_remote')
        self.work_remote = attributes[:'work_remote']
      end

      if attributes.key?(:'year_established')
        self.year_established = attributes[:'year_established']
      end

      if attributes.key?(:'year_last_renovated')
        self.year_last_renovated = attributes[:'year_last_renovated']
      end

      if attributes.key?(:'yext_display_coordinate')
        self.yext_display_coordinate = attributes[:'yext_display_coordinate']
      end

      if attributes.key?(:'yext_dropoff_coordinate')
        self.yext_dropoff_coordinate = attributes[:'yext_dropoff_coordinate']
      end

      if attributes.key?(:'yext_pickup_coordinate')
        self.yext_pickup_coordinate = attributes[:'yext_pickup_coordinate']
      end

      if attributes.key?(:'yext_routable_coordinate')
        self.yext_routable_coordinate = attributes[:'yext_routable_coordinate']
      end

      if attributes.key?(:'yext_walkable_coordinate')
        self.yext_walkable_coordinate = attributes[:'yext_walkable_coordinate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@name.nil? && @name.to_s.length > 5000
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 5000.')
      end

      if !@name.nil? && @name.to_s.length < 0
        invalid_properties.push('invalid value for "name", the character length must be great than or equal to 0.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.')
      end

      if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
        invalid_properties.push('invalid value for "additional_hours_text", the character length must be great than or equal to 0.')
      end

      if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
        invalid_properties.push('invalid value for "alternate_phone", the character length must be great than or equal to 0.')
      end

      if !@android_app_url.nil? && @android_app_url.to_s.length < 0
        invalid_properties.push('invalid value for "android_app_url", the character length must be great than or equal to 0.')
      end

      if !@application_url.nil? && @application_url.to_s.length < 0
        invalid_properties.push('invalid value for "application_url", the character length must be great than or equal to 0.')
      end

      pattern = Regexp.new(/^\d*\.?\d*$/)
      if !@classification_rating.nil? && @classification_rating !~ pattern
        invalid_properties.push("invalid value for \"classification_rating\", must conform to the pattern #{pattern}.")
      end

      if !@covid_messaging.nil? && @covid_messaging.to_s.length > 15000
        invalid_properties.push('invalid value for "covid_messaging", the character length must be smaller than or equal to 15000.')
      end

      if !@covid_messaging.nil? && @covid_messaging.to_s.length < 0
        invalid_properties.push('invalid value for "covid_messaging", the character length must be great than or equal to 0.')
      end

      if !@covid_test_appointment_url.nil? && @covid_test_appointment_url.to_s.length < 0
        invalid_properties.push('invalid value for "covid_test_appointment_url", the character length must be great than or equal to 0.')
      end

      if !@covid_testing_site_instructions.nil? && @covid_testing_site_instructions.to_s.length > 15000
        invalid_properties.push('invalid value for "covid_testing_site_instructions", the character length must be smaller than or equal to 15000.')
      end

      if !@covid_testing_site_instructions.nil? && @covid_testing_site_instructions.to_s.length < 0
        invalid_properties.push('invalid value for "covid_testing_site_instructions", the character length must be great than or equal to 0.')
      end

      if !@covid_vaccine_information_url.nil? && @covid_vaccine_information_url.to_s.length < 0
        invalid_properties.push('invalid value for "covid_vaccine_information_url", the character length must be great than or equal to 0.')
      end

      if !@covid_vaccine_site_instructions.nil? && @covid_vaccine_site_instructions.to_s.length > 15000
        invalid_properties.push('invalid value for "covid_vaccine_site_instructions", the character length must be smaller than or equal to 15000.')
      end

      if !@covid_vaccine_site_instructions.nil? && @covid_vaccine_site_instructions.to_s.length < 0
        invalid_properties.push('invalid value for "covid_vaccine_site_instructions", the character length must be great than or equal to 0.')
      end

      if !@description.nil? && @description.to_s.length > 15000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 15000.')
      end

      if !@description.nil? && @description.to_s.length < 10
        invalid_properties.push('invalid value for "description", the character length must be great than or equal to 10.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.')
      end

      if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
        invalid_properties.push('invalid value for "facebook_descriptor", the character length must be great than or equal to 3.')
      end

      if !@facebook_name.nil? && @facebook_name.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_name", the character length must be great than or equal to 0.')
      end

      if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_override_city", the character length must be great than or equal to 0.')
      end

      if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_page_url", the character length must be great than or equal to 0.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.')
      end

      if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
        invalid_properties.push('invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.')
      end

      if !@fax.nil? && @fax.to_s.length < 0
        invalid_properties.push('invalid value for "fax", the character length must be great than or equal to 0.')
      end

      if !@first_name.nil? && @first_name.to_s.length > 35
        invalid_properties.push('invalid value for "first_name", the character length must be smaller than or equal to 35.')
      end

      if !@first_name.nil? && @first_name.to_s.length < 0
        invalid_properties.push('invalid value for "first_name", the character length must be great than or equal to 0.')
      end

      if !@first_party_review_page.nil? && @first_party_review_page.to_s.length < 0
        invalid_properties.push('invalid value for "first_party_review_page", the character length must be great than or equal to 0.')
      end

      if !@floor_count.nil? && @floor_count < 0
        invalid_properties.push('invalid value for "floor_count", must be greater than or equal to 0.')
      end

      if !@geomodifier.nil? && @geomodifier.to_s.length < 0
        invalid_properties.push('invalid value for "geomodifier", the character length must be great than or equal to 0.')
      end

      if !@google_place_id.nil? && @google_place_id.to_s.length < 0
        invalid_properties.push('invalid value for "google_place_id", the character length must be great than or equal to 0.')
      end

      if !@google_website_override.nil? && @google_website_override.to_s.length < 0
        invalid_properties.push('invalid value for "google_website_override", the character length must be great than or equal to 0.')
      end

      if !@hiring_organization.nil? && @hiring_organization.to_s.length < 0
        invalid_properties.push('invalid value for "hiring_organization", the character length must be great than or equal to 0.')
      end

      if !@impressum.nil? && @impressum.to_s.length > 2000
        invalid_properties.push('invalid value for "impressum", the character length must be smaller than or equal to 2000.')
      end

      if !@impressum.nil? && @impressum.to_s.length < 0
        invalid_properties.push('invalid value for "impressum", the character length must be great than or equal to 0.')
      end

      if !@indoor_pool_count.nil? && @indoor_pool_count < 0
        invalid_properties.push('invalid value for "indoor_pool_count", must be greater than or equal to 0.')
      end

      if !@instagram_handle.nil? && @instagram_handle.to_s.length > 30
        invalid_properties.push('invalid value for "instagram_handle", the character length must be smaller than or equal to 30.')
      end

      if !@instagram_handle.nil? && @instagram_handle.to_s.length < 0
        invalid_properties.push('invalid value for "instagram_handle", the character length must be great than or equal to 0.')
      end

      if !@ios_app_url.nil? && @ios_app_url.to_s.length < 0
        invalid_properties.push('invalid value for "ios_app_url", the character length must be great than or equal to 0.')
      end

      if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
        invalid_properties.push('invalid value for "iso_region_code", the character length must be great than or equal to 0.')
      end

      if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
        invalid_properties.push('invalid value for "landing_page_url", the character length must be great than or equal to 0.')
      end

      if !@last_name.nil? && @last_name.to_s.length > 35
        invalid_properties.push('invalid value for "last_name", the character length must be smaller than or equal to 35.')
      end

      if !@last_name.nil? && @last_name.to_s.length < 0
        invalid_properties.push('invalid value for "last_name", the character length must be great than or equal to 0.')
      end

      if !@local_phone.nil? && @local_phone.to_s.length < 0
        invalid_properties.push('invalid value for "local_phone", the character length must be great than or equal to 0.')
      end

      if !@main_phone.nil? && @main_phone.to_s.length < 0
        invalid_properties.push('invalid value for "main_phone", the character length must be great than or equal to 0.')
      end

      if !@max_age_of_kids_stay_free.nil? && @max_age_of_kids_stay_free < 0
        invalid_properties.push('invalid value for "max_age_of_kids_stay_free", must be greater than or equal to 0.')
      end

      if !@max_number_of_kids_stay_free.nil? && @max_number_of_kids_stay_free < 0
        invalid_properties.push('invalid value for "max_number_of_kids_stay_free", must be greater than or equal to 0.')
      end

      if !@meeting_room_count.nil? && @meeting_room_count < 0
        invalid_properties.push('invalid value for "meeting_room_count", must be greater than or equal to 0.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length > 35
        invalid_properties.push('invalid value for "middle_name", the character length must be smaller than or equal to 35.')
      end

      if !@middle_name.nil? && @middle_name.to_s.length < 0
        invalid_properties.push('invalid value for "middle_name", the character length must be great than or equal to 0.')
      end

      if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
        invalid_properties.push('invalid value for "mobile_phone", the character length must be great than or equal to 0.')
      end

      if !@npi.nil? && @npi.to_s.length < 0
        invalid_properties.push('invalid value for "npi", the character length must be great than or equal to 0.')
      end

      if !@office_name.nil? && @office_name.to_s.length < 0
        invalid_properties.push('invalid value for "office_name", the character length must be great than or equal to 0.')
      end

      if !@organizer_email.nil? && @organizer_email.to_s.length < 0
        invalid_properties.push('invalid value for "organizer_email", the character length must be great than or equal to 0.')
      end

      if !@organizer_name.nil? && @organizer_name.to_s.length < 0
        invalid_properties.push('invalid value for "organizer_name", the character length must be great than or equal to 0.')
      end

      if !@organizer_phone.nil? && @organizer_phone.to_s.length < 0
        invalid_properties.push('invalid value for "organizer_phone", the character length must be great than or equal to 0.')
      end

      if !@outdoor_pool_count.nil? && @outdoor_pool_count < 0
        invalid_properties.push('invalid value for "outdoor_pool_count", must be greater than or equal to 0.')
      end

      if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
        invalid_properties.push('invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.')
      end

      if !@restaurant_count.nil? && @restaurant_count < 0
        invalid_properties.push('invalid value for "restaurant_count", must be greater than or equal to 0.')
      end

      if !@review_generation_url.nil? && @review_generation_url.to_s.length < 0
        invalid_properties.push('invalid value for "review_generation_url", the character length must be great than or equal to 0.')
      end

      if !@room_count.nil? && @room_count < 0
        invalid_properties.push('invalid value for "room_count", must be greater than or equal to 0.')
      end

      if !@ticket_url.nil? && @ticket_url.to_s.length < 0
        invalid_properties.push('invalid value for "ticket_url", the character length must be great than or equal to 0.')
      end

      if !@time_zone_utc_offset.nil? && @time_zone_utc_offset.to_s.length < 0
        invalid_properties.push('invalid value for "time_zone_utc_offset", the character length must be great than or equal to 0.')
      end

      if !@timezone.nil? && @timezone.to_s.length < 0
        invalid_properties.push('invalid value for "timezone", the character length must be great than or equal to 0.')
      end

      if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
        invalid_properties.push('invalid value for "toll_free_phone", the character length must be great than or equal to 0.')
      end

      if !@tty_phone.nil? && @tty_phone.to_s.length < 0
        invalid_properties.push('invalid value for "tty_phone", the character length must be great than or equal to 0.')
      end

      if !@twitter_handle.nil? && @twitter_handle.to_s.length > 15
        invalid_properties.push('invalid value for "twitter_handle", the character length must be smaller than or equal to 15.')
      end

      if !@twitter_handle.nil? && @twitter_handle.to_s.length < 0
        invalid_properties.push('invalid value for "twitter_handle", the character length must be great than or equal to 0.')
      end

      if !@venue_name.nil? && @venue_name.to_s.length < 0
        invalid_properties.push('invalid value for "venue_name", the character length must be great than or equal to 0.')
      end

      if !@year_established.nil? && @year_established > 2028
        invalid_properties.push('invalid value for "year_established", must be smaller than or equal to 2028.')
      end

      if !@year_established.nil? && @year_established < 1000
        invalid_properties.push('invalid value for "year_established", must be greater than or equal to 1000.')
      end

      if !@year_last_renovated.nil? && @year_last_renovated > 2028
        invalid_properties.push('invalid value for "year_last_renovated", must be smaller than or equal to 2028.')
      end

      if !@year_last_renovated.nil? && @year_last_renovated < 1000
        invalid_properties.push('invalid value for "year_last_renovated", must be greater than or equal to 1000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@name.nil? && @name.to_s.length > 5000
      return false if !@name.nil? && @name.to_s.length < 0
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length > 255
      return false if !@additional_hours_text.nil? && @additional_hours_text.to_s.length < 0
      adult_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless adult_pool_validator.valid?(@adult_pool)
      airport_shuttle_validator = EnumAttributeValidator.new('String', ["AIRPORT_SHUTTLE_AVAILABLE", "AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless airport_shuttle_validator.valid?(@airport_shuttle)
      airport_transfer_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless airport_transfer_validator.valid?(@airport_transfer)
      all_inclusive_validator = EnumAttributeValidator.new('String', ["ALL_INCLUSIVE_RATES_AVAILABLE", "ALL_INCLUSIVE_RATES_ONLY", "NOT_APPLICABLE"])
      return false unless all_inclusive_validator.valid?(@all_inclusive)
      return false if !@alternate_phone.nil? && @alternate_phone.to_s.length < 0
      return false if !@android_app_url.nil? && @android_app_url.to_s.length < 0
      return false if !@application_url.nil? && @application_url.to_s.length < 0
      attire_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "DRESSY", "CASUAL", "FORMAL"])
      return false unless attire_validator.valid?(@attire)
      babysitting_offered_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless babysitting_offered_validator.valid?(@babysitting_offered)
      baggage_storage_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless baggage_storage_validator.valid?(@baggage_storage)
      bar_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless bar_validator.valid?(@bar)
      beach_access_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless beach_access_validator.valid?(@beach_access)
      beach_front_property_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless beach_front_property_validator.valid?(@beach_front_property)
      bicycles_validator = EnumAttributeValidator.new('String', ["BICYCLE_RENTALS", "BICYCLE_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      return false unless bicycles_validator.valid?(@bicycles)
      boutique_stores_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless boutique_stores_validator.valid?(@boutique_stores)
      breakfast_validator = EnumAttributeValidator.new('String', ["BREAKFAST_AVAILABLE", "BREAKFAST_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless breakfast_validator.valid?(@breakfast)
      business_center_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless business_center_validator.valid?(@business_center)
      car_rental_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless car_rental_validator.valid?(@car_rental)
      casino_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless casino_validator.valid?(@casino)
      cats_allowed_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless cats_allowed_validator.valid?(@cats_allowed)
      return false if !@classification_rating.nil? && @classification_rating !~ Regexp.new(/^\d*\.?\d*$/)
      concierge_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless concierge_validator.valid?(@concierge)
      convenience_store_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless convenience_store_validator.valid?(@convenience_store)
      return false if !@covid_messaging.nil? && @covid_messaging.to_s.length > 15000
      return false if !@covid_messaging.nil? && @covid_messaging.to_s.length < 0
      return false if !@covid_test_appointment_url.nil? && @covid_test_appointment_url.to_s.length < 0
      return false if !@covid_testing_site_instructions.nil? && @covid_testing_site_instructions.to_s.length > 15000
      return false if !@covid_testing_site_instructions.nil? && @covid_testing_site_instructions.to_s.length < 0
      return false if !@covid_vaccine_information_url.nil? && @covid_vaccine_information_url.to_s.length < 0
      return false if !@covid_vaccine_site_instructions.nil? && @covid_vaccine_site_instructions.to_s.length > 15000
      return false if !@covid_vaccine_site_instructions.nil? && @covid_vaccine_site_instructions.to_s.length < 0
      currency_exchange_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless currency_exchange_validator.valid?(@currency_exchange)
      return false if !@description.nil? && @description.to_s.length > 15000
      return false if !@description.nil? && @description.to_s.length < 10
      doctor_on_call_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless doctor_on_call_validator.valid?(@doctor_on_call)
      dogs_allowed_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless dogs_allowed_validator.valid?(@dogs_allowed)
      electric_charging_station_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless electric_charging_station_validator.valid?(@electric_charging_station)
      elevator_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless elevator_validator.valid?(@elevator)
      elliptical_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless elliptical_machine_validator.valid?(@elliptical_machine)
      employment_type_validator = EnumAttributeValidator.new('String', ["FULL_TIME", "PART_TIME", "CONTRACTOR", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "OTHER"])
      return false unless employment_type_validator.valid?(@employment_type)
      event_status_validator = EnumAttributeValidator.new('String', ["SCHEDULED", "RESCHEDULED", "POSTPONED", "CANCELED", "EVENT_MOVED_ONLINE"])
      return false unless event_status_validator.valid?(@event_status)
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length > 75
      return false if !@facebook_descriptor.nil? && @facebook_descriptor.to_s.length < 3
      return false if !@facebook_name.nil? && @facebook_name.to_s.length < 0
      return false if !@facebook_override_city.nil? && @facebook_override_city.to_s.length < 0
      return false if !@facebook_page_url.nil? && @facebook_page_url.to_s.length < 0
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length > 50
      return false if !@facebook_vanity_url.nil? && @facebook_vanity_url.to_s.length < 0
      return false if !@fax.nil? && @fax.to_s.length < 0
      return false if !@first_name.nil? && @first_name.to_s.length > 35
      return false if !@first_name.nil? && @first_name.to_s.length < 0
      return false if !@first_party_review_page.nil? && @first_party_review_page.to_s.length < 0
      fitness_center_validator = EnumAttributeValidator.new('String', ["FITNESS_CENTER_AVAILABLE", "FITNESS_CENTER_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless fitness_center_validator.valid?(@fitness_center)
      return false if !@floor_count.nil? && @floor_count < 0
      free_weights_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless free_weights_validator.valid?(@free_weights)
      front_desk_validator = EnumAttributeValidator.new('String', ["FRONT_DESK_AVAILABLE", "FRONT_DESK_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      return false unless front_desk_validator.valid?(@front_desk)
      game_room_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless game_room_validator.valid?(@game_room)
      gender_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "FEMALE", "MALE"])
      return false unless gender_validator.valid?(@gender)
      return false if !@geomodifier.nil? && @geomodifier.to_s.length < 0
      gift_shop_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless gift_shop_validator.valid?(@gift_shop)
      golf_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless golf_validator.valid?(@golf)
      return false if !@google_place_id.nil? && @google_place_id.to_s.length < 0
      return false if !@google_website_override.nil? && @google_website_override.to_s.length < 0
      return false if !@hiring_organization.nil? && @hiring_organization.to_s.length < 0
      horseback_riding_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless horseback_riding_validator.valid?(@horseback_riding)
      hot_tub_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless hot_tub_validator.valid?(@hot_tub)
      housekeeping_validator = EnumAttributeValidator.new('String', ["HOUSEKEEPING_AVAILABLE", "HOUSEKEEPING_AVAILABLE_DAILY", "NOT_APPLICABLE"])
      return false unless housekeeping_validator.valid?(@housekeeping)
      return false if !@impressum.nil? && @impressum.to_s.length > 2000
      return false if !@impressum.nil? && @impressum.to_s.length < 0
      return false if !@indoor_pool_count.nil? && @indoor_pool_count < 0
      return false if !@instagram_handle.nil? && @instagram_handle.to_s.length > 30
      return false if !@instagram_handle.nil? && @instagram_handle.to_s.length < 0
      return false if !@ios_app_url.nil? && @ios_app_url.to_s.length < 0
      return false if !@iso_region_code.nil? && @iso_region_code.to_s.length < 0
      kid_friendly_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kid_friendly_validator.valid?(@kid_friendly)
      kids_club_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kids_club_validator.valid?(@kids_club)
      kids_stay_free_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless kids_stay_free_validator.valid?(@kids_stay_free)
      return false if !@landing_page_url.nil? && @landing_page_url.to_s.length < 0
      return false if !@last_name.nil? && @last_name.to_s.length > 35
      return false if !@last_name.nil? && @last_name.to_s.length < 0
      laundry_validator = EnumAttributeValidator.new('String', ["FULL_SERVICE", "SELF_SERVICE", "NOT_APPLICABLE"])
      return false unless laundry_validator.valid?(@laundry)
      lazy_river_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless lazy_river_validator.valid?(@lazy_river)
      lifeguard_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless lifeguard_validator.valid?(@lifeguard)
      return false if !@local_phone.nil? && @local_phone.to_s.length < 0
      local_shuttle_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless local_shuttle_validator.valid?(@local_shuttle)
      location_type_validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      return false unless location_type_validator.valid?(@location_type)
      return false if !@main_phone.nil? && @main_phone.to_s.length < 0
      massage_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless massage_validator.valid?(@massage)
      return false if !@max_age_of_kids_stay_free.nil? && @max_age_of_kids_stay_free < 0
      return false if !@max_number_of_kids_stay_free.nil? && @max_number_of_kids_stay_free < 0
      return false if !@meeting_room_count.nil? && @meeting_room_count < 0
      return false if !@middle_name.nil? && @middle_name.to_s.length > 35
      return false if !@middle_name.nil? && @middle_name.to_s.length < 0
      return false if !@mobile_phone.nil? && @mobile_phone.to_s.length < 0
      mobility_accessible_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless mobility_accessible_validator.valid?(@mobility_accessible)
      nightclub_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless nightclub_validator.valid?(@nightclub)
      return false if !@npi.nil? && @npi.to_s.length < 0
      return false if !@office_name.nil? && @office_name.to_s.length < 0
      return false if !@organizer_email.nil? && @organizer_email.to_s.length < 0
      return false if !@organizer_name.nil? && @organizer_name.to_s.length < 0
      return false if !@organizer_phone.nil? && @organizer_phone.to_s.length < 0
      return false if !@outdoor_pool_count.nil? && @outdoor_pool_count < 0
      parking_validator = EnumAttributeValidator.new('String', ["PARKING_AVAILABLE", "PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless parking_validator.valid?(@parking)
      pets_allowed_validator = EnumAttributeValidator.new('String', ["PETS_WELCOME", "PETS_WELCOME_FOR_FREE", "NOT_APPLICABLE", "NOT_ALLOWED"])
      return false unless pets_allowed_validator.valid?(@pets_allowed)
      price_range_validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ONE", "TWO", "THREE", "FOUR"])
      return false unless price_range_validator.valid?(@price_range)
      return false if !@primary_conversation_contact.nil? && @primary_conversation_contact.to_s.length < 0
      private_beach_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless private_beach_validator.valid?(@private_beach)
      private_car_service_validator = EnumAttributeValidator.new('String', ["PRIVATE_CAR_SERVICE", "PRIVATE_CAR_SERVICE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless private_car_service_validator.valid?(@private_car_service)
      rank_tracking_frequency_validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      return false unless rank_tracking_frequency_validator.valid?(@rank_tracking_frequency)
      return false if !@restaurant_count.nil? && @restaurant_count < 0
      return false if !@review_generation_url.nil? && @review_generation_url.to_s.length < 0
      return false if !@room_count.nil? && @room_count < 0
      room_service_validator = EnumAttributeValidator.new('String', ["ROOM_SERVICE_AVAILABLE", "ROOM_SERVICE_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      return false unless room_service_validator.valid?(@room_service)
      salon_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless salon_validator.valid?(@salon)
      sauna_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless sauna_validator.valid?(@sauna)
      scuba_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless scuba_validator.valid?(@scuba)
      self_parking_validator = EnumAttributeValidator.new('String', ["SELF_PARKING_AVAILABLE", "SELF_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless self_parking_validator.valid?(@self_parking)
      smoke_free_property_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless smoke_free_property_validator.valid?(@smoke_free_property)
      snorkeling_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless snorkeling_validator.valid?(@snorkeling)
      social_hour_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless social_hour_validator.valid?(@social_hour)
      spa_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless spa_validator.valid?(@spa)
      table_service_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless table_service_validator.valid?(@table_service)
      tennis_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless tennis_validator.valid?(@tennis)
      thermal_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless thermal_pool_validator.valid?(@thermal_pool)
      ticket_availability_validator = EnumAttributeValidator.new('String', ["IN_STOCK", "SOLD_OUT", "PRE_ORDER", "UNSPECIFIED"])
      return false unless ticket_availability_validator.valid?(@ticket_availability)
      return false if !@ticket_url.nil? && @ticket_url.to_s.length < 0
      return false if !@time_zone_utc_offset.nil? && @time_zone_utc_offset.to_s.length < 0
      return false if !@timezone.nil? && @timezone.to_s.length < 0
      return false if !@toll_free_phone.nil? && @toll_free_phone.to_s.length < 0
      treadmill_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless treadmill_validator.valid?(@treadmill)
      return false if !@tty_phone.nil? && @tty_phone.to_s.length < 0
      turndown_service_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless turndown_service_validator.valid?(@turndown_service)
      return false if !@twitter_handle.nil? && @twitter_handle.to_s.length > 15
      return false if !@twitter_handle.nil? && @twitter_handle.to_s.length < 0
      valet_parking_validator = EnumAttributeValidator.new('String', ["VALET_PARKING_AVAILABLE", "VALET_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless valet_parking_validator.valid?(@valet_parking)
      vending_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless vending_machine_validator.valid?(@vending_machine)
      return false if !@venue_name.nil? && @venue_name.to_s.length < 0
      wading_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wading_pool_validator.valid?(@wading_pool)
      wake_up_calls_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wake_up_calls_validator.valid?(@wake_up_calls)
      water_park_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless water_park_validator.valid?(@water_park)
      water_skiing_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless water_skiing_validator.valid?(@water_skiing)
      watercraft_validator = EnumAttributeValidator.new('String', ["WATERCRAFT_RENTALS", "WATERCRAFT_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      return false unless watercraft_validator.valid?(@watercraft)
      waterslide_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless waterslide_validator.valid?(@waterslide)
      wave_pool_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wave_pool_validator.valid?(@wave_pool)
      weight_machine_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless weight_machine_validator.valid?(@weight_machine)
      wheelchair_accessible_validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      return false unless wheelchair_accessible_validator.valid?(@wheelchair_accessible)
      wifi_available_validator = EnumAttributeValidator.new('String', ["WIFI_AVAILABLE", "WIFI_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      return false unless wifi_available_validator.valid?(@wifi_available)
      return false if !@year_established.nil? && @year_established > 2028
      return false if !@year_established.nil? && @year_established < 1000
      return false if !@year_last_renovated.nil? && @year_last_renovated > 2028
      return false if !@year_last_renovated.nil? && @year_last_renovated < 1000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 5000
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 5000.'
      end

      if !name.nil? && name.to_s.length < 0
        fail ArgumentError, 'invalid value for "name", the character length must be great than or equal to 0.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_hours_text Value to be assigned
    def additional_hours_text=(additional_hours_text)
      if !additional_hours_text.nil? && additional_hours_text.to_s.length > 255
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be smaller than or equal to 255.'
      end

      if !additional_hours_text.nil? && additional_hours_text.to_s.length < 0
        fail ArgumentError, 'invalid value for "additional_hours_text", the character length must be great than or equal to 0.'
      end

      @additional_hours_text = additional_hours_text
    end

    # Custom attribute writer method with validation
    # @param [Object] additional_promoting_locations Value to be assigned
    def additional_promoting_locations=(additional_promoting_locations)
      @additional_promoting_locations = additional_promoting_locations
    end

    # Custom attribute writer method with validation
    # @param [Object] admitting_hospitals Value to be assigned
    def admitting_hospitals=(admitting_hospitals)
      @admitting_hospitals = admitting_hospitals
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] adult_pool Object to be assigned
    def adult_pool=(adult_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(adult_pool)
        fail ArgumentError, "invalid value for \"adult_pool\", must be one of #{validator.allowable_values}."
      end
      @adult_pool = adult_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] airport_shuttle Object to be assigned
    def airport_shuttle=(airport_shuttle)
      validator = EnumAttributeValidator.new('String', ["AIRPORT_SHUTTLE_AVAILABLE", "AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(airport_shuttle)
        fail ArgumentError, "invalid value for \"airport_shuttle\", must be one of #{validator.allowable_values}."
      end
      @airport_shuttle = airport_shuttle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] airport_transfer Object to be assigned
    def airport_transfer=(airport_transfer)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(airport_transfer)
        fail ArgumentError, "invalid value for \"airport_transfer\", must be one of #{validator.allowable_values}."
      end
      @airport_transfer = airport_transfer
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] all_inclusive Object to be assigned
    def all_inclusive=(all_inclusive)
      validator = EnumAttributeValidator.new('String', ["ALL_INCLUSIVE_RATES_AVAILABLE", "ALL_INCLUSIVE_RATES_ONLY", "NOT_APPLICABLE"])
      unless validator.valid?(all_inclusive)
        fail ArgumentError, "invalid value for \"all_inclusive\", must be one of #{validator.allowable_values}."
      end
      @all_inclusive = all_inclusive
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_names Value to be assigned
    def alternate_names=(alternate_names)
      @alternate_names = alternate_names
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_phone Value to be assigned
    def alternate_phone=(alternate_phone)
      if !alternate_phone.nil? && alternate_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "alternate_phone", the character length must be great than or equal to 0.'
      end

      @alternate_phone = alternate_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] alternate_websites Value to be assigned
    def alternate_websites=(alternate_websites)
      @alternate_websites = alternate_websites
    end

    # Custom attribute writer method with validation
    # @param [Object] android_app_url Value to be assigned
    def android_app_url=(android_app_url)
      if !android_app_url.nil? && android_app_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "android_app_url", the character length must be great than or equal to 0.'
      end

      @android_app_url = android_app_url
    end

    # Custom attribute writer method with validation
    # @param [Object] application_url Value to be assigned
    def application_url=(application_url)
      if !application_url.nil? && application_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "application_url", the character length must be great than or equal to 0.'
      end

      @application_url = application_url
    end

    # Custom attribute writer method with validation
    # @param [Object] associations Value to be assigned
    def associations=(associations)
      @associations = associations
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] attire Object to be assigned
    def attire=(attire)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "DRESSY", "CASUAL", "FORMAL"])
      unless validator.valid?(attire)
        fail ArgumentError, "invalid value for \"attire\", must be one of #{validator.allowable_values}."
      end
      @attire = attire
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] babysitting_offered Object to be assigned
    def babysitting_offered=(babysitting_offered)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(babysitting_offered)
        fail ArgumentError, "invalid value for \"babysitting_offered\", must be one of #{validator.allowable_values}."
      end
      @babysitting_offered = babysitting_offered
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] baggage_storage Object to be assigned
    def baggage_storage=(baggage_storage)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(baggage_storage)
        fail ArgumentError, "invalid value for \"baggage_storage\", must be one of #{validator.allowable_values}."
      end
      @baggage_storage = baggage_storage
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bar Object to be assigned
    def bar=(bar)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(bar)
        fail ArgumentError, "invalid value for \"bar\", must be one of #{validator.allowable_values}."
      end
      @bar = bar
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beach_access Object to be assigned
    def beach_access=(beach_access)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(beach_access)
        fail ArgumentError, "invalid value for \"beach_access\", must be one of #{validator.allowable_values}."
      end
      @beach_access = beach_access
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] beach_front_property Object to be assigned
    def beach_front_property=(beach_front_property)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(beach_front_property)
        fail ArgumentError, "invalid value for \"beach_front_property\", must be one of #{validator.allowable_values}."
      end
      @beach_front_property = beach_front_property
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] bicycles Object to be assigned
    def bicycles=(bicycles)
      validator = EnumAttributeValidator.new('String', ["BICYCLE_RENTALS", "BICYCLE_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(bicycles)
        fail ArgumentError, "invalid value for \"bicycles\", must be one of #{validator.allowable_values}."
      end
      @bicycles = bicycles
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] boutique_stores Object to be assigned
    def boutique_stores=(boutique_stores)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(boutique_stores)
        fail ArgumentError, "invalid value for \"boutique_stores\", must be one of #{validator.allowable_values}."
      end
      @boutique_stores = boutique_stores
    end

    # Custom attribute writer method with validation
    # @param [Object] brands Value to be assigned
    def brands=(brands)
      @brands = brands
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] breakfast Object to be assigned
    def breakfast=(breakfast)
      validator = EnumAttributeValidator.new('String', ["BREAKFAST_AVAILABLE", "BREAKFAST_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(breakfast)
        fail ArgumentError, "invalid value for \"breakfast\", must be one of #{validator.allowable_values}."
      end
      @breakfast = breakfast
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] business_center Object to be assigned
    def business_center=(business_center)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(business_center)
        fail ArgumentError, "invalid value for \"business_center\", must be one of #{validator.allowable_values}."
      end
      @business_center = business_center
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] car_rental Object to be assigned
    def car_rental=(car_rental)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(car_rental)
        fail ArgumentError, "invalid value for \"car_rental\", must be one of #{validator.allowable_values}."
      end
      @car_rental = car_rental
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] casino Object to be assigned
    def casino=(casino)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(casino)
        fail ArgumentError, "invalid value for \"casino\", must be one of #{validator.allowable_values}."
      end
      @casino = casino
    end

    # Custom attribute writer method with validation
    # @param [Object] category_ids Value to be assigned
    def category_ids=(category_ids)
      @category_ids = category_ids
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] cats_allowed Object to be assigned
    def cats_allowed=(cats_allowed)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(cats_allowed)
        fail ArgumentError, "invalid value for \"cats_allowed\", must be one of #{validator.allowable_values}."
      end
      @cats_allowed = cats_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] certifications Value to be assigned
    def certifications=(certifications)
      @certifications = certifications
    end

    # Custom attribute writer method with validation
    # @param [Object] classification_rating Value to be assigned
    def classification_rating=(classification_rating)
      pattern = Regexp.new(/^\d*\.?\d*$/)
      if !classification_rating.nil? && classification_rating !~ pattern
        fail ArgumentError, "invalid value for \"classification_rating\", must conform to the pattern #{pattern}."
      end

      @classification_rating = classification_rating
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] concierge Object to be assigned
    def concierge=(concierge)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(concierge)
        fail ArgumentError, "invalid value for \"concierge\", must be one of #{validator.allowable_values}."
      end
      @concierge = concierge
    end

    # Custom attribute writer method with validation
    # @param [Object] conditions_treated Value to be assigned
    def conditions_treated=(conditions_treated)
      @conditions_treated = conditions_treated
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] convenience_store Object to be assigned
    def convenience_store=(convenience_store)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(convenience_store)
        fail ArgumentError, "invalid value for \"convenience_store\", must be one of #{validator.allowable_values}."
      end
      @convenience_store = convenience_store
    end

    # Custom attribute writer method with validation
    # @param [Object] covid_messaging Value to be assigned
    def covid_messaging=(covid_messaging)
      if !covid_messaging.nil? && covid_messaging.to_s.length > 15000
        fail ArgumentError, 'invalid value for "covid_messaging", the character length must be smaller than or equal to 15000.'
      end

      if !covid_messaging.nil? && covid_messaging.to_s.length < 0
        fail ArgumentError, 'invalid value for "covid_messaging", the character length must be great than or equal to 0.'
      end

      @covid_messaging = covid_messaging
    end

    # Custom attribute writer method with validation
    # @param [Object] covid_test_appointment_url Value to be assigned
    def covid_test_appointment_url=(covid_test_appointment_url)
      if !covid_test_appointment_url.nil? && covid_test_appointment_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "covid_test_appointment_url", the character length must be great than or equal to 0.'
      end

      @covid_test_appointment_url = covid_test_appointment_url
    end

    # Custom attribute writer method with validation
    # @param [Object] covid_testing_site_instructions Value to be assigned
    def covid_testing_site_instructions=(covid_testing_site_instructions)
      if !covid_testing_site_instructions.nil? && covid_testing_site_instructions.to_s.length > 15000
        fail ArgumentError, 'invalid value for "covid_testing_site_instructions", the character length must be smaller than or equal to 15000.'
      end

      if !covid_testing_site_instructions.nil? && covid_testing_site_instructions.to_s.length < 0
        fail ArgumentError, 'invalid value for "covid_testing_site_instructions", the character length must be great than or equal to 0.'
      end

      @covid_testing_site_instructions = covid_testing_site_instructions
    end

    # Custom attribute writer method with validation
    # @param [Object] covid_vaccine_information_url Value to be assigned
    def covid_vaccine_information_url=(covid_vaccine_information_url)
      if !covid_vaccine_information_url.nil? && covid_vaccine_information_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "covid_vaccine_information_url", the character length must be great than or equal to 0.'
      end

      @covid_vaccine_information_url = covid_vaccine_information_url
    end

    # Custom attribute writer method with validation
    # @param [Object] covid_vaccine_site_instructions Value to be assigned
    def covid_vaccine_site_instructions=(covid_vaccine_site_instructions)
      if !covid_vaccine_site_instructions.nil? && covid_vaccine_site_instructions.to_s.length > 15000
        fail ArgumentError, 'invalid value for "covid_vaccine_site_instructions", the character length must be smaller than or equal to 15000.'
      end

      if !covid_vaccine_site_instructions.nil? && covid_vaccine_site_instructions.to_s.length < 0
        fail ArgumentError, 'invalid value for "covid_vaccine_site_instructions", the character length must be great than or equal to 0.'
      end

      @covid_vaccine_site_instructions = covid_vaccine_site_instructions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] currency_exchange Object to be assigned
    def currency_exchange=(currency_exchange)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(currency_exchange)
        fail ArgumentError, "invalid value for \"currency_exchange\", must be one of #{validator.allowable_values}."
      end
      @currency_exchange = currency_exchange
    end

    # Custom attribute writer method with validation
    # @param [Object] custom_keywords Value to be assigned
    def custom_keywords=(custom_keywords)
      @custom_keywords = custom_keywords
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 15000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 15000.'
      end

      if !description.nil? && description.to_s.length < 10
        fail ArgumentError, 'invalid value for "description", the character length must be great than or equal to 10.'
      end

      @description = description
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] doctor_on_call Object to be assigned
    def doctor_on_call=(doctor_on_call)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(doctor_on_call)
        fail ArgumentError, "invalid value for \"doctor_on_call\", must be one of #{validator.allowable_values}."
      end
      @doctor_on_call = doctor_on_call
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] dogs_allowed Object to be assigned
    def dogs_allowed=(dogs_allowed)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(dogs_allowed)
        fail ArgumentError, "invalid value for \"dogs_allowed\", must be one of #{validator.allowable_values}."
      end
      @dogs_allowed = dogs_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] education_list Value to be assigned
    def education_list=(education_list)
      @education_list = education_list
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] electric_charging_station Object to be assigned
    def electric_charging_station=(electric_charging_station)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(electric_charging_station)
        fail ArgumentError, "invalid value for \"electric_charging_station\", must be one of #{validator.allowable_values}."
      end
      @electric_charging_station = electric_charging_station
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] elevator Object to be assigned
    def elevator=(elevator)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(elevator)
        fail ArgumentError, "invalid value for \"elevator\", must be one of #{validator.allowable_values}."
      end
      @elevator = elevator
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] elliptical_machine Object to be assigned
    def elliptical_machine=(elliptical_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(elliptical_machine)
        fail ArgumentError, "invalid value for \"elliptical_machine\", must be one of #{validator.allowable_values}."
      end
      @elliptical_machine = elliptical_machine
    end

    # Custom attribute writer method with validation
    # @param [Object] emails Value to be assigned
    def emails=(emails)
      @emails = emails
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] employment_type Object to be assigned
    def employment_type=(employment_type)
      validator = EnumAttributeValidator.new('String', ["FULL_TIME", "PART_TIME", "CONTRACTOR", "TEMPORARY", "INTERN", "VOLUNTEER", "PER_DIEM", "OTHER"])
      unless validator.valid?(employment_type)
        fail ArgumentError, "invalid value for \"employment_type\", must be one of #{validator.allowable_values}."
      end
      @employment_type = employment_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] event_status Object to be assigned
    def event_status=(event_status)
      validator = EnumAttributeValidator.new('String', ["SCHEDULED", "RESCHEDULED", "POSTPONED", "CANCELED", "EVENT_MOVED_ONLINE"])
      unless validator.valid?(event_status)
        fail ArgumentError, "invalid value for \"event_status\", must be one of #{validator.allowable_values}."
      end
      @event_status = event_status
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_descriptor Value to be assigned
    def facebook_descriptor=(facebook_descriptor)
      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length > 75
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be smaller than or equal to 75.'
      end

      if !facebook_descriptor.nil? && facebook_descriptor.to_s.length < 3
        fail ArgumentError, 'invalid value for "facebook_descriptor", the character length must be great than or equal to 3.'
      end

      @facebook_descriptor = facebook_descriptor
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_name Value to be assigned
    def facebook_name=(facebook_name)
      if !facebook_name.nil? && facebook_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_name", the character length must be great than or equal to 0.'
      end

      @facebook_name = facebook_name
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_override_city Value to be assigned
    def facebook_override_city=(facebook_override_city)
      if !facebook_override_city.nil? && facebook_override_city.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_override_city", the character length must be great than or equal to 0.'
      end

      @facebook_override_city = facebook_override_city
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_page_url Value to be assigned
    def facebook_page_url=(facebook_page_url)
      if !facebook_page_url.nil? && facebook_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_page_url", the character length must be great than or equal to 0.'
      end

      @facebook_page_url = facebook_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] facebook_vanity_url Value to be assigned
    def facebook_vanity_url=(facebook_vanity_url)
      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length > 50
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be smaller than or equal to 50.'
      end

      if !facebook_vanity_url.nil? && facebook_vanity_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "facebook_vanity_url", the character length must be great than or equal to 0.'
      end

      @facebook_vanity_url = facebook_vanity_url
    end

    # Custom attribute writer method with validation
    # @param [Object] fax Value to be assigned
    def fax=(fax)
      if !fax.nil? && fax.to_s.length < 0
        fail ArgumentError, 'invalid value for "fax", the character length must be great than or equal to 0.'
      end

      @fax = fax
    end

    # Custom attribute writer method with validation
    # @param [Object] first_name Value to be assigned
    def first_name=(first_name)
      if !first_name.nil? && first_name.to_s.length > 35
        fail ArgumentError, 'invalid value for "first_name", the character length must be smaller than or equal to 35.'
      end

      if !first_name.nil? && first_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "first_name", the character length must be great than or equal to 0.'
      end

      @first_name = first_name
    end

    # Custom attribute writer method with validation
    # @param [Object] first_party_review_page Value to be assigned
    def first_party_review_page=(first_party_review_page)
      if !first_party_review_page.nil? && first_party_review_page.to_s.length < 0
        fail ArgumentError, 'invalid value for "first_party_review_page", the character length must be great than or equal to 0.'
      end

      @first_party_review_page = first_party_review_page
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fitness_center Object to be assigned
    def fitness_center=(fitness_center)
      validator = EnumAttributeValidator.new('String', ["FITNESS_CENTER_AVAILABLE", "FITNESS_CENTER_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(fitness_center)
        fail ArgumentError, "invalid value for \"fitness_center\", must be one of #{validator.allowable_values}."
      end
      @fitness_center = fitness_center
    end

    # Custom attribute writer method with validation
    # @param [Object] floor_count Value to be assigned
    def floor_count=(floor_count)
      if !floor_count.nil? && floor_count < 0
        fail ArgumentError, 'invalid value for "floor_count", must be greater than or equal to 0.'
      end

      @floor_count = floor_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] free_weights Object to be assigned
    def free_weights=(free_weights)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(free_weights)
        fail ArgumentError, "invalid value for \"free_weights\", must be one of #{validator.allowable_values}."
      end
      @free_weights = free_weights
    end

    # Custom attribute writer method with validation
    # @param [Object] frequently_asked_questions Value to be assigned
    def frequently_asked_questions=(frequently_asked_questions)
      @frequently_asked_questions = frequently_asked_questions
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] front_desk Object to be assigned
    def front_desk=(front_desk)
      validator = EnumAttributeValidator.new('String', ["FRONT_DESK_AVAILABLE", "FRONT_DESK_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      unless validator.valid?(front_desk)
        fail ArgumentError, "invalid value for \"front_desk\", must be one of #{validator.allowable_values}."
      end
      @front_desk = front_desk
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] game_room Object to be assigned
    def game_room=(game_room)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(game_room)
        fail ArgumentError, "invalid value for \"game_room\", must be one of #{validator.allowable_values}."
      end
      @game_room = game_room
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gender Object to be assigned
    def gender=(gender)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "FEMALE", "MALE"])
      unless validator.valid?(gender)
        fail ArgumentError, "invalid value for \"gender\", must be one of #{validator.allowable_values}."
      end
      @gender = gender
    end

    # Custom attribute writer method with validation
    # @param [Object] geomodifier Value to be assigned
    def geomodifier=(geomodifier)
      if !geomodifier.nil? && geomodifier.to_s.length < 0
        fail ArgumentError, 'invalid value for "geomodifier", the character length must be great than or equal to 0.'
      end

      @geomodifier = geomodifier
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gift_shop Object to be assigned
    def gift_shop=(gift_shop)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(gift_shop)
        fail ArgumentError, "invalid value for \"gift_shop\", must be one of #{validator.allowable_values}."
      end
      @gift_shop = gift_shop
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] golf Object to be assigned
    def golf=(golf)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(golf)
        fail ArgumentError, "invalid value for \"golf\", must be one of #{validator.allowable_values}."
      end
      @golf = golf
    end

    # Custom attribute writer method with validation
    # @param [Object] google_my_business_labels Value to be assigned
    def google_my_business_labels=(google_my_business_labels)
      @google_my_business_labels = google_my_business_labels
    end

    # Custom attribute writer method with validation
    # @param [Object] google_place_id Value to be assigned
    def google_place_id=(google_place_id)
      if !google_place_id.nil? && google_place_id.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_place_id", the character length must be great than or equal to 0.'
      end

      @google_place_id = google_place_id
    end

    # Custom attribute writer method with validation
    # @param [Object] google_website_override Value to be assigned
    def google_website_override=(google_website_override)
      if !google_website_override.nil? && google_website_override.to_s.length < 0
        fail ArgumentError, 'invalid value for "google_website_override", the character length must be great than or equal to 0.'
      end

      @google_website_override = google_website_override
    end

    # Custom attribute writer method with validation
    # @param [Object] hiring_organization Value to be assigned
    def hiring_organization=(hiring_organization)
      if !hiring_organization.nil? && hiring_organization.to_s.length < 0
        fail ArgumentError, 'invalid value for "hiring_organization", the character length must be great than or equal to 0.'
      end

      @hiring_organization = hiring_organization
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] horseback_riding Object to be assigned
    def horseback_riding=(horseback_riding)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(horseback_riding)
        fail ArgumentError, "invalid value for \"horseback_riding\", must be one of #{validator.allowable_values}."
      end
      @horseback_riding = horseback_riding
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] hot_tub Object to be assigned
    def hot_tub=(hot_tub)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(hot_tub)
        fail ArgumentError, "invalid value for \"hot_tub\", must be one of #{validator.allowable_values}."
      end
      @hot_tub = hot_tub
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] housekeeping Object to be assigned
    def housekeeping=(housekeeping)
      validator = EnumAttributeValidator.new('String', ["HOUSEKEEPING_AVAILABLE", "HOUSEKEEPING_AVAILABLE_DAILY", "NOT_APPLICABLE"])
      unless validator.valid?(housekeeping)
        fail ArgumentError, "invalid value for \"housekeeping\", must be one of #{validator.allowable_values}."
      end
      @housekeeping = housekeeping
    end

    # Custom attribute writer method with validation
    # @param [Object] impressum Value to be assigned
    def impressum=(impressum)
      if !impressum.nil? && impressum.to_s.length > 2000
        fail ArgumentError, 'invalid value for "impressum", the character length must be smaller than or equal to 2000.'
      end

      if !impressum.nil? && impressum.to_s.length < 0
        fail ArgumentError, 'invalid value for "impressum", the character length must be great than or equal to 0.'
      end

      @impressum = impressum
    end

    # Custom attribute writer method with validation
    # @param [Object] indoor_pool_count Value to be assigned
    def indoor_pool_count=(indoor_pool_count)
      if !indoor_pool_count.nil? && indoor_pool_count < 0
        fail ArgumentError, 'invalid value for "indoor_pool_count", must be greater than or equal to 0.'
      end

      @indoor_pool_count = indoor_pool_count
    end

    # Custom attribute writer method with validation
    # @param [Object] instagram_handle Value to be assigned
    def instagram_handle=(instagram_handle)
      if !instagram_handle.nil? && instagram_handle.to_s.length > 30
        fail ArgumentError, 'invalid value for "instagram_handle", the character length must be smaller than or equal to 30.'
      end

      if !instagram_handle.nil? && instagram_handle.to_s.length < 0
        fail ArgumentError, 'invalid value for "instagram_handle", the character length must be great than or equal to 0.'
      end

      @instagram_handle = instagram_handle
    end

    # Custom attribute writer method with validation
    # @param [Object] insurance_accepted Value to be assigned
    def insurance_accepted=(insurance_accepted)
      @insurance_accepted = insurance_accepted
    end

    # Custom attribute writer method with validation
    # @param [Object] ios_app_url Value to be assigned
    def ios_app_url=(ios_app_url)
      if !ios_app_url.nil? && ios_app_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "ios_app_url", the character length must be great than or equal to 0.'
      end

      @ios_app_url = ios_app_url
    end

    # Custom attribute writer method with validation
    # @param [Object] iso_region_code Value to be assigned
    def iso_region_code=(iso_region_code)
      if !iso_region_code.nil? && iso_region_code.to_s.length < 0
        fail ArgumentError, 'invalid value for "iso_region_code", the character length must be great than or equal to 0.'
      end

      @iso_region_code = iso_region_code
    end

    # Custom attribute writer method with validation
    # @param [Object] keywords Value to be assigned
    def keywords=(keywords)
      @keywords = keywords
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kid_friendly Object to be assigned
    def kid_friendly=(kid_friendly)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kid_friendly)
        fail ArgumentError, "invalid value for \"kid_friendly\", must be one of #{validator.allowable_values}."
      end
      @kid_friendly = kid_friendly
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kids_club Object to be assigned
    def kids_club=(kids_club)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kids_club)
        fail ArgumentError, "invalid value for \"kids_club\", must be one of #{validator.allowable_values}."
      end
      @kids_club = kids_club
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] kids_stay_free Object to be assigned
    def kids_stay_free=(kids_stay_free)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(kids_stay_free)
        fail ArgumentError, "invalid value for \"kids_stay_free\", must be one of #{validator.allowable_values}."
      end
      @kids_stay_free = kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] labels Value to be assigned
    def labels=(labels)
      @labels = labels
    end

    # Custom attribute writer method with validation
    # @param [Object] landing_page_url Value to be assigned
    def landing_page_url=(landing_page_url)
      if !landing_page_url.nil? && landing_page_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "landing_page_url", the character length must be great than or equal to 0.'
      end

      @landing_page_url = landing_page_url
    end

    # Custom attribute writer method with validation
    # @param [Object] languages Value to be assigned
    def languages=(languages)
      @languages = languages
    end

    # Custom attribute writer method with validation
    # @param [Object] last_name Value to be assigned
    def last_name=(last_name)
      if !last_name.nil? && last_name.to_s.length > 35
        fail ArgumentError, 'invalid value for "last_name", the character length must be smaller than or equal to 35.'
      end

      if !last_name.nil? && last_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "last_name", the character length must be great than or equal to 0.'
      end

      @last_name = last_name
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] laundry Object to be assigned
    def laundry=(laundry)
      validator = EnumAttributeValidator.new('String', ["FULL_SERVICE", "SELF_SERVICE", "NOT_APPLICABLE"])
      unless validator.valid?(laundry)
        fail ArgumentError, "invalid value for \"laundry\", must be one of #{validator.allowable_values}."
      end
      @laundry = laundry
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lazy_river Object to be assigned
    def lazy_river=(lazy_river)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(lazy_river)
        fail ArgumentError, "invalid value for \"lazy_river\", must be one of #{validator.allowable_values}."
      end
      @lazy_river = lazy_river
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] lifeguard Object to be assigned
    def lifeguard=(lifeguard)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(lifeguard)
        fail ArgumentError, "invalid value for \"lifeguard\", must be one of #{validator.allowable_values}."
      end
      @lifeguard = lifeguard
    end

    # Custom attribute writer method with validation
    # @param [Object] local_phone Value to be assigned
    def local_phone=(local_phone)
      if !local_phone.nil? && local_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "local_phone", the character length must be great than or equal to 0.'
      end

      @local_phone = local_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] local_shuttle Object to be assigned
    def local_shuttle=(local_shuttle)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(local_shuttle)
        fail ArgumentError, "invalid value for \"local_shuttle\", must be one of #{validator.allowable_values}."
      end
      @local_shuttle = local_shuttle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] location_type Object to be assigned
    def location_type=(location_type)
      validator = EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      unless validator.valid?(location_type)
        fail ArgumentError, "invalid value for \"location_type\", must be one of #{validator.allowable_values}."
      end
      @location_type = location_type
    end

    # Custom attribute writer method with validation
    # @param [Object] main_phone Value to be assigned
    def main_phone=(main_phone)
      if !main_phone.nil? && main_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "main_phone", the character length must be great than or equal to 0.'
      end

      @main_phone = main_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] massage Object to be assigned
    def massage=(massage)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(massage)
        fail ArgumentError, "invalid value for \"massage\", must be one of #{validator.allowable_values}."
      end
      @massage = massage
    end

    # Custom attribute writer method with validation
    # @param [Object] max_age_of_kids_stay_free Value to be assigned
    def max_age_of_kids_stay_free=(max_age_of_kids_stay_free)
      if !max_age_of_kids_stay_free.nil? && max_age_of_kids_stay_free < 0
        fail ArgumentError, 'invalid value for "max_age_of_kids_stay_free", must be greater than or equal to 0.'
      end

      @max_age_of_kids_stay_free = max_age_of_kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] max_number_of_kids_stay_free Value to be assigned
    def max_number_of_kids_stay_free=(max_number_of_kids_stay_free)
      if !max_number_of_kids_stay_free.nil? && max_number_of_kids_stay_free < 0
        fail ArgumentError, 'invalid value for "max_number_of_kids_stay_free", must be greater than or equal to 0.'
      end

      @max_number_of_kids_stay_free = max_number_of_kids_stay_free
    end

    # Custom attribute writer method with validation
    # @param [Object] meeting_room_count Value to be assigned
    def meeting_room_count=(meeting_room_count)
      if !meeting_room_count.nil? && meeting_room_count < 0
        fail ArgumentError, 'invalid value for "meeting_room_count", must be greater than or equal to 0.'
      end

      @meeting_room_count = meeting_room_count
    end

    # Custom attribute writer method with validation
    # @param [Object] middle_name Value to be assigned
    def middle_name=(middle_name)
      if !middle_name.nil? && middle_name.to_s.length > 35
        fail ArgumentError, 'invalid value for "middle_name", the character length must be smaller than or equal to 35.'
      end

      if !middle_name.nil? && middle_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "middle_name", the character length must be great than or equal to 0.'
      end

      @middle_name = middle_name
    end

    # Custom attribute writer method with validation
    # @param [Object] mobile_phone Value to be assigned
    def mobile_phone=(mobile_phone)
      if !mobile_phone.nil? && mobile_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "mobile_phone", the character length must be great than or equal to 0.'
      end

      @mobile_phone = mobile_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mobility_accessible Object to be assigned
    def mobility_accessible=(mobility_accessible)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(mobility_accessible)
        fail ArgumentError, "invalid value for \"mobility_accessible\", must be one of #{validator.allowable_values}."
      end
      @mobility_accessible = mobility_accessible
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] nightclub Object to be assigned
    def nightclub=(nightclub)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(nightclub)
        fail ArgumentError, "invalid value for \"nightclub\", must be one of #{validator.allowable_values}."
      end
      @nightclub = nightclub
    end

    # Custom attribute writer method with validation
    # @param [Object] npi Value to be assigned
    def npi=(npi)
      if !npi.nil? && npi.to_s.length < 0
        fail ArgumentError, 'invalid value for "npi", the character length must be great than or equal to 0.'
      end

      @npi = npi
    end

    # Custom attribute writer method with validation
    # @param [Object] office_name Value to be assigned
    def office_name=(office_name)
      if !office_name.nil? && office_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "office_name", the character length must be great than or equal to 0.'
      end

      @office_name = office_name
    end

    # Custom attribute writer method with validation
    # @param [Object] organizer_email Value to be assigned
    def organizer_email=(organizer_email)
      if !organizer_email.nil? && organizer_email.to_s.length < 0
        fail ArgumentError, 'invalid value for "organizer_email", the character length must be great than or equal to 0.'
      end

      @organizer_email = organizer_email
    end

    # Custom attribute writer method with validation
    # @param [Object] organizer_name Value to be assigned
    def organizer_name=(organizer_name)
      if !organizer_name.nil? && organizer_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "organizer_name", the character length must be great than or equal to 0.'
      end

      @organizer_name = organizer_name
    end

    # Custom attribute writer method with validation
    # @param [Object] organizer_phone Value to be assigned
    def organizer_phone=(organizer_phone)
      if !organizer_phone.nil? && organizer_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "organizer_phone", the character length must be great than or equal to 0.'
      end

      @organizer_phone = organizer_phone
    end

    # Custom attribute writer method with validation
    # @param [Object] outdoor_pool_count Value to be assigned
    def outdoor_pool_count=(outdoor_pool_count)
      if !outdoor_pool_count.nil? && outdoor_pool_count < 0
        fail ArgumentError, 'invalid value for "outdoor_pool_count", must be greater than or equal to 0.'
      end

      @outdoor_pool_count = outdoor_pool_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] parking Object to be assigned
    def parking=(parking)
      validator = EnumAttributeValidator.new('String', ["PARKING_AVAILABLE", "PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(parking)
        fail ArgumentError, "invalid value for \"parking\", must be one of #{validator.allowable_values}."
      end
      @parking = parking
    end

    # Custom attribute writer method with validation
    # @param [Object] performers Value to be assigned
    def performers=(performers)
      @performers = performers
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pets_allowed Object to be assigned
    def pets_allowed=(pets_allowed)
      validator = EnumAttributeValidator.new('String', ["PETS_WELCOME", "PETS_WELCOME_FOR_FREE", "NOT_APPLICABLE", "NOT_ALLOWED"])
      unless validator.valid?(pets_allowed)
        fail ArgumentError, "invalid value for \"pets_allowed\", must be one of #{validator.allowable_values}."
      end
      @pets_allowed = pets_allowed
    end

    # Custom attribute writer method with validation
    # @param [Object] photo_gallery Value to be assigned
    def photo_gallery=(photo_gallery)
      @photo_gallery = photo_gallery
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] price_range Object to be assigned
    def price_range=(price_range)
      validator = EnumAttributeValidator.new('String', ["UNSPECIFIED", "ONE", "TWO", "THREE", "FOUR"])
      unless validator.valid?(price_range)
        fail ArgumentError, "invalid value for \"price_range\", must be one of #{validator.allowable_values}."
      end
      @price_range = price_range
    end

    # Custom attribute writer method with validation
    # @param [Object] primary_conversation_contact Value to be assigned
    def primary_conversation_contact=(primary_conversation_contact)
      if !primary_conversation_contact.nil? && primary_conversation_contact.to_s.length < 0
        fail ArgumentError, 'invalid value for "primary_conversation_contact", the character length must be great than or equal to 0.'
      end

      @primary_conversation_contact = primary_conversation_contact
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] private_beach Object to be assigned
    def private_beach=(private_beach)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(private_beach)
        fail ArgumentError, "invalid value for \"private_beach\", must be one of #{validator.allowable_values}."
      end
      @private_beach = private_beach
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] private_car_service Object to be assigned
    def private_car_service=(private_car_service)
      validator = EnumAttributeValidator.new('String', ["PRIVATE_CAR_SERVICE", "PRIVATE_CAR_SERVICE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(private_car_service)
        fail ArgumentError, "invalid value for \"private_car_service\", must be one of #{validator.allowable_values}."
      end
      @private_car_service = private_car_service
    end

    # Custom attribute writer method with validation
    # @param [Object] products Value to be assigned
    def products=(products)
      @products = products
    end

    # Custom attribute writer method with validation
    # @param [Object] rank_tracking_competitors Value to be assigned
    def rank_tracking_competitors=(rank_tracking_competitors)
      @rank_tracking_competitors = rank_tracking_competitors
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] rank_tracking_frequency Object to be assigned
    def rank_tracking_frequency=(rank_tracking_frequency)
      validator = EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      unless validator.valid?(rank_tracking_frequency)
        fail ArgumentError, "invalid value for \"rank_tracking_frequency\", must be one of #{validator.allowable_values}."
      end
      @rank_tracking_frequency = rank_tracking_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] restaurant_count Value to be assigned
    def restaurant_count=(restaurant_count)
      if !restaurant_count.nil? && restaurant_count < 0
        fail ArgumentError, 'invalid value for "restaurant_count", must be greater than or equal to 0.'
      end

      @restaurant_count = restaurant_count
    end

    # Custom attribute writer method with validation
    # @param [Object] review_generation_url Value to be assigned
    def review_generation_url=(review_generation_url)
      if !review_generation_url.nil? && review_generation_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "review_generation_url", the character length must be great than or equal to 0.'
      end

      @review_generation_url = review_generation_url
    end

    # Custom attribute writer method with validation
    # @param [Object] room_count Value to be assigned
    def room_count=(room_count)
      if !room_count.nil? && room_count < 0
        fail ArgumentError, 'invalid value for "room_count", must be greater than or equal to 0.'
      end

      @room_count = room_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] room_service Object to be assigned
    def room_service=(room_service)
      validator = EnumAttributeValidator.new('String', ["ROOM_SERVICE_AVAILABLE", "ROOM_SERVICE_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      unless validator.valid?(room_service)
        fail ArgumentError, "invalid value for \"room_service\", must be one of #{validator.allowable_values}."
      end
      @room_service = room_service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] salon Object to be assigned
    def salon=(salon)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(salon)
        fail ArgumentError, "invalid value for \"salon\", must be one of #{validator.allowable_values}."
      end
      @salon = salon
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] sauna Object to be assigned
    def sauna=(sauna)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(sauna)
        fail ArgumentError, "invalid value for \"sauna\", must be one of #{validator.allowable_values}."
      end
      @sauna = sauna
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] scuba Object to be assigned
    def scuba=(scuba)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(scuba)
        fail ArgumentError, "invalid value for \"scuba\", must be one of #{validator.allowable_values}."
      end
      @scuba = scuba
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] self_parking Object to be assigned
    def self_parking=(self_parking)
      validator = EnumAttributeValidator.new('String', ["SELF_PARKING_AVAILABLE", "SELF_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(self_parking)
        fail ArgumentError, "invalid value for \"self_parking\", must be one of #{validator.allowable_values}."
      end
      @self_parking = self_parking
    end

    # Custom attribute writer method with validation
    # @param [Object] service_area_places Value to be assigned
    def service_area_places=(service_area_places)
      @service_area_places = service_area_places
    end

    # Custom attribute writer method with validation
    # @param [Object] services Value to be assigned
    def services=(services)
      @services = services
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] smoke_free_property Object to be assigned
    def smoke_free_property=(smoke_free_property)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(smoke_free_property)
        fail ArgumentError, "invalid value for \"smoke_free_property\", must be one of #{validator.allowable_values}."
      end
      @smoke_free_property = smoke_free_property
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] snorkeling Object to be assigned
    def snorkeling=(snorkeling)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(snorkeling)
        fail ArgumentError, "invalid value for \"snorkeling\", must be one of #{validator.allowable_values}."
      end
      @snorkeling = snorkeling
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] social_hour Object to be assigned
    def social_hour=(social_hour)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(social_hour)
        fail ArgumentError, "invalid value for \"social_hour\", must be one of #{validator.allowable_values}."
      end
      @social_hour = social_hour
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] spa Object to be assigned
    def spa=(spa)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(spa)
        fail ArgumentError, "invalid value for \"spa\", must be one of #{validator.allowable_values}."
      end
      @spa = spa
    end

    # Custom attribute writer method with validation
    # @param [Object] specialities Value to be assigned
    def specialities=(specialities)
      @specialities = specialities
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] table_service Object to be assigned
    def table_service=(table_service)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(table_service)
        fail ArgumentError, "invalid value for \"table_service\", must be one of #{validator.allowable_values}."
      end
      @table_service = table_service
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tennis Object to be assigned
    def tennis=(tennis)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(tennis)
        fail ArgumentError, "invalid value for \"tennis\", must be one of #{validator.allowable_values}."
      end
      @tennis = tennis
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] thermal_pool Object to be assigned
    def thermal_pool=(thermal_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(thermal_pool)
        fail ArgumentError, "invalid value for \"thermal_pool\", must be one of #{validator.allowable_values}."
      end
      @thermal_pool = thermal_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] ticket_availability Object to be assigned
    def ticket_availability=(ticket_availability)
      validator = EnumAttributeValidator.new('String', ["IN_STOCK", "SOLD_OUT", "PRE_ORDER", "UNSPECIFIED"])
      unless validator.valid?(ticket_availability)
        fail ArgumentError, "invalid value for \"ticket_availability\", must be one of #{validator.allowable_values}."
      end
      @ticket_availability = ticket_availability
    end

    # Custom attribute writer method with validation
    # @param [Object] ticket_url Value to be assigned
    def ticket_url=(ticket_url)
      if !ticket_url.nil? && ticket_url.to_s.length < 0
        fail ArgumentError, 'invalid value for "ticket_url", the character length must be great than or equal to 0.'
      end

      @ticket_url = ticket_url
    end

    # Custom attribute writer method with validation
    # @param [Object] time_zone_utc_offset Value to be assigned
    def time_zone_utc_offset=(time_zone_utc_offset)
      if !time_zone_utc_offset.nil? && time_zone_utc_offset.to_s.length < 0
        fail ArgumentError, 'invalid value for "time_zone_utc_offset", the character length must be great than or equal to 0.'
      end

      @time_zone_utc_offset = time_zone_utc_offset
    end

    # Custom attribute writer method with validation
    # @param [Object] timezone Value to be assigned
    def timezone=(timezone)
      if !timezone.nil? && timezone.to_s.length < 0
        fail ArgumentError, 'invalid value for "timezone", the character length must be great than or equal to 0.'
      end

      @timezone = timezone
    end

    # Custom attribute writer method with validation
    # @param [Object] toll_free_phone Value to be assigned
    def toll_free_phone=(toll_free_phone)
      if !toll_free_phone.nil? && toll_free_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "toll_free_phone", the character length must be great than or equal to 0.'
      end

      @toll_free_phone = toll_free_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] treadmill Object to be assigned
    def treadmill=(treadmill)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(treadmill)
        fail ArgumentError, "invalid value for \"treadmill\", must be one of #{validator.allowable_values}."
      end
      @treadmill = treadmill
    end

    # Custom attribute writer method with validation
    # @param [Object] tty_phone Value to be assigned
    def tty_phone=(tty_phone)
      if !tty_phone.nil? && tty_phone.to_s.length < 0
        fail ArgumentError, 'invalid value for "tty_phone", the character length must be great than or equal to 0.'
      end

      @tty_phone = tty_phone
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] turndown_service Object to be assigned
    def turndown_service=(turndown_service)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(turndown_service)
        fail ArgumentError, "invalid value for \"turndown_service\", must be one of #{validator.allowable_values}."
      end
      @turndown_service = turndown_service
    end

    # Custom attribute writer method with validation
    # @param [Object] twitter_handle Value to be assigned
    def twitter_handle=(twitter_handle)
      if !twitter_handle.nil? && twitter_handle.to_s.length > 15
        fail ArgumentError, 'invalid value for "twitter_handle", the character length must be smaller than or equal to 15.'
      end

      if !twitter_handle.nil? && twitter_handle.to_s.length < 0
        fail ArgumentError, 'invalid value for "twitter_handle", the character length must be great than or equal to 0.'
      end

      @twitter_handle = twitter_handle
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] valet_parking Object to be assigned
    def valet_parking=(valet_parking)
      validator = EnumAttributeValidator.new('String', ["VALET_PARKING_AVAILABLE", "VALET_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(valet_parking)
        fail ArgumentError, "invalid value for \"valet_parking\", must be one of #{validator.allowable_values}."
      end
      @valet_parking = valet_parking
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] vending_machine Object to be assigned
    def vending_machine=(vending_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(vending_machine)
        fail ArgumentError, "invalid value for \"vending_machine\", must be one of #{validator.allowable_values}."
      end
      @vending_machine = vending_machine
    end

    # Custom attribute writer method with validation
    # @param [Object] venue_name Value to be assigned
    def venue_name=(venue_name)
      if !venue_name.nil? && venue_name.to_s.length < 0
        fail ArgumentError, 'invalid value for "venue_name", the character length must be great than or equal to 0.'
      end

      @venue_name = venue_name
    end

    # Custom attribute writer method with validation
    # @param [Object] videos Value to be assigned
    def videos=(videos)
      @videos = videos
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wading_pool Object to be assigned
    def wading_pool=(wading_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wading_pool)
        fail ArgumentError, "invalid value for \"wading_pool\", must be one of #{validator.allowable_values}."
      end
      @wading_pool = wading_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wake_up_calls Object to be assigned
    def wake_up_calls=(wake_up_calls)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wake_up_calls)
        fail ArgumentError, "invalid value for \"wake_up_calls\", must be one of #{validator.allowable_values}."
      end
      @wake_up_calls = wake_up_calls
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] water_park Object to be assigned
    def water_park=(water_park)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(water_park)
        fail ArgumentError, "invalid value for \"water_park\", must be one of #{validator.allowable_values}."
      end
      @water_park = water_park
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] water_skiing Object to be assigned
    def water_skiing=(water_skiing)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(water_skiing)
        fail ArgumentError, "invalid value for \"water_skiing\", must be one of #{validator.allowable_values}."
      end
      @water_skiing = water_skiing
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] watercraft Object to be assigned
    def watercraft=(watercraft)
      validator = EnumAttributeValidator.new('String', ["WATERCRAFT_RENTALS", "WATERCRAFT_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(watercraft)
        fail ArgumentError, "invalid value for \"watercraft\", must be one of #{validator.allowable_values}."
      end
      @watercraft = watercraft
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] waterslide Object to be assigned
    def waterslide=(waterslide)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(waterslide)
        fail ArgumentError, "invalid value for \"waterslide\", must be one of #{validator.allowable_values}."
      end
      @waterslide = waterslide
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wave_pool Object to be assigned
    def wave_pool=(wave_pool)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wave_pool)
        fail ArgumentError, "invalid value for \"wave_pool\", must be one of #{validator.allowable_values}."
      end
      @wave_pool = wave_pool
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] weight_machine Object to be assigned
    def weight_machine=(weight_machine)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(weight_machine)
        fail ArgumentError, "invalid value for \"weight_machine\", must be one of #{validator.allowable_values}."
      end
      @weight_machine = weight_machine
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wheelchair_accessible Object to be assigned
    def wheelchair_accessible=(wheelchair_accessible)
      validator = EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      unless validator.valid?(wheelchair_accessible)
        fail ArgumentError, "invalid value for \"wheelchair_accessible\", must be one of #{validator.allowable_values}."
      end
      @wheelchair_accessible = wheelchair_accessible
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] wifi_available Object to be assigned
    def wifi_available=(wifi_available)
      validator = EnumAttributeValidator.new('String', ["WIFI_AVAILABLE", "WIFI_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      unless validator.valid?(wifi_available)
        fail ArgumentError, "invalid value for \"wifi_available\", must be one of #{validator.allowable_values}."
      end
      @wifi_available = wifi_available
    end

    # Custom attribute writer method with validation
    # @param [Object] year_established Value to be assigned
    def year_established=(year_established)
      if !year_established.nil? && year_established > 2028
        fail ArgumentError, 'invalid value for "year_established", must be smaller than or equal to 2028.'
      end

      if !year_established.nil? && year_established < 1000
        fail ArgumentError, 'invalid value for "year_established", must be greater than or equal to 1000.'
      end

      @year_established = year_established
    end

    # Custom attribute writer method with validation
    # @param [Object] year_last_renovated Value to be assigned
    def year_last_renovated=(year_last_renovated)
      if !year_last_renovated.nil? && year_last_renovated > 2028
        fail ArgumentError, 'invalid value for "year_last_renovated", must be smaller than or equal to 2028.'
      end

      if !year_last_renovated.nil? && year_last_renovated < 1000
        fail ArgumentError, 'invalid value for "year_last_renovated", must be greater than or equal to 1000.'
      end

      @year_last_renovated = year_last_renovated
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          meta == o.meta &&
          name == o.name &&
          address == o.address &&
          accepting_new_patients == o.accepting_new_patients &&
          accepts_reservations == o.accepts_reservations &&
          access_hours == o.access_hours &&
          additional_hours_text == o.additional_hours_text &&
          additional_promoting_locations == o.additional_promoting_locations &&
          address_hidden == o.address_hidden &&
          admitting_hospitals == o.admitting_hospitals &&
          adult_pool == o.adult_pool &&
          age_range == o.age_range &&
          airport_shuttle == o.airport_shuttle &&
          airport_transfer == o.airport_transfer &&
          all_inclusive == o.all_inclusive &&
          alternate_names == o.alternate_names &&
          alternate_phone == o.alternate_phone &&
          alternate_websites == o.alternate_websites &&
          android_app_url == o.android_app_url &&
          answer == o.answer &&
          application_url == o.application_url &&
          associations == o.associations &&
          attendance == o.attendance &&
          attire == o.attire &&
          babysitting_offered == o.babysitting_offered &&
          baggage_storage == o.baggage_storage &&
          bar == o.bar &&
          beach_access == o.beach_access &&
          beach_front_property == o.beach_front_property &&
          bicycles == o.bicycles &&
          bios == o.bios &&
          boutique_stores == o.boutique_stores &&
          brands == o.brands &&
          breakfast == o.breakfast &&
          brunch_hours == o.brunch_hours &&
          business_center == o.business_center &&
          calendars == o.calendars &&
          car_rental == o.car_rental &&
          casino == o.casino &&
          category_ids == o.category_ids &&
          cats_allowed == o.cats_allowed &&
          certifications == o.certifications &&
          check_in_time == o.check_in_time &&
          check_out_time == o.check_out_time &&
          classification_rating == o.classification_rating &&
          closed == o.closed &&
          concierge == o.concierge &&
          conditions_treated == o.conditions_treated &&
          convenience_store == o.convenience_store &&
          covid_messaging == o.covid_messaging &&
          covid_test_appointment_url == o.covid_test_appointment_url &&
          covid_testing_appointment_required == o.covid_testing_appointment_required &&
          covid_testing_drive_through_site == o.covid_testing_drive_through_site &&
          covid_testing_is_free == o.covid_testing_is_free &&
          covid_testing_patient_restrictions == o.covid_testing_patient_restrictions &&
          covid_testing_referral_required == o.covid_testing_referral_required &&
          covid_testing_site_instructions == o.covid_testing_site_instructions &&
          covid_vaccine_appointment_required == o.covid_vaccine_appointment_required &&
          covid_vaccine_drive_through_site == o.covid_vaccine_drive_through_site &&
          covid_vaccine_information_url == o.covid_vaccine_information_url &&
          covid_vaccine_patient_restrictions == o.covid_vaccine_patient_restrictions &&
          covid_vaccine_referral_required == o.covid_vaccine_referral_required &&
          covid_vaccine_site_instructions == o.covid_vaccine_site_instructions &&
          covid_vaccines_offered == o.covid_vaccines_offered &&
          currency_exchange == o.currency_exchange &&
          custom_keywords == o.custom_keywords &&
          date_posted == o.date_posted &&
          degrees == o.degrees &&
          delivery_hours == o.delivery_hours &&
          description == o.description &&
          display_coordinate == o.display_coordinate &&
          doctor_on_call == o.doctor_on_call &&
          dogs_allowed == o.dogs_allowed &&
          drive_through_hours == o.drive_through_hours &&
          dropoff_coordinate == o.dropoff_coordinate &&
          education_list == o.education_list &&
          electric_charging_station == o.electric_charging_station &&
          elevator == o.elevator &&
          elliptical_machine == o.elliptical_machine &&
          emails == o.emails &&
          employment_type == o.employment_type &&
          event_status == o.event_status &&
          facebook_call_to_action == o.facebook_call_to_action &&
          facebook_cover_photo == o.facebook_cover_photo &&
          facebook_descriptor == o.facebook_descriptor &&
          facebook_name == o.facebook_name &&
          facebook_override_city == o.facebook_override_city &&
          facebook_page_url == o.facebook_page_url &&
          facebook_profile_photo == o.facebook_profile_photo &&
          facebook_vanity_url == o.facebook_vanity_url &&
          fax == o.fax &&
          featured_message == o.featured_message &&
          first_name == o.first_name &&
          first_party_review_page == o.first_party_review_page &&
          fitness_center == o.fitness_center &&
          floor_count == o.floor_count &&
          free_weights == o.free_weights &&
          frequently_asked_questions == o.frequently_asked_questions &&
          front_desk == o.front_desk &&
          fully_vaccinated_staff == o.fully_vaccinated_staff &&
          game_room == o.game_room &&
          gender == o.gender &&
          geomodifier == o.geomodifier &&
          gift_shop == o.gift_shop &&
          golf == o.golf &&
          google_attributes == o.google_attributes &&
          google_cover_photo == o.google_cover_photo &&
          google_my_business_labels == o.google_my_business_labels &&
          google_place_id == o.google_place_id &&
          google_profile_photo == o.google_profile_photo &&
          google_website_override == o.google_website_override &&
          happy_hours == o.happy_hours &&
          headshot == o.headshot &&
          hiring_organization == o.hiring_organization &&
          holiday_hours_conversation_enabled == o.holiday_hours_conversation_enabled &&
          horseback_riding == o.horseback_riding &&
          hot_tub == o.hot_tub &&
          hours == o.hours &&
          housekeeping == o.housekeeping &&
          impressum == o.impressum &&
          indoor_pool_count == o.indoor_pool_count &&
          instagram_handle == o.instagram_handle &&
          insurance_accepted == o.insurance_accepted &&
          ios_app_url == o.ios_app_url &&
          is_cluster_primary == o.is_cluster_primary &&
          is_free_event == o.is_free_event &&
          iso_region_code == o.iso_region_code &&
          keywords == o.keywords &&
          kid_friendly == o.kid_friendly &&
          kids_club == o.kids_club &&
          kids_stay_free == o.kids_stay_free &&
          kitchen_hours == o.kitchen_hours &&
          labels == o.labels &&
          landing_page_url == o.landing_page_url &&
          languages == o.languages &&
          last_name == o.last_name &&
          laundry == o.laundry &&
          lazy_river == o.lazy_river &&
          lifeguard == o.lifeguard &&
          linked_location == o.linked_location &&
          local_phone == o.local_phone &&
          local_shuttle == o.local_shuttle &&
          located_in == o.located_in &&
          location == o.location &&
          location_type == o.location_type &&
          logo == o.logo &&
          main_phone == o.main_phone &&
          massage == o.massage &&
          max_age_of_kids_stay_free == o.max_age_of_kids_stay_free &&
          max_number_of_kids_stay_free == o.max_number_of_kids_stay_free &&
          meals_served == o.meals_served &&
          meeting_room_count == o.meeting_room_count &&
          menu_url == o.menu_url &&
          menus == o.menus &&
          middle_name == o.middle_name &&
          mobile_phone == o.mobile_phone &&
          mobility_accessible == o.mobility_accessible &&
          nightclub == o.nightclub &&
          npi == o.npi &&
          nudge_enabled == o.nudge_enabled &&
          office_name == o.office_name &&
          online_service_hours == o.online_service_hours &&
          order_url == o.order_url &&
          organizer_email == o.organizer_email &&
          organizer_name == o.organizer_name &&
          organizer_phone == o.organizer_phone &&
          outdoor_pool_count == o.outdoor_pool_count &&
          parking == o.parking &&
          payment_options == o.payment_options &&
          performers == o.performers &&
          pets_allowed == o.pets_allowed &&
          photo_gallery == o.photo_gallery &&
          pickup_coordinate == o.pickup_coordinate &&
          pickup_hours == o.pickup_hours &&
          price_range == o.price_range &&
          primary_conversation_contact == o.primary_conversation_contact &&
          private_beach == o.private_beach &&
          private_car_service == o.private_car_service &&
          product_lists == o.product_lists &&
          products == o.products &&
          questions_and_answers == o.questions_and_answers &&
          rank_tracking_competitors == o.rank_tracking_competitors &&
          rank_tracking_enabled == o.rank_tracking_enabled &&
          rank_tracking_frequency == o.rank_tracking_frequency &&
          rank_tracking_query_templates == o.rank_tracking_query_templates &&
          rank_tracking_sites == o.rank_tracking_sites &&
          reservation_url == o.reservation_url &&
          restaurant_count == o.restaurant_count &&
          review_generation_url == o.review_generation_url &&
          review_response_conversation_enabled == o.review_response_conversation_enabled &&
          room_count == o.room_count &&
          room_service == o.room_service &&
          routable_coordinate == o.routable_coordinate &&
          salon == o.salon &&
          sauna == o.sauna &&
          scuba == o.scuba &&
          self_parking == o.self_parking &&
          senior_hours == o.senior_hours &&
          service_area == o.service_area &&
          service_area_places == o.service_area_places &&
          services == o.services &&
          smoke_free_property == o.smoke_free_property &&
          snorkeling == o.snorkeling &&
          social_hour == o.social_hour &&
          spa == o.spa &&
          specialities == o.specialities &&
          table_service == o.table_service &&
          takeout_hours == o.takeout_hours &&
          tennis == o.tennis &&
          thermal_pool == o.thermal_pool &&
          ticket_availability == o.ticket_availability &&
          ticket_price_range == o.ticket_price_range &&
          ticket_sale_date_time == o.ticket_sale_date_time &&
          ticket_url == o.ticket_url &&
          time == o.time &&
          time_zone_utc_offset == o.time_zone_utc_offset &&
          timezone == o.timezone &&
          toll_free_phone == o.toll_free_phone &&
          treadmill == o.treadmill &&
          tty_phone == o.tty_phone &&
          turndown_service == o.turndown_service &&
          twitter_handle == o.twitter_handle &&
          uber_link == o.uber_link &&
          uber_trip_branding == o.uber_trip_branding &&
          valet_parking == o.valet_parking &&
          valid_through == o.valid_through &&
          vending_machine == o.vending_machine &&
          venue_name == o.venue_name &&
          videos == o.videos &&
          wading_pool == o.wading_pool &&
          wake_up_calls == o.wake_up_calls &&
          walkable_coordinate == o.walkable_coordinate &&
          water_park == o.water_park &&
          water_skiing == o.water_skiing &&
          watercraft == o.watercraft &&
          waterslide == o.waterslide &&
          wave_pool == o.wave_pool &&
          website_url == o.website_url &&
          weight_machine == o.weight_machine &&
          wheelchair_accessible == o.wheelchair_accessible &&
          wifi_available == o.wifi_available &&
          work_remote == o.work_remote &&
          year_established == o.year_established &&
          year_last_renovated == o.year_last_renovated &&
          yext_display_coordinate == o.yext_display_coordinate &&
          yext_dropoff_coordinate == o.yext_dropoff_coordinate &&
          yext_pickup_coordinate == o.yext_pickup_coordinate &&
          yext_routable_coordinate == o.yext_routable_coordinate &&
          yext_walkable_coordinate == o.yext_walkable_coordinate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [meta, name, address, accepting_new_patients, accepts_reservations, access_hours, additional_hours_text, additional_promoting_locations, address_hidden, admitting_hospitals, adult_pool, age_range, airport_shuttle, airport_transfer, all_inclusive, alternate_names, alternate_phone, alternate_websites, android_app_url, answer, application_url, associations, attendance, attire, babysitting_offered, baggage_storage, bar, beach_access, beach_front_property, bicycles, bios, boutique_stores, brands, breakfast, brunch_hours, business_center, calendars, car_rental, casino, category_ids, cats_allowed, certifications, check_in_time, check_out_time, classification_rating, closed, concierge, conditions_treated, convenience_store, covid_messaging, covid_test_appointment_url, covid_testing_appointment_required, covid_testing_drive_through_site, covid_testing_is_free, covid_testing_patient_restrictions, covid_testing_referral_required, covid_testing_site_instructions, covid_vaccine_appointment_required, covid_vaccine_drive_through_site, covid_vaccine_information_url, covid_vaccine_patient_restrictions, covid_vaccine_referral_required, covid_vaccine_site_instructions, covid_vaccines_offered, currency_exchange, custom_keywords, date_posted, degrees, delivery_hours, description, display_coordinate, doctor_on_call, dogs_allowed, drive_through_hours, dropoff_coordinate, education_list, electric_charging_station, elevator, elliptical_machine, emails, employment_type, event_status, facebook_call_to_action, facebook_cover_photo, facebook_descriptor, facebook_name, facebook_override_city, facebook_page_url, facebook_profile_photo, facebook_vanity_url, fax, featured_message, first_name, first_party_review_page, fitness_center, floor_count, free_weights, frequently_asked_questions, front_desk, fully_vaccinated_staff, game_room, gender, geomodifier, gift_shop, golf, google_attributes, google_cover_photo, google_my_business_labels, google_place_id, google_profile_photo, google_website_override, happy_hours, headshot, hiring_organization, holiday_hours_conversation_enabled, horseback_riding, hot_tub, hours, housekeeping, impressum, indoor_pool_count, instagram_handle, insurance_accepted, ios_app_url, is_cluster_primary, is_free_event, iso_region_code, keywords, kid_friendly, kids_club, kids_stay_free, kitchen_hours, labels, landing_page_url, languages, last_name, laundry, lazy_river, lifeguard, linked_location, local_phone, local_shuttle, located_in, location, location_type, logo, main_phone, massage, max_age_of_kids_stay_free, max_number_of_kids_stay_free, meals_served, meeting_room_count, menu_url, menus, middle_name, mobile_phone, mobility_accessible, nightclub, npi, nudge_enabled, office_name, online_service_hours, order_url, organizer_email, organizer_name, organizer_phone, outdoor_pool_count, parking, payment_options, performers, pets_allowed, photo_gallery, pickup_coordinate, pickup_hours, price_range, primary_conversation_contact, private_beach, private_car_service, product_lists, products, questions_and_answers, rank_tracking_competitors, rank_tracking_enabled, rank_tracking_frequency, rank_tracking_query_templates, rank_tracking_sites, reservation_url, restaurant_count, review_generation_url, review_response_conversation_enabled, room_count, room_service, routable_coordinate, salon, sauna, scuba, self_parking, senior_hours, service_area, service_area_places, services, smoke_free_property, snorkeling, social_hour, spa, specialities, table_service, takeout_hours, tennis, thermal_pool, ticket_availability, ticket_price_range, ticket_sale_date_time, ticket_url, time, time_zone_utc_offset, timezone, toll_free_phone, treadmill, tty_phone, turndown_service, twitter_handle, uber_link, uber_trip_branding, valet_parking, valid_through, vending_machine, venue_name, videos, wading_pool, wake_up_calls, walkable_coordinate, water_park, water_skiing, watercraft, waterslide, wave_pool, website_url, weight_machine, wheelchair_accessible, wifi_available, work_remote, year_established, year_last_renovated, yext_display_coordinate, yext_dropoff_coordinate, yext_pickup_coordinate, yext_routable_coordinate, yext_walkable_coordinate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
