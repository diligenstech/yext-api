=begin
#Yext Admin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class NewLocationAddRequest
    # Your ID for the location to be added.
    attr_accessor :new_location_id

    # *(Partner Portal mode)* Supply your ID for the account that the new location should be created in. If this account is your main account or an existing sub-account, the location will be placed there. Otherwise, a new account will be created. 
    attr_accessor :new_location_account_id

    # *(Partner Portal mode)* If a new account is created, this field's value will set the account's name. If a new account is created, and a value for this field is not provided, the new account's name will default to the location's name. 
    attr_accessor :new_location_account_name

    # *(Partner Portal mode, advanced use only)* If you have a multi-layer account structure and want the new account created for this request to be under one of your sub-accounts, rather than directly under your main account, specify that sub-account's ID in this field. 
    attr_accessor :new_account_parent_account_id

    # If you set `newLocationId`, you must specify either `newLocationData` or `newEntityData`.  This field allows you to set the profile data for a location, using our legacy format. Profile content is specified in the same format as when creating a location with the Locations: Create endpoint.  If the Add Request is processed successfully, this data will be used to create a new location in your account. 
    attr_accessor :new_location_data

    # If you set `newEntityData`, this field specifies the type of entity to be created. 
    attr_accessor :new_entity_type

    # If you set `newLocationId`, you must specify either `newLocationData` or `newEntityData`.  This field allows you to set the profile data for an entity. Profile content is specified in the same format as when creating an entity with the Entities: Create endpoint. You can only create entities of a type specified by `newEntityType`.  If the Add Request is processed successfully, this data will be used to create a new entity in your account.  **The dropdown will specify the profile content for `newEntityData`. Specify the entity type with `newEntityType` described above.** 
    attr_accessor :new_entity_data

    # List of SKUs that you would like to sign the location up for, from among those listed in the **Available Services: List** response with Location recipientType. 
    attr_accessor :skus

    # *(Advanced field)* The Agreement ID of the agreement that services will be added under. This value is set automatically by Yext when you create the Add request. (You can specify it yourself, but should not do so unless you have intentionally set up multiple active agreements with Yext, since it could cause your integration to break when you renew or upgrade your agreement.) 
    attr_accessor :agreement_id

    # *(Sandbox API only)* Forces this Add request into the `REVIEW` status if it otherwise would have completed successfully. 
    attr_accessor :force_review

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'new_location_id' => :'newLocationId',
        :'new_location_account_id' => :'newLocationAccountId',
        :'new_location_account_name' => :'newLocationAccountName',
        :'new_account_parent_account_id' => :'newAccountParentAccountId',
        :'new_location_data' => :'newLocationData',
        :'new_entity_type' => :'newEntityType',
        :'new_entity_data' => :'newEntityData',
        :'skus' => :'skus',
        :'agreement_id' => :'agreementId',
        :'force_review' => :'forceReview'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'new_location_id' => :'String',
        :'new_location_account_id' => :'String',
        :'new_location_account_name' => :'String',
        :'new_account_parent_account_id' => :'String',
        :'new_location_data' => :'Location',
        :'new_entity_type' => :'String',
        :'new_entity_data' => :'Object',
        :'skus' => :'Array<String>',
        :'agreement_id' => :'Integer',
        :'force_review' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'new_location_data',
        :'new_entity_data',
      ])
    end

    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'new_entity_type'
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::NewLocationAddRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::NewLocationAddRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'new_location_id')
        self.new_location_id = attributes[:'new_location_id']
      end

      if attributes.key?(:'new_location_account_id')
        self.new_location_account_id = attributes[:'new_location_account_id']
      end

      if attributes.key?(:'new_location_account_name')
        self.new_location_account_name = attributes[:'new_location_account_name']
      end

      if attributes.key?(:'new_account_parent_account_id')
        self.new_account_parent_account_id = attributes[:'new_account_parent_account_id']
      end

      if attributes.key?(:'new_location_data')
        self.new_location_data = attributes[:'new_location_data']
      end

      if attributes.key?(:'new_entity_type')
        self.new_entity_type = attributes[:'new_entity_type']
      else
        self.new_entity_type = 'location'
      end

      if attributes.key?(:'new_entity_data')
        self.new_entity_data = attributes[:'new_entity_data']
      end

      if attributes.key?(:'skus')
        if (value = attributes[:'skus']).is_a?(Array)
          self.skus = value
        end
      end

      if attributes.key?(:'agreement_id')
        self.agreement_id = attributes[:'agreement_id']
      end

      if attributes.key?(:'force_review')
        self.force_review = attributes[:'force_review']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @new_location_id.nil?
        invalid_properties.push('invalid value for "new_location_id", new_location_id cannot be nil.')
      end

      if @skus.nil?
        invalid_properties.push('invalid value for "skus", skus cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @new_location_id.nil?
      new_entity_type_validator = EnumAttributeValidator.new('String', ["atm", "healthcareFacility", "healthcareProfessional", "hotel", "location", "restaurant"])
      return false unless new_entity_type_validator.valid?(@new_entity_type)
      return false if @skus.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_entity_type Object to be assigned
    def new_entity_type=(new_entity_type)
      validator = EnumAttributeValidator.new('String', ["atm", "healthcareFacility", "healthcareProfessional", "hotel", "location", "restaurant"])
      unless validator.valid?(new_entity_type)
        fail ArgumentError, "invalid value for \"new_entity_type\", must be one of #{validator.allowable_values}."
      end
      @new_entity_type = new_entity_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          new_location_id == o.new_location_id &&
          new_location_account_id == o.new_location_account_id &&
          new_location_account_name == o.new_location_account_name &&
          new_account_parent_account_id == o.new_account_parent_account_id &&
          new_location_data == o.new_location_data &&
          new_entity_type == o.new_entity_type &&
          new_entity_data == o.new_entity_data &&
          skus == o.skus &&
          agreement_id == o.agreement_id &&
          force_review == o.force_review
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [new_location_id, new_location_account_id, new_location_account_name, new_account_parent_account_id, new_location_data, new_entity_type, new_entity_data, skus, agreement_id, force_review].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
