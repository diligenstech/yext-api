=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  class Review
    # ID of this review
    attr_accessor :id

    # ID of the location associated with this review
    attr_accessor :location_id

    # ID of the account associated with this review
    attr_accessor :account_id

    # For third-party reviews, the ID of publisher associated with this listing. For first-party reviews, this will be FIRSTPARTY. 
    attr_accessor :publisher_id

    # Normalized rating out of 5. This value is omitted if the review does not include a rating. 
    attr_accessor :rating

    # Title of the review. This value is omitted if reviews on the publisher's site do not have titles. 
    attr_accessor :title

    # Content of the review. 
    attr_accessor :content

    # The name of the person who wrote the review (if we have it).
    attr_accessor :author_name

    # The email address of the person who wrote the review (if we have it).
    attr_accessor :author_email

    # The URL of the review, or the URL of the listing where the review can be found if there is no specific URL for the review.
    attr_accessor :url

    # The timestamp of the review as reported by the publisher. If edits impact the review date on the publisher, then this date may change. This date always comes from the publisher and we respect whatever they have.
    attr_accessor :publisher_date

    # If the **`v`** parameter is before `20170512`: the timestamp of the review (including listing updates).  If the **`v`** parameter is `20170512` or later: the timestamp of the review (excluding listing updates), or the timestamp of the latest comment on the review. 
    attr_accessor :last_yext_update_time

    # The current status of the review; only returned for First Party and External First Party reviews. Defaults to `QUARANTINED` when creating.
    attr_accessor :status

    # Indicates whether the review has been flagged for inappropriate or irrelevant content. Note that only First Party and External First Party reviews can be flagged.
    attr_accessor :flag_status

    # The language of the review, if identified.
    attr_accessor :review_language

    # An ordered array of Comments on the review.  **NOTE:** The order is a flattened tree with depth ties broken by publisher date. 
    attr_accessor :comments

    # If the **`v`** parameter is before `20180710`: The IDs of the review labels added to the review.  If the **`v`** parameter is `20180710` or later: Not present.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API. 
    attr_accessor :label_ids

    # If the **`v`** parameter is before `20180710`: Not present.  If the **`v`** parameter is `20180710` or later: The names and IDs of the review labels added to the review.  **NOTE:** You can only add labels that have already been created via our web interface. Currently, it is not possible to create new labels via the API. 
    attr_accessor :review_labels

    # If the **`v`** parameter is before `20181002`: Not present.  If the **`v`** parameter is `20181002` or later: Indicates whether the review is a rating or a recommendation.  **NOTE:** Only applicable to Facebook reviews. 
    attr_accessor :review_type

    # If the **`v`** parameter is before `20181002`: Not present.  If the **`v`** parameter is `20181002` or later: Indicates whether the consumer recommends the entity being reviewed.  **NOTE:** Only applicable to Facebook reviews. 
    attr_accessor :recommendation

    # If present, the transaction ID associated with the invitation that resulted in this review. 
    attr_accessor :transaction_id

    # If present, the ID associated with the invitation that resulted in this review. 
    attr_accessor :invitation_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'location_id' => :'locationId',
        :'account_id' => :'accountId',
        :'publisher_id' => :'publisherId',
        :'rating' => :'rating',
        :'title' => :'title',
        :'content' => :'content',
        :'author_name' => :'authorName',
        :'author_email' => :'authorEmail',
        :'url' => :'url',
        :'publisher_date' => :'publisherDate',
        :'last_yext_update_time' => :'lastYextUpdateTime',
        :'status' => :'status',
        :'flag_status' => :'flagStatus',
        :'review_language' => :'reviewLanguage',
        :'comments' => :'comments',
        :'label_ids' => :'labelIds',
        :'review_labels' => :'reviewLabels',
        :'review_type' => :'reviewType',
        :'recommendation' => :'recommendation',
        :'transaction_id' => :'transactionId',
        :'invitation_id' => :'invitationId'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'location_id' => :'String',
        :'account_id' => :'String',
        :'publisher_id' => :'String',
        :'rating' => :'Float',
        :'title' => :'String',
        :'content' => :'String',
        :'author_name' => :'String',
        :'author_email' => :'String',
        :'url' => :'String',
        :'publisher_date' => :'Integer',
        :'last_yext_update_time' => :'Integer',
        :'status' => :'String',
        :'flag_status' => :'String',
        :'review_language' => :'String',
        :'comments' => :'Array<ReviewComment>',
        :'label_ids' => :'Array<Integer>',
        :'review_labels' => :'Array<ReviewLabel>',
        :'review_type' => :'String',
        :'recommendation' => :'String',
        :'transaction_id' => :'String',
        :'invitation_id' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::Review` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::Review`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'account_id')
        self.account_id = attributes[:'account_id']
      end

      if attributes.key?(:'publisher_id')
        self.publisher_id = attributes[:'publisher_id']
      end

      if attributes.key?(:'rating')
        self.rating = attributes[:'rating']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'author_name')
        self.author_name = attributes[:'author_name']
      end

      if attributes.key?(:'author_email')
        self.author_email = attributes[:'author_email']
      end

      if attributes.key?(:'url')
        self.url = attributes[:'url']
      end

      if attributes.key?(:'publisher_date')
        self.publisher_date = attributes[:'publisher_date']
      end

      if attributes.key?(:'last_yext_update_time')
        self.last_yext_update_time = attributes[:'last_yext_update_time']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'flag_status')
        self.flag_status = attributes[:'flag_status']
      end

      if attributes.key?(:'review_language')
        self.review_language = attributes[:'review_language']
      end

      if attributes.key?(:'comments')
        if (value = attributes[:'comments']).is_a?(Array)
          self.comments = value
        end
      end

      if attributes.key?(:'label_ids')
        if (value = attributes[:'label_ids']).is_a?(Array)
          self.label_ids = value
        end
      end

      if attributes.key?(:'review_labels')
        if (value = attributes[:'review_labels']).is_a?(Array)
          self.review_labels = value
        end
      end

      if attributes.key?(:'review_type')
        self.review_type = attributes[:'review_type']
      end

      if attributes.key?(:'recommendation')
        self.recommendation = attributes[:'recommendation']
      end

      if attributes.key?(:'transaction_id')
        self.transaction_id = attributes[:'transaction_id']
      end

      if attributes.key?(:'invitation_id')
        self.invitation_id = attributes[:'invitation_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      status_validator = EnumAttributeValidator.new('String', ["LIVE", "QUARANTINED", "REMOVED"])
      return false unless status_validator.valid?(@status)
      flag_status_validator = EnumAttributeValidator.new('String', ["FLAGGED", "NOT_FLAGGED"])
      return false unless flag_status_validator.valid?(@flag_status)
      review_type_validator = EnumAttributeValidator.new('String', ["Rating", "Recommendation"])
      return false unless review_type_validator.valid?(@review_type)
      recommendation_validator = EnumAttributeValidator.new('String', ["Recommended", "Not Recommended"])
      return false unless recommendation_validator.valid?(@recommendation)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["LIVE", "QUARANTINED", "REMOVED"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] flag_status Object to be assigned
    def flag_status=(flag_status)
      validator = EnumAttributeValidator.new('String', ["FLAGGED", "NOT_FLAGGED"])
      unless validator.valid?(flag_status)
        fail ArgumentError, "invalid value for \"flag_status\", must be one of #{validator.allowable_values}."
      end
      @flag_status = flag_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] review_type Object to be assigned
    def review_type=(review_type)
      validator = EnumAttributeValidator.new('String', ["Rating", "Recommendation"])
      unless validator.valid?(review_type)
        fail ArgumentError, "invalid value for \"review_type\", must be one of #{validator.allowable_values}."
      end
      @review_type = review_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recommendation Object to be assigned
    def recommendation=(recommendation)
      validator = EnumAttributeValidator.new('String', ["Recommended", "Not Recommended"])
      unless validator.valid?(recommendation)
        fail ArgumentError, "invalid value for \"recommendation\", must be one of #{validator.allowable_values}."
      end
      @recommendation = recommendation
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          location_id == o.location_id &&
          account_id == o.account_id &&
          publisher_id == o.publisher_id &&
          rating == o.rating &&
          title == o.title &&
          content == o.content &&
          author_name == o.author_name &&
          author_email == o.author_email &&
          url == o.url &&
          publisher_date == o.publisher_date &&
          last_yext_update_time == o.last_yext_update_time &&
          status == o.status &&
          flag_status == o.flag_status &&
          review_language == o.review_language &&
          comments == o.comments &&
          label_ids == o.label_ids &&
          review_labels == o.review_labels &&
          review_type == o.review_type &&
          recommendation == o.recommendation &&
          transaction_id == o.transaction_id &&
          invitation_id == o.invitation_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, location_id, account_id, publisher_id, rating, title, content, author_name, author_email, url, publisher_date, last_yext_update_time, status, flag_status, review_language, comments, label_ids, review_labels, review_type, recommendation, transaction_id, invitation_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
