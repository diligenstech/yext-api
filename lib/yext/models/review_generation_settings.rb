=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'date'
require 'time'

module Yext
  class ReviewGenerationSettings
    # Enables review invitations by email and indicates the maximum number of email invites our system will send on a per-location, per-day basis.  Must contain an integer value between 0 and 200. If 0 or null, review invitations by email will be disabled. 
    attr_accessor :max_emails_per_day

    # Indicates the maximum number of text invites our system will send on a per-location, per-month basis. 
    attr_accessor :max_texts_per_month

    # Enables review invitations by text and indicates the maximum number of text invites our system will send on a per-location, per-day basis. We will send a maximum of 20 text invites per location per day.  If null, review invitations by text will be disabled. 
    attr_accessor :max_texts_per_day

    # Indicates the minimum number of days that must pass before a given contact can be sent another review invitation. This setting will prevent you from contacting the same person repeatedly in a short time period.  If null, no maximum contact frequency will be enforced. 
    attr_accessor :max_contact_frequency

    # Prevents first-party reviews from immediately showing up on your website or wherever else you show your reviews. During this quarantine period, you may respond to reviews, increasing the likelihood that your customers will revise or remove their negative reviews. 
    attr_accessor :review_quarantine_days

    # Review-collection pages contain a link to the Yext privacy policy by default. This field lets you replace that link with a link to your own privacy policy.  Update request must contain a URL or null. If null, the Yext privacy policy link will be used.  If the **`v`** parameter is before `20200910`, please refer to **`privacyPolicyOverride`** as the parameter name instead of **`privacyPolicy`**. 
    attr_accessor :privacy_policy

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'max_emails_per_day' => :'maxEmailsPerDay',
        :'max_texts_per_month' => :'maxTextsPerMonth',
        :'max_texts_per_day' => :'maxTextsPerDay',
        :'max_contact_frequency' => :'maxContactFrequency',
        :'review_quarantine_days' => :'reviewQuarantineDays',
        :'privacy_policy' => :'privacyPolicy'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'max_emails_per_day' => :'Integer',
        :'max_texts_per_month' => :'Integer',
        :'max_texts_per_day' => :'Integer',
        :'max_contact_frequency' => :'Integer',
        :'review_quarantine_days' => :'Integer',
        :'privacy_policy' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::ReviewGenerationSettings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::ReviewGenerationSettings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'max_emails_per_day')
        self.max_emails_per_day = attributes[:'max_emails_per_day']
      end

      if attributes.key?(:'max_texts_per_month')
        self.max_texts_per_month = attributes[:'max_texts_per_month']
      end

      if attributes.key?(:'max_texts_per_day')
        self.max_texts_per_day = attributes[:'max_texts_per_day']
      end

      if attributes.key?(:'max_contact_frequency')
        self.max_contact_frequency = attributes[:'max_contact_frequency']
      end

      if attributes.key?(:'review_quarantine_days')
        self.review_quarantine_days = attributes[:'review_quarantine_days']
      end

      if attributes.key?(:'privacy_policy')
        self.privacy_policy = attributes[:'privacy_policy']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@max_emails_per_day.nil? && @max_emails_per_day > 200
        invalid_properties.push('invalid value for "max_emails_per_day", must be smaller than or equal to 200.')
      end

      if !@max_emails_per_day.nil? && @max_emails_per_day < 0
        invalid_properties.push('invalid value for "max_emails_per_day", must be greater than or equal to 0.')
      end

      if !@max_texts_per_month.nil? && @max_texts_per_month < 1
        invalid_properties.push('invalid value for "max_texts_per_month", must be greater than or equal to 1.')
      end

      if !@max_texts_per_day.nil? && @max_texts_per_day > 20
        invalid_properties.push('invalid value for "max_texts_per_day", must be smaller than or equal to 20.')
      end

      if !@max_texts_per_day.nil? && @max_texts_per_day < 1
        invalid_properties.push('invalid value for "max_texts_per_day", must be greater than or equal to 1.')
      end

      if !@review_quarantine_days.nil? && @review_quarantine_days > 7
        invalid_properties.push('invalid value for "review_quarantine_days", must be smaller than or equal to 7.')
      end

      if !@review_quarantine_days.nil? && @review_quarantine_days < 0
        invalid_properties.push('invalid value for "review_quarantine_days", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@max_emails_per_day.nil? && @max_emails_per_day > 200
      return false if !@max_emails_per_day.nil? && @max_emails_per_day < 0
      return false if !@max_texts_per_month.nil? && @max_texts_per_month < 1
      return false if !@max_texts_per_day.nil? && @max_texts_per_day > 20
      return false if !@max_texts_per_day.nil? && @max_texts_per_day < 1
      max_contact_frequency_validator = EnumAttributeValidator.new('Integer', [7, 30, 60, 90])
      return false unless max_contact_frequency_validator.valid?(@max_contact_frequency)
      return false if !@review_quarantine_days.nil? && @review_quarantine_days > 7
      return false if !@review_quarantine_days.nil? && @review_quarantine_days < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] max_emails_per_day Value to be assigned
    def max_emails_per_day=(max_emails_per_day)
      if !max_emails_per_day.nil? && max_emails_per_day > 200
        fail ArgumentError, 'invalid value for "max_emails_per_day", must be smaller than or equal to 200.'
      end

      if !max_emails_per_day.nil? && max_emails_per_day < 0
        fail ArgumentError, 'invalid value for "max_emails_per_day", must be greater than or equal to 0.'
      end

      @max_emails_per_day = max_emails_per_day
    end

    # Custom attribute writer method with validation
    # @param [Object] max_texts_per_month Value to be assigned
    def max_texts_per_month=(max_texts_per_month)
      if !max_texts_per_month.nil? && max_texts_per_month < 1
        fail ArgumentError, 'invalid value for "max_texts_per_month", must be greater than or equal to 1.'
      end

      @max_texts_per_month = max_texts_per_month
    end

    # Custom attribute writer method with validation
    # @param [Object] max_texts_per_day Value to be assigned
    def max_texts_per_day=(max_texts_per_day)
      if !max_texts_per_day.nil? && max_texts_per_day > 20
        fail ArgumentError, 'invalid value for "max_texts_per_day", must be smaller than or equal to 20.'
      end

      if !max_texts_per_day.nil? && max_texts_per_day < 1
        fail ArgumentError, 'invalid value for "max_texts_per_day", must be greater than or equal to 1.'
      end

      @max_texts_per_day = max_texts_per_day
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] max_contact_frequency Object to be assigned
    def max_contact_frequency=(max_contact_frequency)
      validator = EnumAttributeValidator.new('Integer', [7, 30, 60, 90])
      unless validator.valid?(max_contact_frequency)
        fail ArgumentError, "invalid value for \"max_contact_frequency\", must be one of #{validator.allowable_values}."
      end
      @max_contact_frequency = max_contact_frequency
    end

    # Custom attribute writer method with validation
    # @param [Object] review_quarantine_days Value to be assigned
    def review_quarantine_days=(review_quarantine_days)
      if !review_quarantine_days.nil? && review_quarantine_days > 7
        fail ArgumentError, 'invalid value for "review_quarantine_days", must be smaller than or equal to 7.'
      end

      if !review_quarantine_days.nil? && review_quarantine_days < 0
        fail ArgumentError, 'invalid value for "review_quarantine_days", must be greater than or equal to 0.'
      end

      @review_quarantine_days = review_quarantine_days
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          max_emails_per_day == o.max_emails_per_day &&
          max_texts_per_month == o.max_texts_per_month &&
          max_texts_per_day == o.max_texts_per_day &&
          max_contact_frequency == o.max_contact_frequency &&
          review_quarantine_days == o.review_quarantine_days &&
          privacy_policy == o.privacy_policy
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [max_emails_per_day, max_texts_per_month, max_texts_per_day, max_contact_frequency, review_quarantine_days, privacy_policy].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
