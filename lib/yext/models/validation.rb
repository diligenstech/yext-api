=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'date'
require 'time'

module Yext
  # A Custom Field validation object, describing validation rules when a Custom Field value is set or updated. 
  class Validation
    # Minimum character length.
    attr_accessor :min_char_length

    # Maximum character length.
    attr_accessor :max_char_length

    # Minimum item count.
    attr_accessor :min_item_count

    # Maximum item count.
    attr_accessor :max_item_count

    # Minimum value.
    attr_accessor :min_value

    # Maximum value.
    attr_accessor :max_value

    # Minimum date, accepted as 'YYYY-MM-DD'.
    attr_accessor :min_date

    # Maximum date, accepted as 'YYYY-MM-DD'.
    attr_accessor :max_date

    # Aspect ratio of a photo.
    attr_accessor :aspect_ratio

    # Minimum photo width, in pixels.
    attr_accessor :min_width

    # Minimum photo height, in pixels.
    attr_accessor :min_height

    # if **`type`** is `ENTITY_LIST`, the types of entities that the field can contain.
    attr_accessor :entity_types

    # if **`type`** is `RICH_TEXT`, the types of text formats that the field can contain.
    attr_accessor :rich_text_formats

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'min_char_length' => :'minCharLength',
        :'max_char_length' => :'maxCharLength',
        :'min_item_count' => :'minItemCount',
        :'max_item_count' => :'maxItemCount',
        :'min_value' => :'minValue',
        :'max_value' => :'maxValue',
        :'min_date' => :'minDate',
        :'max_date' => :'maxDate',
        :'aspect_ratio' => :'aspectRatio',
        :'min_width' => :'minWidth',
        :'min_height' => :'minHeight',
        :'entity_types' => :'entityTypes',
        :'rich_text_formats' => :'richTextFormats'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'min_char_length' => :'Integer',
        :'max_char_length' => :'Integer',
        :'min_item_count' => :'Integer',
        :'max_item_count' => :'Integer',
        :'min_value' => :'Float',
        :'max_value' => :'Float',
        :'min_date' => :'String',
        :'max_date' => :'String',
        :'aspect_ratio' => :'String',
        :'min_width' => :'Integer',
        :'min_height' => :'Integer',
        :'entity_types' => :'Array<EntityTypes>',
        :'rich_text_formats' => :'Array<String>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Yext::Validation` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Yext::Validation`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'min_char_length')
        self.min_char_length = attributes[:'min_char_length']
      end

      if attributes.key?(:'max_char_length')
        self.max_char_length = attributes[:'max_char_length']
      end

      if attributes.key?(:'min_item_count')
        self.min_item_count = attributes[:'min_item_count']
      end

      if attributes.key?(:'max_item_count')
        self.max_item_count = attributes[:'max_item_count']
      end

      if attributes.key?(:'min_value')
        self.min_value = attributes[:'min_value']
      end

      if attributes.key?(:'max_value')
        self.max_value = attributes[:'max_value']
      end

      if attributes.key?(:'min_date')
        self.min_date = attributes[:'min_date']
      end

      if attributes.key?(:'max_date')
        self.max_date = attributes[:'max_date']
      end

      if attributes.key?(:'aspect_ratio')
        self.aspect_ratio = attributes[:'aspect_ratio']
      end

      if attributes.key?(:'min_width')
        self.min_width = attributes[:'min_width']
      end

      if attributes.key?(:'min_height')
        self.min_height = attributes[:'min_height']
      end

      if attributes.key?(:'entity_types')
        if (value = attributes[:'entity_types']).is_a?(Array)
          self.entity_types = value
        end
      end

      if attributes.key?(:'rich_text_formats')
        if (value = attributes[:'rich_text_formats']).is_a?(Array)
          self.rich_text_formats = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      aspect_ratio_validator = EnumAttributeValidator.new('String', ["UNCONSTRAINED", "1:1", "4:3", "3:2", "5:3", "16:9", "3:1", "2:3", "5:7", "4:5", "4:1"])
      return false unless aspect_ratio_validator.valid?(@aspect_ratio)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] aspect_ratio Object to be assigned
    def aspect_ratio=(aspect_ratio)
      validator = EnumAttributeValidator.new('String', ["UNCONSTRAINED", "1:1", "4:3", "3:2", "5:3", "16:9", "3:1", "2:3", "5:7", "4:5", "4:1"])
      unless validator.valid?(aspect_ratio)
        fail ArgumentError, "invalid value for \"aspect_ratio\", must be one of #{validator.allowable_values}."
      end
      @aspect_ratio = aspect_ratio
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          min_char_length == o.min_char_length &&
          max_char_length == o.max_char_length &&
          min_item_count == o.min_item_count &&
          max_item_count == o.max_item_count &&
          min_value == o.min_value &&
          max_value == o.max_value &&
          min_date == o.min_date &&
          max_date == o.max_date &&
          aspect_ratio == o.aspect_ratio &&
          min_width == o.min_width &&
          min_height == o.min_height &&
          entity_types == o.entity_types &&
          rich_text_formats == o.rich_text_formats
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [min_char_length, max_char_length, min_item_count, max_item_count, min_value, max_value, min_date, max_date, aspect_ratio, min_width, min_height, entity_types, rich_text_formats].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Yext.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
