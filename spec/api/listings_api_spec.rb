=begin
#Yext API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'spec_helper'
require 'json'

# Unit tests for Yext::ListingsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'ListingsApi' do
  before do
    # run before each test
    @api_instance = Yext::ListingsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of ListingsApi' do
    it 'should create an instance of ListingsApi' do
      expect(@api_instance).to be_instance_of(Yext::ListingsApi)
    end
  end

  # unit tests for complete_verification
  # Verification: Complete
  # Provides verification codes to complete the verification for entities in an account. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param verification_completion 
  # @param [Hash] opts the optional parameters
  # @return [CompleteVerificationResponse]
  describe 'complete_verification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_answer
  # Answer: Create
  # Creates a new Answer on a Question.
  # @param account_id 
  # @param question_id ID of this Question.
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [AnswerRequest] :answer_request 
  # @return [CreateAnswerResponse]
  describe 'create_answer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_duplicate
  # Duplicates: Create
  # Creates a new Duplicate with **&#x60;status&#x60;** &#x60;SUPPRESSION_REQUESTED&#x60;.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param url URL of the Duplicate listing
  # @param [Hash] opts the optional parameters
  # @option opts [String] :location_id An account location ID with a Listings subscription.
  # @return [IdResponse]
  describe 'create_duplicate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_answer
  # Answer: Delete
  # Deletes an Answer for a Question
  # @param account_id 
  # @param question_id ID of this Question.
  # @param answer_id ID of this Answer.
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @return [EmptyResponse]
  describe 'delete_answer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_duplicate
  # Duplicates: Delete
  # Indicates that a Duplicate should be ignored.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param duplicate_id 
  # @param [Hash] opts the optional parameters
  # @return [EmptyResponse]
  describe 'delete_duplicate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_listings
  # Entity Listings: Delete
  # Deletes event listings from publishers. If deletion is not supported by the publisher, then service is removed instead.  **NOTE:** You can delete a maximum of 100 listings in a single request. If the number of Entity IDs multiplied by the number of Publisher IDs in your request exceeds 100, you will receive a 400 error response.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
  # @return [EmptyResponse]
  describe 'delete_listings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_publisher_suggestion
  # Publisher Suggestions: Get
  # Fetches details of a specific Publisher Suggestion
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param suggestion_id 
  # @param [Hash] opts the optional parameters
  # @return [PublisherSuggestionResponse]
  describe 'get_publisher_suggestion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_question
  # Question: Get
  # Retrieve information for a Question
  # @param account_id 
  # @param question_id ID of this Question.
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @return [QuestionResponse]
  describe 'get_question test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for initiate_verification
  # Verification: Initiate
  # Initiate verification for entities in an account. This request will trigger verification codes being sent to the specified addresses, phone numbers, or email addresses. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param locale Locale code.
  # @param verification_initiation 
  # @param [Hash] opts the optional parameters
  # @return [InitiateVerificationResponse]
  describe 'initiate_verification test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invite_admins
  # Listing Admin: Invite
  # Sends invitations to new listing admins for entities in an account. For Google Business Profile listings, the admins will be given owner-level access. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param admin_invite 
  # @param [Hash] opts the optional parameters
  # @return [InviteAdminsResponse]
  describe 'invite_admins test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_admins
  # Listing Admins: List
  # Retrieve listing admins for entities in an account. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @option opts [Integer] :limit Number of results to return.
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @return [ListAdminsResponse]
  describe 'list_admins test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_duplicates
  # Duplicates: List
  # Retrieve Duplicates for an account  If the **&#x60;v&#x60;** parameter is &#x60;20180802&#x60; or later: only duplicates of live listings (**&#x60;status&#x60;**: &#x60;LIVE&#x60;) will be included 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
  # @option opts [Array<String>] :statuses When specified, only Duplicates with the provided statuses will be returned  **Example:** POSSIBLE_DUPLICATE,SUPPRESSION_REQUESTED 
  # @return [DuplicatesResponse]
  describe 'list_duplicates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_entity_listings
  # Entity Listings: List
  # Retrieve all Entity Listings matching the given criteria. Includes the status of each Listing and reasons why a Listing may not be live. This endpoint currently only supports Event Listings.  The results will first be sorted by publisher and then by Entity.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :entity_ids Defaults to all account events with a subscription.  **Example:** entity123,entity456,entity789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** FACEBOOKEVENTS,EVENTBRITE 
  # @option opts [Array<String>] :statuses Defaults to all Listings whose **&#x60;status&#x60;** is not &#x60;DELETED&#x60; or &#x60;SYNC_STOPPED&#x60;.  When specified, only Listings with the provided statuses will be returned. 
  # @option opts [String] :language One of the following language codes: - &#x60;cs&#x60; - Czech - &#x60;da&#x60; - Danish - &#x60;nl&#x60; - Dutch - &#x60;en&#x60; - English - &#x60;en_GB&#x60; - English (UK) - &#x60;fi&#x60; - Finnish - &#x60;fr&#x60; - French (France) - &#x60;de&#x60; - German (Germany) - &#x60;hu&#x60; - Hungarian - &#x60;it&#x60; - Italian - &#x60;ja&#x60; - Japanese - &#x60;no&#x60; - Norwegian - &#x60;pt&#x60; - Portuguese (Portugal) - &#x60;sk&#x60; - Slovak - &#x60;es&#x60; - Spanish (Spain) - &#x60;sv&#x60; - Swedish - &#x60;tr&#x60; - Turkish - &#x60;zh_Hans&#x60; - Chinese (Simplified) - &#x60;zh_Hant&#x60; - Chinese (Traditional) 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @option opts [Integer] :limit Number of results to return
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @return [EntityListingsResponse]
  describe 'list_entity_listings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_listings
  # Listings: List
  # Retrieve all Listings matching the given criteria including status and reasons why a Listing may be unavailable  The results will first be sorted by publisher and then by Location.  **Support for &#x60;all&#x60; macro:** If you would like to use this endpoint to take action on your account and all of its sub-accounts, you can use the &#x60;all&#x60; macro in place of your account ID in your request URLs. For more information, see the \&quot;Account ID\&quot; section of \&quot;Policies and Conventions\&quot; at the top of this page. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;pageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
  # @option opts [Array<String>] :statuses When specified, only Listings with the provided statuses will be returned  **Example:** &#x60;WAITING_ON_YEXT,WAITING_ON_CUSTOMER&#x60; 
  # @option opts [String] :language One of the language codes that we support: - cs - Czech - da - Danish - nl - Dutch - en - English - en_GB - English (UK) - fi - Finnish - fr - French (France) - de - German (Germany) - hu - Hungarian - it - Italian - ja - Japanese - no - Norwegian - pt - Portuguese (Portugal) - sk - Slovak - es - Spanish (Spain) - sv - Swedish - tr - Turkish - zh_Hans - Chinese (Simplified) - zh_Hant - Chinese (Traditional) 
  # @return [ListingsResponse]
  describe 'list_listings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_methods
  # Verification Methods: List
  # Retrieve verification methods for entities in an account 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param locale Locale code.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @option opts [Integer] :limit Number of results to return.
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @return [ListMethodsResponse]
  describe 'list_methods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_publisher_suggestions
  # Publisher Suggestions: List
  # Retrieve suggestions publishers have submitted for the Locations in an account
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :limit Number of results to return
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
  # @option opts [Array<String>] :statuses When specified, only Publisher Suggestions with the provided statuses will be returned  **Example:** WAITING_ON_CUSTOMER,EXPIRED 
  # @return [PublisherSuggestionsResponse]
  describe 'list_publisher_suggestions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_publishers
  # Publishers: List
  # Retrieve a list of publishers included in an account&#39;s subscription 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :subset One of the following: - ALL - return all publishers - RELEVANT_ONLY - only return publishers based on available subscriptions and supported countries 
  # @option opts [Array<String>] :entity_type When specified, only publishers that support the specified entity types will be returned  **Example:** &#x60;LOCATION,EVENT&#x60; 
  # @return [PublishersResponse]
  describe 'list_publishers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_questions
  # Questions: List 
  # Retrieve a list of Questions within an account.
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :filter This parameter represents one or more filtering conditions that are applied to the set of entities that would otherwise be returned. This parameter should be provided as a URL-encoded string containing a JSON object.  For example, if the filter JSON is &#x60;{\&quot;entityId\&quot;:{\&quot;$eq\&quot;:\&quot;location123\&quot;}}&#x60;, then the filter param after URL-encoding will be: &#x60;filter&#x3D;%7B%22entityId%22%3A%7B%22%24eq%22%3A%22location123%22%7D%7D&#x60;  **Supported filters** * **&#x60;id&#x60;** * **&#x60;entityId&#x60;** * **&#x60;publisherId&#x60;** * **&#x60;authorType&#x60;** * **&#x60;language&#x60;** * **&#x60;createTime&#x60;** * **&#x60;updateTime&#x60;** * **&#x60;answerCount&#x60;** * **&#x60;ownerAnswer&#x60;**  **Basic Filter Structure**  The filter object at its core consists of a *matcher*, a *field*, and an *argument*.  For example, in the following filter JSON:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  &#x60;$eq&#x60; is the *matcher*, or filtering operation (equals, in this example),  &#x60;entityId&#x60; is the *field* being filtered by, and  &#x60;location123&#x60; is *value* to be matched against.  **Combining Multiple Filters**  Multiple filters can be combined into one object using *combinators*. For example, the following filter JSON combines multiple filters using the combinator &#x60;$and&#x60;. &#x60;$or&#x60; is also supported. &#x60;&#x60;&#x60; {   \&quot;$and\&quot;:[     {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;$in\&quot;:[           \&quot;LOCAL_GUIDE\&quot;,           \&quot;MERCHANT\&quot;         ]       }     }   ] } &#x60;&#x60;&#x60;  **Filter Negation**  Certain filter types may be negated. For example:  &#x60;&#x60;&#x60; {   \&quot;$not\&quot; {     \&quot;entityId\&quot;:{       \&quot;$eq\&quot;:\&quot;location123\&quot;     }   } } &#x60;&#x60;&#x60;  This can also be written more simply with a &#x60;!&#x60; in the &#x60;$eq&#x60; parameter. The following filter would have the same effect:  &#x60;&#x60;&#x60; {   \&quot;entityId\&quot;:{     \&quot;!$eq\&quot;:\&quot;location123\&quot;   } } &#x60;&#x60;&#x60;  **TEXT**  The &#x60;TEXT&#x60; filter type is supported for text fields. (e.g., **&#x60;entityId&#x60;**, **&#x60;authorType&#x60;**)  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq (equals)&lt;/th&gt;     &lt;th&gt;      {       \&quot;entityId\&quot;:{         \&quot;$eq\&quot;:\&quot;location123\&quot;       }     },     {       \&quot;authorType\&quot;:{         \&quot;!$eq\&quot;:\&quot;REGULAR_USER\&quot;       }     }    Supports negation. Case insensitive.   &lt;/tr&gt; &lt;/table&gt;  **BOOLEAN**  The BOOLEAN filter type is supported for boolean fields and Yes / No fields. &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;      {       \&quot;ownerAnswer\&quot;: {         \&quot;$eq\&quot;: true       }     }    For booleans, the filter takes a boolean value, not a string.   Supports negation.   &lt;/tr&gt; &lt;/table&gt;  **INTEGER, FLOAT, DATE, DATETIME, and TIME**  These filter types are strictly ordered -- therefore, they support the following matchers: - Equals - Less Than / Less Than or Equal To - Greater Than / Greater Than or Equal To  &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;   &lt;tr&gt;     &lt;th&gt;Matcher&lt;/th&gt;     &lt;th&gt;Details&lt;/th&gt;   &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$eq&lt;/th&gt;     &lt;th&gt;    Equals      {       \&quot;answerCount\&quot;: {         \&quot;$eq\&quot;: 3       }     }    Supports negation.    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$lt&lt;/th&gt;     &lt;th&gt;    Less than      {       \&quot;updateTime\&quot;: {         \&quot;$lt\&quot;: 1579711121392       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$gt&lt;/th&gt;     &lt;th&gt;    Greater than      {       \&quot;answerCount\&quot;: {         \&quot;$gt\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$le&lt;/th&gt;     &lt;th&gt;    Less than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$le\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;$ge&lt;/th&gt;     &lt;th&gt;    Greater than or equal to      {       \&quot;answerCount\&quot;: {         \&quot;$ge\&quot;: 3       }     }    &lt;/tr&gt;   &lt;tr&gt;     &lt;th&gt;Combinations&lt;/th&gt;     &lt;th&gt;    While we do not support \&quot;between\&quot; in our filtering syntax, it is possible to combine multiple matchers for a result similar to an \&quot;and\&quot; operation:      {       \&quot;answerCount : {         \&quot;$gt\&quot; : 1,         \&quot;$lt\&quot;: 3       }     }    &lt;/tr&gt; &lt;/table&gt; 
  # @option opts [Integer] :limit Number of results to return.
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @return [ListQuestionsReponse]
  describe 'list_questions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_statuses
  # Verification Statuses: List
  # Retrieve verification statuses for entities in an account 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param publisher_id 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :entity_ids  A comma-separated list of Entity IDs. If no IDs are specified, defaults to all entities with a listings subscription. 
  # @option opts [String] :page_token If a response to a previous request contained the **&#x60;nextPageToken&#x60;** field, pass that field&#39;s value as the **&#x60;pageToken&#x60;** parameter to retrieve the next page of data. 
  # @option opts [Integer] :limit Number of results to return.
  # @option opts [Integer] :offset  Number of results to skip. Used to page through results. Cannot be used together with **&#x60;pageToken&#x60;**. 
  # @return [ListStatusesResponse]
  describe 'list_statuses test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for opt_in_listings
  # Listings: Opt In
  # Opts designated locations into designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
  # @return [EmptyResponse]
  describe 'opt_in_listings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for opt_out_listings
  # Listings: Opt Out
  # Opts designated locations out of designated publishers  **NOTE:** The number of Location IDs multiplied by the number of Publisher IDs is capped at 100. If you exceed this, you will receive a 400 error response. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :location_ids Defaults to all account locations with a Listings subscription.  **Example:** loc123,loc456,loc789 
  # @option opts [Array<String>] :publisher_ids List of publisher IDs. If no IDs are specified, defaults to all publishers subscribed by the account.  **Example:** MAPQUEST,FACEBOOK 
  # @return [EmptyResponse]
  describe 'opt_out_listings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for suppress_duplicate
  # Duplicates: Suppress
  # Request suppression of a Duplicate.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param duplicate_id 
  # @param [Hash] opts the optional parameters
  # @return [EmptyResponse]
  describe 'suppress_duplicate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_answer
  # Answer: Update
  # Updates an Answer for a Question
  # @param account_id 
  # @param question_id ID of this Question.
  # @param answer_id ID of this Answer.
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param [Hash] opts the optional parameters
  # @option opts [AnswerRequest] :answer_request 
  # @return [UpdateAnswerResponse]
  describe 'update_answer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_publisher_suggestion
  # Publisher Suggestions: Update
  # Accept or reject a Publisher Suggestion.  **NOTE:** When sending requests to this endpoint, you must provide your Yext user ID in the **&#x60;Yext-User-Id&#x60;** header. 
  # @param account_id 
  # @param v A date in &#x60;YYYYMMDD&#x60; format.
  # @param suggestion_id 
  # @param status The status of the Publisher Suggestion
  # @param [Hash] opts the optional parameters
  # @return [EmptyResponse]
  describe 'update_publisher_suggestion test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
