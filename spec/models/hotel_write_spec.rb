=begin
#Yext Admin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for Yext::HotelWrite
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe Yext::HotelWrite do
  let(:instance) { Yext::HotelWrite.new }

  describe 'test an instance of HotelWrite' do
    it 'should create an instance of HotelWrite' do
      expect(instance).to be_instance_of(Yext::HotelWrite)
    end
  end
  describe 'test attribute "meta"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "address"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "access_hours"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "additional_hours_text"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "address_hidden"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "adult_pool"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.adult_pool = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "airport_shuttle"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["AIRPORT_SHUTTLE_AVAILABLE", "AIRPORT_SHUTTLE_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.airport_shuttle = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "airport_transfer"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.airport_transfer = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "all_inclusive"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["ALL_INCLUSIVE_RATES_AVAILABLE", "ALL_INCLUSIVE_RATES_ONLY", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.all_inclusive = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "alternate_names"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "alternate_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "alternate_websites"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "android_app_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "associations"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "babysitting_offered"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.babysitting_offered = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "baggage_storage"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.baggage_storage = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "bar"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.bar = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "beach_access"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.beach_access = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "beach_front_property"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.beach_front_property = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "bicycles"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["BICYCLE_RENTALS", "BICYCLE_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.bicycles = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "bios"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "boutique_stores"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.boutique_stores = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "brands"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "breakfast"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["BREAKFAST_AVAILABLE", "BREAKFAST_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.breakfast = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "brunch_hours"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "business_center"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.business_center = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "calendars"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "car_rental"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.car_rental = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "casino"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.casino = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "category_ids"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "cats_allowed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.cats_allowed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "check_in_time"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "check_out_time"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "classification_rating"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "closed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "concierge"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.concierge = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "convenience_store"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.convenience_store = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "currency_exchange"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.currency_exchange = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "custom_keywords"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "description"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "display_coordinate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "doctor_on_call"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.doctor_on_call = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dogs_allowed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.dogs_allowed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "dropoff_coordinate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "electric_charging_station"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.electric_charging_station = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "elevator"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.elevator = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "elliptical_machine"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.elliptical_machine = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "emails"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_call_to_action"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_cover_photo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_descriptor"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_name"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_override_city"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_page_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_profile_photo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "facebook_vanity_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "fax"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "featured_message"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "first_party_review_page"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "fitness_center"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["FITNESS_CENTER_AVAILABLE", "FITNESS_CENTER_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.fitness_center = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "floor_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "free_weights"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.free_weights = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "frequently_asked_questions"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "front_desk"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["FRONT_DESK_AVAILABLE", "FRONT_DESK_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.front_desk = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "fully_vaccinated_staff"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "game_room"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.game_room = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "geomodifier"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "gift_shop"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.gift_shop = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "golf"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.golf = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "google_attributes"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "google_cover_photo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "google_my_business_labels"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "google_place_id"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "google_profile_photo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "google_website_override"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "happy_hours"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "holiday_hours_conversation_enabled"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "horseback_riding"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.horseback_riding = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "hot_tub"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.hot_tub = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "hours"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "housekeeping"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["HOUSEKEEPING_AVAILABLE", "HOUSEKEEPING_AVAILABLE_DAILY", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.housekeeping = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "impressum"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "indoor_pool_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "instagram_handle"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "ios_app_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "iso_region_code"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "keywords"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "kid_friendly"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.kid_friendly = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "kids_club"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.kids_club = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "kids_stay_free"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.kids_stay_free = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "kitchen_hours"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "labels"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "landing_page_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "languages"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "laundry"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["FULL_SERVICE", "SELF_SERVICE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.laundry = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lazy_river"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lazy_river = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "lifeguard"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.lifeguard = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "local_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "local_shuttle"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.local_shuttle = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "location_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["LOCATION", "HEALTHCARE_FACILITY", "HEALTHCARE_PROFESSIONAL", "ATM", "RESTAURANT", "HOTEL"])
      # validator.allowable_values.each do |value|
      #   expect { instance.location_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "logo"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "main_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "massage"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.massage = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "max_age_of_kids_stay_free"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "max_number_of_kids_stay_free"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "meeting_room_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "menu_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "menus"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "mobile_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "mobility_accessible"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.mobility_accessible = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "nightclub"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.nightclub = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "nudge_enabled"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "order_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "outdoor_pool_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "parking"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["PARKING_AVAILABLE", "PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.parking = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "payment_options"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["ALIPAY", "AMERICANEXPRESS", "ANDROIDPAY", "APPLEPAY", "ATM", "ATMQUICK", "BACS", "BANCONTACT", "BANKDEPOSIT", "BANKPAY", "BGO", "BITCOIN", "Bar", "CARTASI", "CASH", "CCS", "CHECK", "CONB", "CVVV", "DEBITNOTE", "DINERSCLUB", "DIRECTDEBIT", "DISCOVER", "ECKARTE", "ECOCHEQUE", "EKENA", "EMV", "FINANCING", "GOPAY", "HAYAKAKEN", "HEBAG", "IBOD", "ICCARDS", "ICOCA", "ID", "IDEAL", "INCA", "INVOICE", "JCB", "JCoinPay", "JKOPAY", "KITACA", "KLA", "KLARNA", "LINEPAY", "MAESTRO", "MANACA", "MASTERCARD", "MIPAY", "MONIZZE", "MPAY", "Manuelle Lastsch", "Merpay", "NANACO", "NEXI", "NIMOCA", "OREM", "PASMO", "PAYBACKPAY", "PAYBOX", "PAYCONIQ", "PAYPAL", "PAYPAY", "PAYSEC", "PIN", "POSTEPAY", "QRCODE", "QUICPAY", "RAKUTENEDY", "RAKUTENPAY", "SAMSUNGPAY", "SODEXO", "SUGOCA", "SUICA", "SWISH", "TICKETRESTAURANT", "TOICA", "TRAVELERSCHECK", "TSCUBIC", "TWINT", "UNIONPAY", "VEV", "VISA", "VISAELECTRON", "VOB", "VOUCHER", "VPAY", "WAON", "WECHATPAY", "WIRETRANSFER", "Yucho Pay", "ZELLE", "auPay", "dBarai", "Überweisung"])
      # validator.allowable_values.each do |value|
      #   expect { instance.payment_options = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "pets_allowed"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["PETS_WELCOME", "PETS_WELCOME_FOR_FREE", "NOT_APPLICABLE", "NOT_ALLOWED"])
      # validator.allowable_values.each do |value|
      #   expect { instance.pets_allowed = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "photo_gallery"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "pickup_coordinate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "primary_conversation_contact"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "private_beach"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.private_beach = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "private_car_service"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["PRIVATE_CAR_SERVICE", "PRIVATE_CAR_SERVICE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.private_car_service = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "product_lists"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "questions_and_answers"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "rank_tracking_competitors"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "rank_tracking_enabled"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "rank_tracking_frequency"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["WEEKLY", "MONTHLY", "QUARTERLY"])
      # validator.allowable_values.each do |value|
      #   expect { instance.rank_tracking_frequency = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "rank_tracking_query_templates"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["KEYWORD", "KEYWORD_ZIP", "KEYWORD_CITY", "KEYWORD_IN_CITY", "KEYWORD_NEAR_ME", "KEYWORD_CITY_STATE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.rank_tracking_query_templates = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "rank_tracking_sites"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('Array<String>', ["GOOGLE_DESKTOP", "GOOGLE_MOBILE", "BING_DESKTOP", "BING_MOBILE", "YAHOO_DESKTOP", "YAHOO_MOBILE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.rank_tracking_sites = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "reservation_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "restaurant_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "review_generation_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "review_response_conversation_enabled"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "room_count"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "room_service"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["ROOM_SERVICE_AVAILABLE", "ROOM_SERVICE_AVAILABLE_24_HOURS", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.room_service = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "routable_coordinate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "salon"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.salon = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "sauna"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.sauna = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "scuba"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.scuba = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "self_parking"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["SELF_PARKING_AVAILABLE", "SELF_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.self_parking = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "service_area"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "service_area_places"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "services"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "smoke_free_property"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.smoke_free_property = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "snorkeling"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.snorkeling = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "social_hour"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.social_hour = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "spa"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.spa = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "table_service"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.table_service = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tennis"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.tennis = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "thermal_pool"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.thermal_pool = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "timezone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "toll_free_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "treadmill"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.treadmill = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "tty_phone"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "turndown_service"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.turndown_service = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "twitter_handle"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "uber_link"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "uber_trip_branding"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "valet_parking"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["VALET_PARKING_AVAILABLE", "VALET_PARKING_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.valet_parking = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "vending_machine"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.vending_machine = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "videos"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "wading_pool"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.wading_pool = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "wake_up_calls"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.wake_up_calls = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "walkable_coordinate"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "water_park"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.water_park = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "water_skiing"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.water_skiing = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "watercraft"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["WATERCRAFT_RENTALS", "WATERCRAFT_RENTALS_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.watercraft = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "waterslide"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.waterslide = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "wave_pool"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.wave_pool = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "website_url"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "weight_machine"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.weight_machine = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "wheelchair_accessible"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["YES", "NO", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.wheelchair_accessible = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "wifi_available"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["WIFI_AVAILABLE", "WIFI_AVAILABLE_FOR_FREE", "NOT_APPLICABLE"])
      # validator.allowable_values.each do |value|
      #   expect { instance.wifi_available = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "year_established"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "year_last_renovated"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
